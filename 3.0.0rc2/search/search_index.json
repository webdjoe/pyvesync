{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyvesync Library\u21b2","text":"<p>This is a work in progress, PR's greatly appreciated \ud83d\ude42.</p> <p>pyvesync is a python library that interacts with devices that are connected to the VeSync app. The library can pull state details and perform actions to devices once they are set up in the app. This is not a local connection, the pyvesync library connects the VeSync cloud API, which reads and sends commands to the device, so internet access is required for both the device and library. There is no current method to control locally.</p>"},{"location":"#supported-devices","title":"Supported devices\u21b2","text":"<p>The following product types are supported:</p> <ol> <li><code>outlet</code> - Outlet devices</li> <li><code>switch</code> - Wall switches</li> <li><code>fan</code> - Fans (not air purifiers or humidifiers)</li> <li><code>purifier</code> - Air purifiers (not humidifiers)</li> <li><code>humidifier</code> - Humidifiers (not air purifiers)</li> <li><code>bulb</code> - Light bulbs (not dimmers or switches)</li> <li><code>airfryer</code> - Air fryers</li> </ol> <p>See Supported Devices for a complete list of supported devices and models.</p>"},{"location":"#whats-new","title":"What's New\u21b2","text":"<p>BREAKING CHANGES - The release of pyvesync 3.0 comes with many improvements and new features, but as a result there are many breaking changes. The structure has been completely refactored, so please read through the documentation and thoroughly test before deploying.</p> <p>The goal is to standardize the library across all devices to allow easier and consistent maintainability moving forward. The original library was created 8 years ago for supporting only a few outlets, it was not designed for supporting 20+ different devices.</p> <p>This will DEFINITELY cause breaking changes with existing code, but the new structure should be easier to work with and more consistent across all devices in the future.</p> <p>Some of the major structural changes include:</p> <ul> <li>Asynchronous API calls through aiohttp</li> <li><code>DeviceContainer</code> object holds all devices in a mutable set structure with additional convenience methods and properties for managing devices. This is located in the <code>VeSync.manager</code> attribute.</li> <li>Custom exceptions for better error handling there are custom exceptions that inherit from <code>VeSyncError</code>, <code>VeSyncAPIError</code>, <code>VeSyncLoginError</code>, <code>VeSyncRateLimitError</code>.</li> <li>Device state has been separated from the device object and is now managed by the device specific subclasses of <code>DeviceState</code>. The state object is located in the <code>state</code> attribute of the device object.</li> <li>Device Classes have been refactored to be more consistent and easier to manage. No more random property and method names for different types of the same device.</li> <li><code>const</code> module to hold all library constants.</li> <li><code>device_map</code> module holds all device type mappings and configuration.</li> </ul> <p>See pyvesync V3 for more details.</p>"},{"location":"#questions-or-help","title":"Questions or Help?\u21b2","text":"<p>If you have a bug or enhancement request for the pyvesync library, please submit an issue.</p> <p>Looking to submit a request for a new device or have a general functionality question, check out discussions.</p> <p>For home assistant issues, please submit on that repository.</p>"},{"location":"#new-devices","title":"New Devices\u21b2","text":"<p>If you would like to add a new device, packet captures must be provided. The iOS and Android VeSync app implements certificate pinning to prevent standard MITM intercepts. Currently, the only known way is to patch the APK and run on a rooted android emulator with frida. This is a complex process that has had varying levels of success. If you successful in capturing packets, please capture all functionality, including the device list and configuraiton screen. Redact accountId and token keys or contact me for a more secure way to share.</p>"},{"location":"#general-usage","title":"General Usage\u21b2","text":"<p>The <code>pyvesync.vesync.VeSync</code> object is the primary class that is referred to as the <code>manager</code> because it provides all the methods and properties to control the library. This should be the only class that is directly instantiated. All devices will be instantiated and managed by the <code>VeSync</code> object.</p> <p>See the Usage documentation for a quick start guide on how to use the library.</p>"},{"location":"#vesync-manager","title":"VeSync Manager\u21b2","text":"<p>The <code>VeSync</code> class has the following parameters, <code>username</code> and <code>password</code> are mandatory:</p> <p>BREAKING CHANGE The VeSync object is now an asynchronous context manager, so it must be used with <code>async with</code>. The debug and redact argument have also been removed. To enable debug logging, set <code>manager.debug = True</code> and redacting by <code>manager.redact = True</code> to the instantiated object.</p> <pre><code>from pyvesync import VeSync\n\n# debug and redact are optional arguments, the above values are\n# the defaults. The library will try to automatically pull in\n# the correct time zone from the API responses.\n    async with VeSync(\n        username=\"user\",\n        password=\"password\",\n        country_code=\"US\",  # Optional - country Code to select correct server\n        session=session,  # Optional - aiohttp.ClientSession\n        time_zone=\"America/New_York\",  # Optional - Timezone, defaults to America/New_York\n        debug=False,  # Optional - Debug output\n        redact=True  # Optional - Redact sensitive information from logs\n        ) as manager:\n\n    # VeSync object is now instantiated\n    await manager.login()\n    # Check if logged in\n    assert manager.enabled\n    # Debug and Redact are optional arguments\n    manager.debug = True\n    manager.redact = True\n\n    # Get devices\n    await manager.get_devices()\n    # Device objects are now instantiated, but do not have state\n    await manager.update() # Pulls in state and updates all devices\n\n    # Or iterate through devices and update individually\n    for device in manager.outlets:\n        await device.update()\n\n    # Or update a product type of devices:\n    for outlet in manager.devices.outlets:\n        await outlet.update()\n</code></pre> <p>Once logged in, the next call should be to the <code>update()</code> method which:</p> <ul> <li>Retrieves list of devices from server</li> <li>Removes stale devices that are not present in the new API call</li> <li>Adds new devices to the device list attributes</li> <li>Instantiates all device classes</li> <li>Updates all devices via the device instance <code>update()</code> method</li> </ul> <pre><code># Get/Update Devices from server - populate device lists\nmanager.update()\n\n# Device instances are now located in the devices attribute:\n\ndevices = manager.devices  # Mutable set-like class\n\n# The entire container can be iterated over:\nfor device in manager.devices:\n    print(device)\n\n\n# Or iterate over specific device types:\nfor outlet in manager.outlets:\n    print(outlet)\n</code></pre> <p>Updating all devices without pulling a device list:</p> <pre><code>manager.update_all_devices()\n</code></pre> <p>Each product type is a property in the <code>devices</code> attribute:</p> <pre><code>manager.devices.outlets = [VeSyncOutletInstances]\nmanager.devices.switches = [VeSyncSwitchInstances]\nmanager.devices.fans = [VeSyncFanInstances]\nmanager.devices.bulbs = [VeSyncBulbInstances]\nmanager.devices.purifiers = [VeSyncPurifierInstances]\nmanager.devices.humidifiers = [VeSyncHumidifierInstances]\nmanager.devices.air_fryers = [VeSyncAirFryerInstances]\nmanagers.devices.thermostats = [VeSyncThermostatInstances]\n</code></pre>"},{"location":"#debugging-and-getting-help","title":"Debugging and Getting Help\u21b2","text":"<p>The library has built-in debug logging that can be enabled by setting the <code>debug</code> attribute of the <code>VeSync</code> object to <code>True</code>. This will log the API calls and response codes to the console. This will not log the actual API calls.</p> <pre><code>from pyvesync import VeSync\n\nasync with VeSync(username=\"EMAIL\", password=\"PASSWORD\") as manager:\n    manager.debug = True  # Enable debug logging\n    await manager.login()\n    await manager.get_devices()\n</code></pre> <p>To log the full API request and response, set the <code>verbose</code> attribute to <code>True</code>. This will log the full request and response, including headers and body. This is useful for debugging issues with the API calls. Setting the <code>redact</code> attribute to <code>False</code> will not redact the sensitive information in the logs, such as the username and password. <code>redact</code> is <code>True</code> by default.</p> <pre><code>from pyvesync import VeSync\n\nasync with VeSync(username=\"EMAIL\", password=\"PASSWORD\") as manager:\n    manager.debug = True  # Enable debug logging\n    manager.verbose = True  # Enable verbose logging\n    await manager.login()\n    await manager.get_devices()\n</code></pre> <p>Since verbose debugging can output a lot of information, there is a helper function to log to a file instead of the console.</p> <pre><code>from pyvesync import VeSync\n\nasync with VeSync(username=\"EMAIL\", password=\"PASSWORD\") as manager:\n    manager.debug = True  # Enable debug logging\n    manager.verbose = True  # Enable verbose logging\n    await manager.log_to_file(\"debug.log\")  # Can be an absolute or path relative to the current working directory\n    await manager.login()\n    await manager.get_devices()\n\n    # Log to a file instead of the console\n</code></pre>"},{"location":"#device-usage","title":"Device Usage\u21b2","text":"<p>Devices and their attributes and methods can be accessed via the device lists in the manager instance.</p> <p>One device is simple to access, an outlet for example:</p> <pre><code>for devices in manager.outlets:\n    print(outlet)\n    print(outlet.device_name)\n    print(outlet.device_type)\n    print(outlet.sub_device_no)\n    print(outlet.state)\n</code></pre> <p>The last response information is stored in the <code>last_response</code> attribute of the device and returns the <code>ResponseInfo</code> object.</p> <pre><code># Get the last response information\nprint(outlet.last_response)\nResponseInfo(\n    error_name=\"SUCCESS\",\n    error_type=SUCCESS,  # StrEnum from ErrorTypes class\n    message=\"Success\",\n    critical_error=False,\n    operational_error=False,\n    device_online=True,\n)\n</code></pre>"},{"location":"#device-state","title":"Device State\u21b2","text":"<p>All device state information is stored in a separate object in the <code>device.state</code> attribute. Each device has it's own state class that inherits from the <code>pyvesync.base_devices.vesyncbasedevice.DeviceState</code> class. The state object is updated when the device is updated, so it will always be the most recent state of the device. Each product type has it's own state class that hold all available attribute for every device type supported for that product type. For example, purifiers have the <code>PurifierState</code> class, which holds all attributes, some of which may not be supported by all devices.</p> <pre><code>print(outlet.state.device_status)\nDeviceStatus.ON  # StrEnum representing the \"on\" state\n\nprint(outlet.state.connection_status)\nConnectionStatus.ONLINE  # StrEnum representing the \"online\" state\n\nprint(outlet.state.voltage)\n120.0  # Voltage of the device\n</code></pre> <p>For a full listing of available device attributes and methods, see the individual device documentation:</p> <ol> <li>Outlets</li> <li>Bulbs</li> <li>Switches</li> <li>Purifiers</li> <li>Humidifiers</li> <li>Fans</li> <li>Air Fryers</li> <li>Thermostats</li> </ol>"},{"location":"#serializingdeserializing-devices-and-state","title":"Serializing/Deserializing devices and state\u21b2","text":"<p>All devices have the <code>to_json()</code> and <code>to_jsonb()</code> methods which will serialize the device and state to a JSON string or binary json string.</p> <pre><code>device = manager.outlets[0]\nprint(device.to_json(state=True, indent=True))  # JSON string\n# Setting `state=False` will only serialize the attributes in the device class and not the state class\n\nprint(device.to_jsonb(state=True))  # Binary JSON string\n\n# State classes also have the `to_json()` and `to_jsonb()` methods but this does not include any device information, such as device_name, device_type, etc.\nprint(device.state.to_json(indent=True))  # JSON string\n</code></pre> <p>Devices and state objects can also output to a dictionary using the <code>to_dict()</code> method or as a list of tuples with <code>as_tuple()</code>. This is useful for logging or debugging.</p> <pre><code>device = manager.outlets[0]\ndev_dict = device.to_dict(state=True)  # Dictionary of device and state attributes\ndev_dict[\"device_name\"]  # Get the device name from the dictionary\ndev_dict[\"device_status\"] # Returns device status as a StrEnum\n</code></pre>"},{"location":"#custom-exceptions","title":"Custom Exceptions\u21b2","text":"<p>Exceptions are no longer caught by the library and must be handled by the user. Exceptions are raised by server errors and aiohttp connection errors.</p> <p>Errors that occur at the aiohttp level are raised automatically and propogated to the user. That means exceptions raised by aiohttp that inherit from <code>aiohttp.ClientError</code> are propogated.</p> <p>When the connection to the VeSync API succeeds but returns an error code that prevents the library from functioning a custom exception inherrited from <code>pyvesync.logs.VeSyncError</code> is raised.</p> <p>Custom Exceptions raised by all API calls:</p> <ul> <li><code>pyvesync.logs.VeSyncServerError</code> - The API connected and returned a code indicated there is a server-side error.</li> <li><code>pyvesync.logs.VeSyncRateLimitError</code> - The API's rate limit has been exceeded.</li> <li><code>pyvesync.logs.VeSyncAPIStatusCodeError</code> - The API returned a non-200 status code.</li> <li><code>pyvesync.logs.VeSyncAPIResponseError</code> - The response from the API was not in an expected format.</li> </ul> <p>Login API Exceptions</p> <ul> <li><code>pyvesync.logs.VeSyncLoginError</code> - The username or password is incorrect.</li> </ul> <p>See errors documentation for a complete list of error codes and exceptions.</p> <p>The raise_api_errors() function is called for every API call and checks for general response errors. It can raise the following exceptions:</p> <ul> <li><code>VeSyncServerError</code> - The API connected and returned a code indicated there is a server-side error.</li> <li><code>VeSyncRateLimitError</code> - The API's rate limit has been exceeded.</li> <li><code>VeSyncAPIStatusCodeError</code> - The API returned a non-200 status code.</li> <li><code>VeSyncTokenError</code> - The API returned a token error and requires <code>login()</code> to be called again.</li> <li><code>VeSyncLoginError</code> - The user name or password is incorrect.</li> </ul>"},{"location":"#development","title":"Development\u21b2","text":"<p>For details on the structure and architecture of the library, see the Development documentation.</p>"},{"location":"authentication/","title":"VeSync Authentication Module\u21b2","text":"<p>The VeSync Authentication Module provides a clean separation of authentication logic from the main VeSync class, offering improved maintainability, better error handling, and additional features like token persistence.</p>"},{"location":"authentication/#features","title":"Features\u21b2","text":"<ul> <li>Flexible Authentication: Support for both username/password and token-based authentication</li> <li>Token Persistence: Automatic saving and loading of authentication tokens to/from disk</li> <li>Improved Error Handling: More granular and descriptive error messages</li> <li>Better Security: Secure file permissions for token storage</li> <li>Graceful Token Validation: Automatic validation of existing tokens before use</li> <li>Cross-Region Support: Automatic handling of region changes during authentication</li> </ul>"},{"location":"authentication/#usage","title":"Usage\u21b2","text":""},{"location":"authentication/#basic-usernamepassword-authentication","title":"Basic Username/Password Authentication\u21b2","text":"<pre><code>import asyncio\nfrom pyvesync import VeSync\n\nasync def main():\n    manager = VeSync(\n        username=\"your_email@example.com\",\n        password=\"your_password\",\n        country_code=\"US\"\n    )\n\n    # Login\n    success = await manager.login()\n    if success:\n        print(\"Login successful!\")\n        # Use manager for device operations\n        await manager.get_devices()\n        await manager.update_all_devices()\n\n    await manager.__aexit__()\n\nasyncio.run(main())\n</code></pre>"},{"location":"authentication/#token-based-authentication","title":"Token-Based Authentication\u21b2","text":"<pre><code>import asyncio\nfrom pyvesync import VeSync\n\nasync def main():\n    # Use existing token (e.g., from previous login)\n    manager = VeSync(\n        token=\"your_existing_token\",\n        account_id=\"your_account_id\",\n        country_code=\"US\"\n    )\n\n    # Login with token\n    success = await manager.login()\n    if success:\n        print(\"Token authentication successful!\")\n\n    await manager.__aexit__()\n\nasyncio.run(main())\n</code></pre>"},{"location":"authentication/#persistent-token-storage","title":"Persistent Token Storage\u21b2","text":"<pre><code>import asyncio\nfrom pathlib import Path\nfrom pyvesync import VeSync\n\nasync def main():\n    token_file = Path.home() / \".vesync_token\"\n\n    manager = VeSync(\n        username=\"your_email@example.com\",\n        password=\"your_password\",\n        token_file_path=token_file\n    )\n\n    # First login saves token to file\n    success = await manager.login()\n    if success:\n        print(\"Login successful! Token saved for future use.\")\n\n    # Subsequent runs will automatically load the saved token\n    # and validate it before falling back to username/password\n\n    await manager.__aexit__()\n\nasyncio.run(main())\n</code></pre>"},{"location":"authentication/#direct-authentication-management","title":"Direct Authentication Management\u21b2","text":"<pre><code>from pyvesync import VeSync\n\n# Create manager without initial credentials\nmanager = VeSync()\n\n# Set credentials programmatically\nmanager.auth.set_credentials(\n    username=\"your_email@example.com\",\n    password=\"your_password\"\n)\n\n# Check authentication state\nprint(f\"Is authenticated: {manager.auth.is_authenticated}\")\nprint(f\"Username: {manager.auth.username}\")\n\n# Clear credentials\nmanager.auth.clear_credentials()\n</code></pre>"},{"location":"authentication/#authentication-flow","title":"Authentication Flow\u21b2","text":"<p>The authentication process follows these steps:</p> <ol> <li>Token Validation: If a token exists, validate it first</li> <li>Username/Password Login: If no valid token, use credentials</li> <li>Authorization Code Exchange: Get auth code, then exchange for token</li> <li>Cross-Region Handling: Automatically handle region changes</li> <li>Token Persistence: Save token to file if path is provided</li> </ol>"},{"location":"authentication/#vesyncauth-class","title":"VeSyncAuth Class\u21b2","text":"<p>The <code>VeSyncAuth</code> class handles all authentication logic:</p>"},{"location":"authentication/#properties","title":"Properties\u21b2","text":"<ul> <li><code>token</code>: Authentication token</li> <li><code>account_id</code>: VeSync account ID</li> <li><code>country_code</code>: Country code for the account</li> <li><code>username</code>: Account username (read-only)</li> <li><code>password</code>: Account password (read-only)</li> <li><code>is_authenticated</code>: Boolean indicating if user is authenticated</li> </ul>"},{"location":"authentication/#methods","title":"Methods\u21b2","text":"<ul> <li><code>login()</code>: Perform authentication</li> <li><code>set_credentials()</code>: Set authentication credentials</li> <li><code>clear_credentials()</code>: Clear all stored credentials</li> <li><code>get_auth_headers()</code>: Get headers for authenticated API requests</li> <li><code>to_dict()</code>: Get authentication state as dictionary</li> </ul>"},{"location":"authentication/#migration-from-old-vesync-class","title":"Migration from Old VeSync Class\u21b2","text":"<p>The new authentication module is fully backward compatible. Existing code will continue to work:</p> <pre><code># Old way (still works)\nmanager = VeSync(\"user@example.com\", \"password\")\nawait manager.login()\n\n# New way (recommended)\nmanager = VeSync(\n    username=\"user@example.com\",\n    password=\"password\",\n    token_file_path=\"~/.vesync_token\"\n)\nawait manager.login()\n</code></pre>"},{"location":"authentication/#advanced-features","title":"Advanced Features\u21b2","text":""},{"location":"authentication/#custom-token-file-location","title":"Custom Token File Location\u21b2","text":"<pre><code>from pathlib import Path\n\n# Custom location\ntoken_file = Path(\"/secure/location/vesync_token.json\")\nmanager = VeSync(\n    username=\"user@example.com\",\n    password=\"password\",\n    token_file_path=token_file\n)\n</code></pre>"},{"location":"authentication/#token-only-authentication","title":"Token-Only Authentication\u21b2","text":"<pre><code># For applications that manage tokens externally\nmanager = VeSync(\n    token=\"externally_managed_token\",\n    account_id=\"known_account_id\"\n)\n</code></pre>"},{"location":"authentication/#error-handling","title":"Error Handling\u21b2","text":"<pre><code>from pyvesync.utils.errors import VeSyncLoginError, VeSyncAPIResponseError\n\ntry:\n    success = await manager.login()\nexcept VeSyncLoginError as e:\n    print(f\"Login failed: {e}\")\nexcept VeSyncAPIResponseError as e:\n    print(f\"API error: {e}\")\n</code></pre>"},{"location":"authentication/#security-considerations","title":"Security Considerations\u21b2","text":"<ul> <li>Token files are created with restrictive permissions (0o600)</li> <li>Sensitive information is not included in string representations</li> <li>Credentials are cleared from memory when <code>clear_credentials()</code> is called</li> <li>Token validation prevents use of expired tokens</li> </ul>"},{"location":"authentication/#thread-safety","title":"Thread Safety\u21b2","text":"<p>The authentication module is designed for use with asyncio and is not thread-safe. Use appropriate synchronization if accessing from multiple threads.</p>"},{"location":"pyvesync3/","title":"pyvesync V3.0 Changes\u21b2","text":"<p>BREAKING CHANGES - The release of pyvesync 3.0 comes with many improvements and new features, but as a result there are many breaking changes. The structure has been completely refactored, so please read through the documentation and thoroughly test before deploying.</p> <p>The goal is to standardize the library across all devices to allow easier and consistent maintainability moving forward. The original library was created 8 years ago for supporting only a few outlets, it was not designed for supporting 20+ different devices.</p> <p>Some of the changes are:</p> <ul> <li>Asynchronous network requests with aiohttp</li> <li>Strong typing of all network requests and responses.</li> <li>New <code>product_type</code> nomenclature to map with API.</li> <li>Base classes for all product types for easier <code>isinstance</code> checks.</li> <li>Standardized the API for all device to follow a common naming convention.</li> <li>Custom exceptions and error (code) handling for API responses.</li> <li><code>last_response</code> attribute on device instances to hold information on the last API response.</li> <li><code>DeviceContainer</code> object holds all devices in a mutable set structure with additional convenience methods and properties for managing devices. This is located in the <code>VeSync.manager.devices</code> attribute.</li> <li>Custom exceptions for better error handling - <code>VeSyncError</code>, <code>VeSyncAPIException</code>, <code>VeSyncLoginException</code>, <code>VeSyncRateLimitException</code>, <code>VeSyncNoDevicesException</code></li> <li>Device state has been separated from the device object and is now managed by the device specific subclasses of <code>DeviceState</code>. The state object is located in the <code>state</code> attribute of the device object.</li> <li><code>const</code> module to hold all library constants.</li> <li><code>device_map</code> module holds all device type mappings and configuration.</li> <li>Allow for the changing of regions and API base URL.</li> </ul> <p>If you submit a PR please ensure that it follows all conventions outlined in CONTRIBUTING.</p>"},{"location":"pyvesync3/#asynchronous-operation","title":"Asynchronous operation\u21b2","text":"<p>Library is now asynchronous, using aiohttp as a replacement for requests. The <code>pyvesync.VeSync</code> class is an asynchronous context manager. A <code>aiohttp.ClientSession</code> can be passed or created internally.</p> <pre><code>import asyncio\nimport aiohttp\nfrom pyvesync.vesync import VeSync\n\nasync def main():\n    async with VeSync(\"user\", \"password\", country_code=\"US\") as manager:\n        await manager.login()  # Still returns true\n        if not manager.enabled:\n            print(\"Not logged in.\")\n            return\n        await manager.get_devices() # Instantiates supported devices in device list\n        await manager.update() # Updates the state of all devices\n\n        for outlet in manager.devices.outlets:\n            # The outlet object contain all action methods and static device attributes\n            await outlet.update()\n            await outlet.turn_off()\n            outlet.display() # Print static device information, name, type, CID, etc.\n\n            # State of object held in `device.state` attribute\n            print(outlet.state)\n            state_json = outlet.dumps() # Returns JSON string of device state\n            state_bytes = orjson.dumps(outlet.state) # Returns bytes of device state\n\n            # to view the response information of the last API call\n            print(outlet.last_response)\n            # Prints a ResponseInfo object containing error code,\n            # and other response information\n\n\n# Or use your own session\nsession = aiohttp.ClientSession()\n\nasync def main():\n    async with VeSync(\"user\", \"password\", session=session):\n        await manager.login()\n        await manager.update()\n\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>If using <code>async with</code> is not ideal, the <code>__aenter__()</code> and <code>__aexit__()</code> methods need to be called manually:</p> <pre><code>manager = VeSync(user, password)\n\nawait manager.__aenter__()\n\n...\n\nawait manager.__aexit__(None, None, None)\n</code></pre> <p>pvesync will close the <code>ClientSession</code> that was created by the library on <code>__aexit__</code>. If a session is passed in as an argument, the library does not close it. If a session is passed in and not closed, aiohttp will generate an error on exit:</p> <pre><code>2025-02-16 14:41:07 - ERROR - asyncio - Unclosed client session\n2025-02-16 14:41:07 - ERROR - asyncio - Unclosed connector\n</code></pre>"},{"location":"pyvesync3/#vesync-class-signature","title":"VeSync Class Signature\u21b2","text":"<p>The VeSync signature is:</p> <pre><code>VeSync(\n    username: str,\n    password: str,\n    session: ClientSession | None = None,\n    time_zone: str = DEFAULT_TZ  # America/New_York\n    )\n</code></pre> <p>The VeSync class no longer accepts a <code>debug</code> or <code>redact</code> argument. To set debug the library set <code>manager.debug = True</code> to the instance and <code>manager.redact = True</code>.</p>"},{"location":"pyvesync3/#product-types","title":"Product Types\u21b2","text":"<p>There is a new nomenclature for product types that defines the device class. The <code>device.product_type</code> attribute defines the product type based on the VeSync API. The product type is used to determine the device class and module. The currently supported product types are:</p> <ol> <li><code>outlet</code> - Outlet devices</li> <li><code>switch</code> - Wall switches</li> <li><code>fan</code> - Fans (not air purifiers or humidifiers)</li> <li><code>purifier</code> - Air purifiers (not humidifiers)</li> <li><code>humidifier</code> - Humidifiers (not air purifiers)</li> <li><code>bulb</code> - Light bulbs (not dimmers or switches)</li> <li><code>airfryer</code> - Air fryers</li> </ol> <p>See Supported Devices for a complete list of supported devices and models.</p>"},{"location":"pyvesync3/#custom-exceptions","title":"Custom Exceptions\u21b2","text":"<p>Exceptions are no longer caught by the library and must be handled by the user. Exceptions are raised by server errors and aiohttp connection errors.</p> <p>Errors that occur at the aiohttp level are raised automatically and propogated to the user. That means exceptions raised by aiohttp that inherit from <code>aiohttp.ClientError</code> are propogated.</p> <p>When the connection to the VeSync API succeeds but returns an error code that prevents the library from functioning a custom exception inherrited from <code>pyvesync.utils.errors.VeSyncError</code> is raised.</p> <p>Custom Exceptions raised by all API calls:</p> <ul> <li>VeSyncServerError - The API connected and returned a code indicated there is a server-side error.</li> <li>VeSyncRateLimitError - The API's rate limit has been exceeded.</li> <li>VeSyncAPIStatusCodeError - The API returned a non-200 status code.</li> <li>VeSyncAPIResponseError - The response from the API was not in an expected format.</li> </ul> <p>Login API Exceptions</p> <ul> <li>VeSyncLoginError - The username or password is incorrect.</li> </ul> <p>See errors documentation for a complete list of error codes and exceptions.</p>"},{"location":"pyvesync3/#device-last-response-information","title":"Device Last Response Information\u21b2","text":"<p>If no exception is raised by the API, the response code and message of the last API call is stored in the <code>device.last_response</code> attribute. This is a <code>ResponseInfo</code> object that contains the following attributes:</p> <pre><code>ResponseInfo(\n    name=\"SUCCESS\",\n    error_type=\"\",\n    message=\"\",\n    critical_error=False,\n    operational_error=False,\n    device_online=True\n)\n</code></pre> <p>The ResponseInfo object is populated from the API response and source code.</p>"},{"location":"pyvesync3/#input-validation","title":"Input Validation\u21b2","text":"<p>When values that are required to be in a range are input, such as RGB/HSV colors, fan levels, etc. the library will no longer automatically adjust values outside of that range. The function performing the operation will just return False, with a debug message in the log. This is to minimize complexity and utility of the underlying code. If an invalid input is provided, the library should not assume to correct it.</p> <p>For example, setting bulb RGB color:</p> <p>OLD OPERATION - Entering values outside the accepted range were corrected to the nearest extreme and the operation is performed.</p> <pre><code>set_rgb = await bulb.set_rgb(300,0,-50)\nassert set_rgb == True # Bulb was set to the min/max RGB 255,0,0\n</code></pre> <p>NEW OPERATION - invalid values return false and operation is not performed.</p> <pre><code>set_rgb = await bulb.set_rgb(300,0,-50)\nassert set_rgb == False\n</code></pre> <p>All methods that set RGB/HSV color now require all three inputs, red/green/blue or hue/saturation/value. I do not see the use in updating <code>red</code>, <code>green</code> or <code>blue</code>/<code>hue</code>, <code>saturation</code> or <code>value</code> individually. If you have a strong need for this, please open an issue with a detailed use case.</p>"},{"location":"pyvesync3/#strong-typing-with-mashumaro","title":"Strong Typing with Mashumaro\u21b2","text":"<p>All API requests and responses must be deserialized with a mashumaro dataclass. The dataclass is used to validate the response and ensure that the data is in the expected format. Requests are also serialized with a dataclass model to ensure that there are no breaking changes when changes are made to the library.</p> <p>The data models are located in the <code>models</code> folder in separate models. The <code>base_models</code> module contains a dataclass holding the default values that do not change between library changes. The <code>base_models</code> module is imported into all other models to ensure that the default values stay consistent. The <code>base_models</code> module also contains base models that can be inherited for easy configuration and common fields.</p> <pre><code>@dataclass\nclass ResponseBaseModel(DataClassORJSONMixin):\n    \"\"\"Base response model for API responses.\"\"\"\n\n    class Config(BaseConfig):\n        \"\"\"orjson config for dataclasses.\"\"\"\n        orjson_options = orjson.OPT_NON_STR_KEYS\n        forbid_extra_keys = False\n</code></pre> <p><code>ResponseCodeModel</code> - Inherits from <code>ResponseBaseModel</code> and contains the base keys in most API responses:</p> <pre><code>@dataclass\nclass ResponseCodeModel(ResponseBaseModel):\n    \"\"\"Model for the 'result' field in response.\"\"\"\n    traceId: str\n    code: int\n    msg: str | None\n</code></pre> <p>Models for each device should be kept in the <code>data_models</code> folder with the appropriate device name:</p> <ul> <li><code>bypass_models</code> - See <code>Development</code> for more information on bypass devices.</li> <li><code>bulb_models</code></li> <li><code>humidifier_models</code></li> <li><code>purifier_models</code></li> <li><code>outlet_models</code></li> <li><code>switch_models</code></li> <li><code>fan_models</code></li> <li><code>airfryer_models</code></li> <li><code>thermostat_models</code></li> </ul> <p>There are multiple levels to some requests with nested dictionaries. These must be defined in different classes:</p> <pre><code># The ResponseESL100CWDeviceDetail inherits from ResponseCodeModel\n@dataclass\nclass ResponseESL100CWDeviceDetail(ResponseCodeModel):\n    \"\"\"Response model for Etekcity bulb details.\"\"\"\n    result: ResponseESL100CWDetailResult\n\n\n@dataclass\nclass ResponseESL100CWLight(ResponseBaseModel):\n    \"\"\"ESL100CW Tunable Bulb Device Detail Response.\"\"\"\n    action: str\n    brightness: int = 0\n    colorTempe: int = 0\n\n\n@dataclass\nclass ResponseESL100CWDetailResult(ResponseBaseModel):\n    \"\"\"Result model for ESL100CW Tunable bulb details.\"\"\"\n    light: ResponseESL100CWLight\n</code></pre> <p>This model parses the following json response:</p> <pre><code>from pyvesync.data_models.bulb_models import ResponseESL100CWDeviceDetail\nimport orjson\n\napi_response = {\n    \"traceId\": \"12345678\",\n    \"code\": 0,\n    \"msg\": \"success\",\n    \"module\": None,\n    \"stacktrace\": None,\n    \"result\": {\n        \"light\": {\n            \"action\": \"on\",\n            \"brightness\": 5,\n            \"colorTempe\": 0\n        }\n    }\n}\n\n# Response will already be in bytes, so this is unecessary\nresponse_bytes = orjson.dumps(api_response, options=orjson.OPT_NON_STR_KEYS)\n\nresponse_model = ResponseESL100CWDeviceDetail.from_json(response_bytes)\n\nresult = response_model.result\nlight_model = result.light\nprint(light_model.action)  # prints: on\nprint(light_model.brightness)  # prints: 5\nprint(light_model.colorTempe)  # prints: 0\n</code></pre>"},{"location":"pyvesync3/#making-api-calls","title":"Making API Calls\u21b2","text":"<p>The helper function <code>pyvesync.utils.helpers.Helpers.get_class_attributes</code> is used to fill the values of the API calls by looking up class attributes, such as <code>token</code> in the <code>VeSync</code> instance and <code>cid</code> in the device instance. It accepts a list of keys and pulls the values of each key as they are found in the passed object:</p> <pre><code>keys = ['token', 'accountId', 'cid', 'timeZone', 'countryCode']\nmanager_dict = get_class_attributes(manager, keys)\n# request_dict = {\"token\": \"AUTH_TOKEN\", \"accountId\": \"ACCOUNT_ID\"}\ndevice_dict = get_class_attributes(device, keys)\n# device_dict = {\"cid\": \"DEVICE CID\"}\n</code></pre> <p>It can also handle class methods for items such as traceId which need to be calculated each API call:</p> <pre><code>keys = ['traceId']\ndefault_dict = get_class_attributes(DefaultValues, keys)\n# {\"traceId\": \"TIMESTAMP\"}\n\n# It can also handle underscores and different capitalization schemes\n# It will always return the format of the key being passed in:\nkeys = [\"trace_id\", \"AccountID\"]\nrequest_dict = get_class_attributes(DefaultValues, keys)\n# {\"trace_id\": \"TIMESTAMP\"}\nmanager_dict = get_class_attributes(manager, keys)\n# {\"AccountID\": \"ACCOUNT ID\"}\n</code></pre>"},{"location":"pyvesync3/#device-container","title":"Device Container\u21b2","text":"<p>Devices are held in the DeviceContainer class in the <code>manager.devices</code> attribute. The <code>DeviceContainer</code> class is a singleton class, so only one instance can exist. The class inherits from <code>MutableSet</code> so it contains unique objects, with the ability to add and remove devices using the <code>add</code>, <code>remove</code> and <code>clear</code> methods. However, these methods only accept device objects. To simplify removing devices, there is the <code>remove_by_cid(cid: str)</code> method.</p> <p>To get devices by device name, use the <code>get_by_name(name: str)</code> method. There are two convenience methods <code>add_new_devices</code> and <code>remove_stale_devices</code> that accept the device list response model.</p> <p>The <code>DeviceContainer</code> object has a property for each product type that returns a list of devices. For example, <code>DeviceContainer.outlets</code> returns a list of all outlets product type devices.</p> <p>See DeviceContainer for more information on the device container.</p> <pre><code>import asyncio\nfrom pyvesync import VeSync\n\nasync def main():\n    async with VeSync(user, password) as manager:\n        assert len(manager.devices) == 0 # No devices yet\n        await manager.login()\n\n        await manager.get_devices() # Pulls in devices\n        assert len(manager.devices) &gt; 0 # Devices are now in the container\n\n        for device in manager.devices:\n            print(device) # Prints all devices in the container\n\n        manager.update()  # Pull state into devices\n\n        # also holds the product types as properties\n\n        outlets = manager.devices.outlets  # list of VeSyncOutlet objects\n        switches = manager.devices.switches # list of VeSyncSwitch objects\n        fans = manager.devices.fans  # list of VeSyncFan objects\n        bulbs = manager.devices.bulbs  # list of VeSyncBulb objects\n        humidifiers = manager.devices.humidifiers # VeSyncHumid objects\n        air_purifiers = manager.devices.air_purifiers # list of VeSyncPurifier objects\n\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre>"},{"location":"pyvesync3/#device-base-classes","title":"Device Base Classes\u21b2","text":"<p>The device classes are now all inherited from their own product type specific base class. All base classes still inherit from <code>vesyncbasedevice</code>. The base class provides the common functionality for all devices and the device classes provide the specific functionality for each device. The <code>pyvesync.base_devices</code> module contains the base classes for all devices in their respective modules by product type. The base state class is <code>DeviceState</code>. Both <code>VeSyncBaseDevice</code> and <code>DeviceState</code> are inherited by device and their state classes.</p> <p>The base module should hold all properties and methods that are common to all devices. The base module also contains the base devices state class. The base device state class holds all state attributes for all underlying devices.</p>"},{"location":"pyvesync3/#device-configuration-with-device_map-module","title":"Device Configuration with device_map module\u21b2","text":"<p>All features and configuration options for devices are held in the <code>pyveysnc.device_map</code> module. Older versions of pyvesync held the device configuration in each device module, all of these have moved to the <code>device_map</code> module. Each product type has a dataclass structure that is used to define all of the configuration options for each type. The <code>device_map.get_device_config(device_type: str)</code> method is used to lookup the configuration dataclass instance by the <code>deviceType</code> value in the device list response.</p>"},{"location":"pyvesync3/#constants","title":"Constants\u21b2","text":"<p>All constants should be located in the const module, including default values. There should not be any constants defined in the code. Use <code>enum.StrEnum</code> or <code>enum.IntEnum</code> for Enum values.</p> <p>All device modes and feature names are defined in this module.</p> <p><code>IntEnum</code> and <code>StrEnum</code> are preferred for device status and state because boolean only allows for two states. There is no way to tell if the state is not yet known or unsupported.</p> <p>The <code>IntFlag</code> and <code>StrFlag</code> classes are used to define attributes in the state class that may not be supported by all devices.</p> <pre><code>class IntFlag(IntEnum):\n    \"\"\"Integer flag to indicate if a device is not supported.\n\n    This is used by data models as a default value for feature attributes\n    that are not supported by all devices.\n\n    The default value is -999.\n    \"\"\"\n    NOT_SUPPORTED = -999\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return string representation of IntFlag.\"\"\"\n        return str(self.name)\n\n\nclass StrFlag(StrEnum):\n    \"\"\"String flag to indicate if a device is not supported.\n\n    This is used by data models as a default value for feature attributes\n    that are not supported by all devices.\n\n    The default value is \"not_supported\".\n    \"\"\"\n    NOT_SUPPORTED = \"not_supported\"\n</code></pre> <p>The string states that support 'on' and 'off' have helper methods that allow for easy conversion from bool and int values:</p> <pre><code>from pyvesync.const import DeviceStatus\n\napi_int = 1\napi_bool = True\n\ndevice.state.device_status = DeviceStatus.from_int(api_int)\nassert device.state.device_status == DeviceStatus.ON\n\ndevice.state.device_status = DeviceStatus.from_bool(api_bool)\nassert device.state.device_status == DeviceStatus.ON\n\napi_int = int(device.state.device_status)\nassert api_int == 1\n\napi_bool = bool(device.state.device_status)\nassert api_bool == True\n</code></pre> <p>Note that this only works for on/off values.</p>"},{"location":"supported_devices/","title":"Supported Devices\u21b2","text":"<p>The VeSync API supports a variety of devices. The following is a list of devices that are supported by the VeSync API and the <code>pyvesync</code> library. The product type is the terminology used to identify the base device type. The <code>pyvesync</code> library uses the product type to instantiate the correct device class and organize devices.</p> <ol> <li>Bulbs<ul> <li>ESL100 - Etekcity Dimmable Bulb</li> <li>ESL100CW - Etekcity Dimmable Tunable Bulb (Cool to Warm)</li> <li>ESL100MC - Etekcity Multicolor Dimmable Bulb</li> <li>Valceno Multicolor Smart Bulb</li> </ul> </li> <li>Outlets<ul> <li>Etekcity 7A Round Outlet</li> <li>Etekcity 10A Round Outlet EU</li> <li>Etekcity 10A Rount Outlet USA</li> <li>Etekcity 15A Rectangle Outlet</li> <li>Etekcity 15A Outdoor Dual Outlet</li> <li>Round Smart Outlet Series - WHOPLUG / GREENSUN</li> </ul> </li> <li>Switches<ul> <li>ESWL01 - Etekcity Wall Switch</li> <li>ESWL03 - Etekcity 3-Way Switch</li> <li>ESWD16 - Etekcity Dimmer Switch</li> </ul> </li> <li>Purifiers<ul> <li>Everest Air</li> <li>Vital 200S/100S</li> <li>Core600s</li> <li>Core400s</li> <li>Core300s</li> <li>Core200S</li> <li>LV-PUR131S</li> <li>Sprout Air Purifier</li> </ul> </li> <li>Humidifiers<ul> <li>Classic 200S - 2L Smart Humidifier</li> <li>Classic 300S - 3L Smart Humidifier</li> <li>Dual 200S</li> <li>LV600S - 6L Smart Humidifier</li> <li>OasisMist 4.5L Humidifier</li> <li>OasisMist 1000S Humidifier</li> <li>Superior 6000S - 6L Smart Humidifier</li> </ul> </li> <li>Fans<ul> <li>42\" Tower Fan</li> </ul> </li> <li>Air Fryers<ul> <li>CS137 - 3.7qt Air Fryer</li> <li>CS158 - 5.8qt Air Fryer</li> </ul> </li> <li>Thermostats<ul> <li>Aura Thermostat Needs testing</li> </ul> </li> </ol>"},{"location":"supported_devices/#device-features","title":"Device Features\u21b2","text":""},{"location":"supported_devices/#switches","title":"Switches\u21b2","text":"<p>Switches have minimal features, the dimmer switch is the only switch that has additional functionality.</p> Device Name Device Type Dimmer Plate Lighting RGB Plate Lighting Etekcity Wall Switch ESWL01 Etekcity 3-Way Switch ESWL03 Etekcity Dimmer Switch ESWD16 \u2714 \u2714 \u2714"},{"location":"supported_devices/#outlets","title":"Outlets\u21b2","text":"Device Name Power Stats Nightlight 7A Round Outlet \u2714 10A Round EU Outlet \u2714 10A Round US Outlet 15A Rectangle Outlet \u2714 \u2714 15A Outdoor Dual Outlet \u2714 Round Smart Series"},{"location":"supported_devices/#purifiers","title":"Purifiers\u21b2","text":"Device Name PM2.5 PM1.0 PM10 Vent Angle Light Detection Everest Air \u2714 \u2714 \u2714 \u2714 \u2714 Vital 200S/100S \u2714 \u2714 Core600s \u2714 Core400s \u2714 Core300s \u2714 Core200s \u2714 LV-PUR131S \u2714"},{"location":"supported_devices/#humidifiers","title":"Humidifiers\u21b2","text":"Device Name Night Light Warm Mist Classic 200S Classic 300S \u2714 \u2714 Dual 200S LV600S \u2714 OasisMist \u2714 Superior 6000S \u2714"},{"location":"supported_devices/#fans","title":"Fans\u21b2","text":"<p>Tower Fan - Fan Rotate</p>"},{"location":"supported_devices/#air-fryers","title":"Air Fryers\u21b2","text":"<p>Air Fryer - All supported features of CS137 and CS158</p>"},{"location":"usage/","title":"Quick Start Guide\u21b2","text":"<p>This is a quick start guide to get you up and running with the library. Each device has it's own properties and methods that can be found on the specific device pages.</p>"},{"location":"usage/#installing","title":"Installing\u21b2","text":""},{"location":"usage/#on-linux","title":"On Linux\u21b2","text":"<p>You can install the library using pip or from source. The library is compatible with Python 3.11 and higher.</p> <p>Before either method of installation, make sure you have python 3.11 or later and the following packages installed:</p> <pre><code>sudo apt install python3-venv python3-pip git\n</code></pre>"},{"location":"usage/#install-from-source","title":"Install from source\u21b2","text":"<p>These are the directions for installing the library from source in a folder in the <code>$HOME</code> directory. Change the first line <code>cd ~</code> to the directory you want to install the library in if <code>$HOME</code> is not suitable.</p> <p>The git checkout line is used to switch to the appropriate branch. If you are using <code>master</code>, then you can skip this line. The <code>dev-2.0</code> branch is the latest development branch and may contain breaking changes.</p> <pre><code>cd ~\ngit clone https://github.com/webdjoe/pyvesync.git\ncd pyvesync\ngit checkout dev-2.0\n</code></pre> <p>Then create a new virtual environment and install the library.</p> <pre><code># Starting in the pyvesync directory\n# Check Python version is 3.11 or higher - or python3.11 --version\npython3 --version\n# Create a new venv - or use python3.11 -m venv venv\npython3 -m venv venv\n# Activate the virtual environment\nsource venv/bin/activate\n# Install the library\npip install .\n</code></pre>"},{"location":"usage/#install-via-pip-from-github","title":"Install via pip from github\u21b2","text":"<p>This method installs the library or a specific branch from the repository. The <code>BRANCHNAME</code> is the name of the branch you want to install.</p> <pre><code>cd ~\nmkdir pyvesync &amp;&amp; cd pyvesync\n\n# Check Python version is 3.11 or higher - or python3.11 --version\npython3 --version\n# Create a new venv\npython3 -m venv venv\n# Activate the venv on linux\nsource venv/bin/activate\n\n# Install branch to be tested into new virtual environment:\npip install git+https://github.com/webdjoe/pyvesync.git@dev-2.0\n\n# Install a PR that has not been merged using the PR number:\npip install git+https://github.com/webdjoe/pyvesync.git@refs/pull/{PR_NUMBER}/head\n\n# Or if you are installing the latest release:\npip install pyvesync\n</code></pre>"},{"location":"usage/#on-windows","title":"On Windows\u21b2","text":"<p>You can install the library using pip or from source. The library is compatible with Python 3.11 and higher. The instructions are similar to the Linux instructions with a few differences.</p> <p>Before either method of installation, make sure you have python 3.11 or later and have git installed. You can download git from git-scm.com.</p>"},{"location":"usage/#windows-from-source","title":"Windows from source\u21b2","text":"<p>This method installs the library from source in a folder in the <code>%USERPROFILE%</code> directory. Change the first line <code>cd %USERPROFILE%</code> to the directory you want to install the library in if <code>%USERPROFILE%</code> is not suitable.</p> <pre><code>cd %USERPROFILE%\ngit clone \"https://github.com/webdjoe/pyvesync.git\"\ncd pyvesync\ngit checkout dev-2.0\n\n# Check python version is 3.11 or higher\npython --version # or python3 --version\n# Create a new venv\npython -m venv venv\n# Activate the virtual environment\n.\\venv\\Scripts\\activate.ps1 # If you are using PowerShell\n.\\venv\\Scripts\\activate.bat # If you are using cmd.exe\n\n# Install the library\npip install .\n</code></pre>"},{"location":"usage/#windows-via-pip-from-github","title":"Windows via pip from github\u21b2","text":"<p>This method installs the library or a specific branch from the repository. The <code>BRANCHNAME</code> is the name of the branch you want to install.</p> <pre><code>cd %USERPROFILE%\nmkdir pyvesync &amp;&amp; cd pyvesync\npython --version # Check python version is 3.11 or higher\npython -m venv venv # Create a new venv\n.\\venv\\Scripts\\activate.ps1 # Activate the venv on PowerShell\n# OR\n.\\venv\\Scripts\\activate.bat # Activate the venv on cmd.exe\n\n# Install branch to be tested into new virtual environment:\npip install git+https://github.com/webdjoe/pyvesync.git@dev-2.0\n# Install a PR that has not been merged using the PR number:\npip install git+https://github.com/webdjoe/pyvesync.git@refs/pull/{PR_NUMBER}/head\n# Or if you are installing the latest release:\npip install pyvesync\n</code></pre>"},{"location":"usage/#running-the-library","title":"Running the Library\u21b2","text":"<p>The <code>pyvesync.VeSync</code> object is the main entrypoint of the library. It is an asynchronous context manager, so it must be used with <code>async with</code>. The <code>VeSync</code> object is the main object that is used to interact with the library. It is responsible for logging in, getting devices, and updating devices. It is referred to as <code>manager</code> in the examples.</p> <pre><code>import asyncio\nfrom pyvesync import VeSync\n\nasync def main():\n    # Create a new VeSync object\n    async with VeSync(username=\"EMAIL\", password=\"PASSWORD\") as manager:\n\n        # To enable debugging\n        manager.debug = True\n\n        # Login to the VeSync account\n        await manager.login()\n\n        # Check if logged in\n        assert manager.enabled\n\n        # Get devices\n        await manager.get_devices()\n\n        # Update all devices\n        await manager.update()\n\n        # OR Iterate through devices and update individually\n        for device in manager.outlets:\n            await device.update()\n</code></pre> <p>Devices are held in the <code>manager.devices</code> attribute, which is the instance of <code>DeviceContainer</code> that acts as a mutable set. The entire device list can be iterated over or there are properties for each product type that return a list of those device instances. For example, to get all the outlets, use <code>manager.devices.outlets</code> or <code>manager.devices.purifiers</code>.</p> <pre><code>import asyncio\nfrom pyvesync import VeSync\nfrom pyvesync.const import DeviceStatus  # This is a device constant StrEnum\n\nUSER = \"EMAIL\"\nPASSWORD = \"PASSWORD\"\n\nasync def main():\n    manager = VeSync(username=USER, password=PASSWORD)\n    await manager.login() # Login to the VeSync account\n    if not manager.enabled:\n        print(\"Login failed\")\n        return\n    await manager.get_devices() # Get devices\n    await manager.update() # Update all devices\n    for device in manager.devices:\n        print(device) # Print the device name and type\n        await device.update() # Update the device state, this is not required if `manager.update()` has already been called.\n        print(device.state) # Print the device state\n\n        # Turn on or off the device\n        await device.turn_on() # Turn on the device\n        await device.turn_off() # Turn off the device\n\n        # Toggle the device state\n        await device.toggle() # Toggle the device state\n    for outlet in manager.devices.outlets:\n        print(outlet)\n        await outlet.update() # Update the outlet state this is not required if `manager.update()` has already been called.\n        await outlet.turn_on() # Turn on the outlet\n        await outlet.turn_off() # Turn off the outlet\n        await outlet.toggle() # Toggle the outlet state\n\n        await outlet.set_timer(10, DeviceStatus.OFF) # Set a timer to turn off the outlet in 10 seconds\n</code></pre> <p>For more information on the device methods and properties, see the device pages.</p> <p>All devices have the ability to serialize the attributes and state with the <code>to_json()</code> and <code>to_jsonb()</code> methods. The <code>to_json()</code> method returns a JSON string, while the <code>to_jsonb()</code> method returns a JSON object. The <code>to_jsonb()</code> method is useful for storing the device state in a database or sending it to an API.</p> <pre><code>async def main():\n    # I've excluded the login and get_devices methods for simplicity.\n    for outlet in manager.devices.outlets:\n        print(outlet.to_json(state=True, indent=True)) # Print the JSON string of the outlet state\n        print(outlet.to_jsonb(state=True)) # Print the JSON object of the outlet and state\n        # Setting `state=False` will only show the static device attributes\n\n        # State objects also have these methods\n        print(outlet.state.to_json(state=True, indent=True)) # Print the JSON string of the outlet state\n        print(outlet.state.to_jsonb(state=True)) # Print the JSON object of the outlet state\n</code></pre> <p>The <code>to_dict()</code> and <code>as_tuple()</code> methods are also available for each device and state object. The <code>to_dict()</code> method returns a dictionary of the device attributes, while the <code>as_tuple()</code> method returns a tuple of the device attributes.</p> <p>They have the same signature as the <code>to_json()</code> and <code>to_jsonb()</code> methods.</p> <pre><code>device_dict = outlet.to_dict(state=True) # Returns a dictionary of the outlet attributes\ndevice_tuple = outlet.as_tuple(state=True) # Returns a tuple of the outlet attributes\n</code></pre>"},{"location":"usage/#device-specific-scripts","title":"Device Specific Scripts\u21b2","text":"<p>This section contains scripts that illustrate the functionality of each product type. The scripts are not exhaustive and are meant to be used as a starting point for your own scripts.</p>"},{"location":"development/","title":"pyvesync Library Development\u21b2","text":"<p>This is a community driven library, so contributions are welcome! Due to the size of the library and variety of API calls and devices there are guidelines that need to be followed to ensure the continued development and maintanability.</p> <p>There is a new nomenclature for product types that defines the device class. The <code>device.product_type</code> attribute defines the product type based on the VeSync API. The product type is used to determine the device class and module. The currently supported product types are:</p> <ol> <li><code>outlet</code> - Outlet devices</li> <li><code>switch</code> - Wall switches</li> <li><code>fan</code> - Fans (not air purifiers or humidifiers)</li> <li><code>purifier</code> - Air purifiers (not humidifiers)</li> <li><code>humidifier</code> - Humidifiers (not air purifiers)</li> <li><code>bulb</code> - Light bulbs (not dimmers or switches)</li> <li><code>airfryer</code> - Air fryers</li> </ol>"},{"location":"development/#architecture","title":"Architecture\u21b2","text":"<p>The <code>pyvesync.vesync.VeSync</code> class, also referred to as the <code>manager</code> is the central control for the entire library. This is the only class that should be directly instantiated.</p> <p>The <code>VeSync</code> instance contains the authentication information and holds the device objects. The <code>VeSync</code> class has the method <code>async_call_api</code> which should be used for all API calls. It is as you might has guessed asynchronous. The session can either be passed in when instantiating the manager or generated internally.</p> <p>Devices have a base class in the <code>pyvesync.base_devices</code> module. Each device type has a separate module that contains the device class and the API calls that are specific to that device type. The device classes inherit from the <code>VeSyncBaseDevice</code> and <code>VeSyncToggleDevice</code> base classes and implement the API calls for that device type.</p> <p>The base class for the device state is also located in the <code>base_devices</code> module. The device state is a dataclass that contains all the attributes for that device type. The state is updated when <code>update()</code> is called. All attributes should be kept in the device base state class and attributes that are not supported by all models should have a <code>IntFlag.NOT_SUPPORTED</code> or <code>StrFlag.NOT_SUPPORTED</code> value.</p>"},{"location":"development/#naming-conventions","title":"Naming conventions\u21b2","text":"<p>All attributes and methods should be named using snake_case and follow the naming convention outlined below.</p>"},{"location":"development/#onoff-states","title":"On/Off States\u21b2","text":"<p>States that have a string value, such as \"on\" or \"off\", should be appended with <code>_status</code>. For example, <code>device_status</code> or <code>connection_status</code>. The use of bool for on/off state attributes should be avoided. The <code>status</code> attributes should use a <code>StrEnum</code> constant from the <code>pyvesync.const</code> module. The <code>status</code> attributes should be set to <code>StrEnum.NOT_SUPPORTED</code> if the feature is not supported by all devices.</p> <p>The general method to act on an on/off attribue should be <code>toggle_</code> and accept a boolean value. The method should be named <code>toggle_&lt;attribute&gt;</code> and the attribute should be set to the appropriate value. For example, <code>toggle_power</code> or <code>toggle_light_detection</code>. The method should accept a boolean value and set the attribute to the appropriate value.</p> <p>The methods that spefically turn a device or or off should be named <code>turn_on_&lt;attribute&gt;</code> or <code>turn_off_&lt;attribute&gt;</code>. The attribute should be set to the appropriate value. For example, <code>turn_on_power</code> or <code>turn_off_light_detection</code>. The method should accept a boolean value and set the attribute to the appropriate value.</p> <p>With the exception of Air Fryers, all devices inherit from the <code>VeSyncToggleDevice</code> class, which includes the <code>toggle_power</code>, <code>turn_on</code> and <code>turn_off</code> methods.</p>"},{"location":"development/#named-modes-and-levels","title":"Named Modes and Levels\u21b2","text":"<p>For modes or levels, such as <code>fan_level</code> or <code>mode</code> attributes should use a <code>StrEnum</code> defined in the <code>pyvesync.const</code> module.</p> <p>To change the mode or level, the methods should be named as <code>set_&lt;attribute&gt;</code> and accept a string value. The method should be named <code>set_&lt;attribute&gt;</code> and the attribute should be set to the appropriate value. For example, <code>set_fan_level</code> or <code>set_mode</code>. The method should accept a string value and set the attribute to the appropriate value.</p>"},{"location":"development/#library-utils-module","title":"Library Utils Module\u21b2","text":"<p>There are several helper methods and utilities that are provided for convenience:</p>"},{"location":"development/#helpers-module","title":"helpers module\u21b2","text":"<p>The helpers module contains the <code>Validators</code>, <code>Helpers</code> and <code>Timer</code> classes that are used throughout the library. The <code>Validators</code> class contains methods to validate the input values for the API calls. The <code>Helpers</code> class contains methods to help with the API calls and the <code>Timer</code> class is used to handle timers and delays.</p>"},{"location":"development/#strong-typing-of-responses-and-requests","title":"STRONG Typing of responses and requests\u21b2","text":"<p>All data coming in or going out should be strongly typed by a dataclass or TypedDict. The data models are located in the <code>pyvesync.models</code> module. The <code>pyvesync.models.base_models</code> contains the <code>DefaultValues</code> class that is used to hold the constant values that do not change with each API call. It can also contain class or static methods that do not accept any arguments.</p> <p>The helper function <code>pyvesync.helpers.Helpers.get_class_attributes</code> is used to fill the values of the API calls by looking up class attributes, such as <code>token</code> in the <code>VeSync</code> instance and <code>cid</code> in the device instance. It accepts a list of keys and pulls the values of each key as they are found in the passed object:</p> <pre><code>keys = ['token', 'accountId', 'cid', 'timeZone', 'countryCode']\nmanager_dict = get_class_attributes(manager, keys)\n# request_dict = {\"token\": \"AUTH_TOKEN\", \"accountId\": \"ACCOUNT_ID\"}\ndevice_dict = get_class_attributes(device, keys)\n# device_dict = {\"cid\": \"DEVICE CID\"}\n</code></pre> <p>It can also handle class methods for items such as traceId which need to be calculated each API call:</p> <pre><code>keys = ['traceId']\ndefault_dict = get_class_attributes(DefaultValues, keys)\n# {\"traceId\": \"TIMESTAMP\"}\n\n# It can also handle underscores and different capitalization schemes\n# It will always return the format of the key being passed in:\nkeys = [\"trace_id\", \"AccountID\"]\nrequest_dict = get_class_attributes(DefaultValues, keys)\n# {\"trace_id\": \"TIMESTAMP\"}\nmanager_dict = get_class_attributes(manager, keys)\n# {\"AccountID\": \"ACCOUNT ID\"}\n</code></pre>"},{"location":"development/#base-models","title":"Base Models\u21b2","text":"<p>The data models are located in the <code>models</code> folder in separate models. The <code>base_model</code> module contains a dataclass holding the default values that do not change between library changes. The <code>base_model</code> module is imported into all other models to ensure that the default values stay consistent. The <code>base_model</code> module also contains base models that can be inherited for easy configuration and common fields.</p> <pre><code>@dataclass\nclass ResponseBaseModel(DataClassORJSONMixin):\n    \"\"\"Base response model for API responses.\"\"\"\n\n    class Config(BaseConfig):\n        \"\"\"orjson config for dataclasses.\"\"\"\n        orjson_options = orjson.OPT_NON_STR_KEYS\n        forbid_extra_keys = False\n</code></pre> <p><code>ResponseCodeModel</code> - Inherits from <code>ResponseBaseModel</code> and contains the base keys in most API responses:</p> <pre><code>@dataclass\nclass ResponseCodeModel(ResponseBaseModel):\n    \"\"\"Model for the 'result' field in response.\"\"\"\n    traceId: str\n    code: int\n    msg: str | None\n</code></pre>"},{"location":"development/#request-and-response-serializationdeserialization-with-mashumaro","title":"Request and Response Serialization/Deserialization with Mashumaro\u21b2","text":"<p>pyvesync uses Mashumaro with orjson for data models and serializing/deserializing data structures. The models are located in the <code>pyvesync.data_models</code> model. These models should be used to deserialize all API responses. The <code>base_model.DefaultValues</code> should be used to define constant and calculated fields throughout each API call. There are additional helper base classes to simplify models:</p> <p><code>ResponseBaseModel</code> - this contains configuration overrides to allow Mashumaro to deserialize non-string keys and allows extra keys in the response. Only the keys that are needed can be defined.</p> <pre><code>@dataclass\nclass ResponseBaseModel(DataClassORJSONMixin):\n    \"\"\"Base response model for API responses.\"\"\"\n\n    class Config(BaseConfig):\n        \"\"\"orjson config for dataclasses.\"\"\"\n        orjson_options = orjson.OPT_NON_STR_KEYS\n        forbid_extra_keys = False\n</code></pre> <p><code>ResponseCodeModel</code> - Inherits from <code>ResponseBaseModel</code> and contains the base keys in most API responses:</p> <pre><code>@dataclass\nclass ResponseCodeModel(ResponseBaseModel):\n    \"\"\"Model for the 'result' field in response.\"\"\"\n    traceId: str\n    code: int\n    msg: str | None\n\n````\n\nModels for each device should be kept in the `data_models` folder with the appropriate device name:\n\n- `bulb_models`\n- `humidifier_models`\n- `purifier_models`\n- `outlet_models`\n- `switch_models`\n- `fan_models`\n\nThere are multiple levels to some requests with nested dictionaries. These must be defined in different classes:\n\n```python\n# The ResponseESL100CWDeviceDetail inherits from ResponseCodeModel\n@dataclass\nclass ResponseESL100CWDeviceDetail(ResponseCodeModel):\n    \"\"\"Response model for Etekcity bulb details.\"\"\"\n    result: ResponseESL100CWDetailResult\n\n\n@dataclass\nclass ResponseESL100CWLight(ResponseBaseModel):\n    \"\"\"ESL100CW Tunable Bulb Device Detail Response.\"\"\"\n    action: str\n    brightness: int = 0\n    colorTempe: int = 0\n\n\n@dataclass\nclass ResponseESL100CWDetailResult(ResponseBaseModel):\n    \"\"\"Result model for ESL100CW Tunable bulb details.\"\"\"\n    light: ResponseESL100CWLight\n</code></pre> <p>This model parses the following json response:</p> <pre><code>from pyvesync.data_models.bulb_models import ResponseESL100CWDeviceDetail\nimport orjson\n\napi_response = {\n    \"traceId\": \"12345678\",\n    \"code\": 0,\n    \"msg\": \"success\",\n    \"module\": None,\n    \"stacktrace\": None,\n    \"result\": {\n        \"light\": {\n            \"action\": \"on\",\n            \"brightness\": 5,\n            \"colorTempe\": 0\n        }\n    }\n}\n\napi_response_dict, status_code = await manager.async_call_api(\n    \"/v1/endpoint\",\n    \"post\",\n    request_body,\n    request_headers\n)\n\nresponse_model = ResponseESL100CWDeviceDetail.from_dict(response_bytes)\n\nresult = response_model.result\nlight_model = result.light\nprint(light_model.action)  # prints: on\nprint(light_model.brightness)  # prints: 5\nprint(light_model.colorTempe)  # prints: 0\n</code></pre>"},{"location":"development/#constants","title":"Constants\u21b2","text":"<p>All constants should be located in the <code>pyvesync.const</code> module, including default values. There should not be any constants defined in the code. Use <code>enum.StrEnum</code> or <code>enum.IntEnum</code> for Enum values.</p> <p>All device modes and feature names are defined in this module.</p> <p><code>IntEnum</code> and <code>StrEnum</code> are preferred for device status and state because boolean only allows for two states. There is no way to tell if the state is not yet known or unsupported.</p> <p>The <code>IntFlag</code> and <code>StrFlag</code> classes are used to define attributes in the state class that may not be supported by all devices.</p> <pre><code>class IntFlag(IntEnum):\n    \"\"\"Integer flag to indicate if a device is not supported.\n\n    This is used by data models as a default value for feature attributes\n    that are not supported by all devices.\n\n    The default value is -999.\n    \"\"\"\n    NOT_SUPPORTED = -999\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return string representation of IntFlag.\"\"\"\n        return str(self.name)\n\n\nclass StrFlag(StrEnum):\n    \"\"\"String flag to indicate if a device is not supported.\n\n    This is used by data models as a default value for feature attributes\n    that are not supported by all devices.\n\n    The default value is \"not_supported\".\n    \"\"\"\n    NOT_SUPPORTED = \"not_supported\"\n</code></pre> <p>The string states that support 'on' and 'off' have helper methods that allow for easy conversion from bool and int values:</p> <pre><code>from pyvesync.const import DeviceStatus\n\napi_int = 1\napi_bool = True\n\ndevice.state.device_status = DeviceStatus.from_int(api_int)\nassert device.state.device_status == DeviceStatus.ON\n\ndevice.state.device_status = DeviceStatus.from_bool(api_bool)\nassert device.state.device_status == DeviceStatus.ON\n\napi_int = int(device.state.device_status)\nassert api_int == 1\n\napi_bool = bool(device.state.device_status)\nassert api_bool == True\n</code></pre> <p>Note that this only works for on/off values.</p>"},{"location":"development/#device-map","title":"Device Map\u21b2","text":"<p>All features and configuration options for devices are held in the <code>pyveysnc.device_map</code> module. Older versions of pyvesync held the device configuration in each device module, all of these have moved to the <code>device_map</code> module. Each product type has a dataclass structure that is used to define all of the configuration options for each type. The <code>device_map.get_device_config(device_type: str)</code> method is used to lookup the configuration dataclass instance by the <code>deviceType</code> value in the device list response.</p> <p>There are also methods for each device to return the device configuration with the correct type. For example, <code>get_outlet_config()</code> returns the configuration for the outlet device. The configuration is a dataclass that contains all of the attributes for that device type. The configuration is used to define the attributes in the device state class.</p>"},{"location":"development/#authentication","title":"Authentication\u21b2","text":"<p>The two primary authentication attributes are <code>manager.token</code> and <code>manager.account_id</code>. These are used to authenticate all API calls, in combination with other attributes. The <code>country_code</code> and <code>time_zone</code> attributes are also used in the majority of calls. They are retrieved when calling the <code>login()</code> method.</p>"},{"location":"development/#device-container","title":"Device Container\u21b2","text":"<p>Devices are held in the <code>pyvesync.device_container.DeviceContainer</code> class in the <code>manager.devices</code> attribute. The <code>DeviceContainer</code> class is a singleton class, so only one instance can exist. The class inherits from <code>MutableSet</code> so it contains unique objects, with the ability to add and remove devices using the <code>add</code>, <code>remove</code> and <code>clear</code> methods. However, these methods only accept device objects. To simplify removing devices, there is the <code>remove_by_cid(cid: str)</code> method.</p> <p>To get devices by device name, use the <code>get_by_name(name: str)</code> method. There are two convenience methods <code>add_new_devices</code> and <code>remove_stale_devices</code> that accept the device list response model.</p> <p>The <code>DeviceContainer</code> object has a property for each product type that returns a list of devices. For example, <code>DeviceContainer.outlets</code> returns a list of all outlets product type devices.</p>"},{"location":"development/#custom-exceptions","title":"Custom Exceptions\u21b2","text":"<p>Exceptions are no longer caught by the library and must be handled by the user. Exceptions are raised by server errors and aiohttp connection errors.</p> <p>Errors that occur at the aiohttp level are raised automatically and propogated to the user. That means exceptions raised by aiohttp that inherit from <code>aiohttp.ClientError</code> are propogated.</p> <p>When the connection to the VeSync API succeeds but returns an error code that prevents the library from functioning a custom exception inherrited from <code>pyvesync.logs.VeSyncError</code> is raised.</p> <p>Custom Exceptions raised by all API calls:</p> <ul> <li><code>pyvesync.logs.VeSyncServerError</code> - The API connected and returned a code indicated there is a server-side error.</li> <li><code>pyvesync.logs.VeSyncRateLimitError</code> - The API's rate limit has been exceeded.</li> <li><code>pyvesync.logs.VeSyncAPIStatusCodeError</code> - The API returned a non-200 status code.</li> <li><code>pyvesync.logs.VeSyncAPIResponseError</code> - The response from the API was not in an expected format.</li> </ul> <p>Login API Exceptions</p> <ul> <li><code>pyvesync.logs.VeSyncLoginError</code> - The username or password is incorrect.</li> </ul> <p>See errors.py for a complete list of error codes and exceptions.</p>"},{"location":"development/#vesync-apis","title":"VeSync API's\u21b2","text":"<p>The vesync API is typically one of two different types. The first is the Bypass V1 API, which is used for most devices. The second is the Bypass V2 API, which is used for newer devices.</p> <p>The <code>pyvesync.utils.device_mixins</code> module contains mixins for common device API's and helper methods. This allows for easy reuse of code and keeps the device modules clean(er).</p>"},{"location":"development/#general-response-structure","title":"General Response Structure\u21b2","text":"<p>The general response structure for API calls is as follows:</p> <pre><code>{\n    \"traceId\": \"TIMESTAMP\",\n    \"code\": 0,\n    \"msg\": \"request success\",\n    \"module\": null,\n    \"stacktrace\": null,\n}\n</code></pre> <p>The error code contains information from the API call on whether the request was successful or details on the error. The <code>code</code> value is parsed by the library and stored in <code>device.last_response</code> attribute.</p>"},{"location":"development/#bypass-v1","title":"Bypass V1\u21b2","text":"<p>The <code>BypassV1Mixin</code> class is used for generally older devices, such as bulbs, switches, outlets and the first air purifier model (LV-PUR131S). The API calls use the <code>post</code> method and the base endpoint path <code>/cloud/v1/deviceManaged/</code>. The final path segment can either be <code>bypass</code> or a specific function, such as <code>PowerCtl</code>.</p>"},{"location":"development/#bypass-v1-request-structure","title":"Bypass V1 Request Structure\u21b2","text":"<p>When the final path segment is not <code>bypass</code>, e.g. <code>/cloud/v1/deviceManaged/deviceDetail</code>, the method key of the API call is the same as the last path segment:</p> <pre><code>    {\n        \"method\": \"deviceDetail\",\n        \"acceptLanguage\": \"en_US\",\n        \"appVersion\": \"1.0.0\",\n        \"phoneBrand\": \"Android\",\n        \"phoneOS\": \"Android 10\",\n        \"accountID\": \"1234567890\",\n        \"cid\": deviceCID,\n        \"configModule\": configModule,\n        \"debugMode\": False,\n        \"traceId\": 1234567890,\n        \"timeZone\": \"America/New_York\",\n        \"token\": \"abcdefg1234567\",\n        \"userCountryCode\": \"+1\",\n        \"uuid\": 1234567890,\n        \"configModel\": configModule,\n        \"deviceId\": deviceCID,\n    }\n</code></pre> <p>There can also be additional keys in the body of the request, such as <code>\"status\": \"on\"</code>. There are not any nested dictionaries in the request body.</p> <p>For API calls that have the <code>bypass</code> path, the structure is slightly different. The value of the outer <code>method</code> key is <code>bypass</code> and the request contains the <code>jsonCmd</code> key, containing the details of the request:</p> <pre><code>{\n    \"method\": \"bypass\",\n    \"acceptLanguage\": \"en_US\",\n    \"appVersion\": \"1.0.0\",\n    \"phoneBrand\": \"Android\",\n    \"phoneOS\": \"Android 10\",\n    \"accountID\": \"1234567890\",\n    \"cid\": deviceCID,\n    \"configModule\": configModule,\n    \"debugMode\": False,\n    \"traceId\": 1234567890,\n    \"timeZone\": \"America/New_York\",\n    \"token\": \"abcdefg1234567\",\n    \"userCountryCode\": \"+1\",\n    \"uuid\": 1234567890,\n    \"configModel\": configModule,\n    \"deviceId\": deviceCID,\n    \"jsonCmd\": {\n        \"getLightStatus\": \"get\"\n    }\n}\n</code></pre>"},{"location":"development/#bypass-v1-response-structure","title":"Bypass V1 Response Structure\u21b2","text":"<p>Responses for the Bypass V1 API calls have the following structure with the <code>result</code> value containing the response information:</p> <pre><code>{\n    \"traceId\": \"TIMESTAMP\",\n    \"code\": 0,\n    \"msg\": \"request success\",\n    \"module\": null,\n    \"stacktrace\": null,\n    \"result\": {\n        \"light\": {\n            \"action\": \"off\",\n            \"brightness\": 30,\n            \"colorTempe\": 5\n        }\n    }\n}\n</code></pre>"},{"location":"development/#bypass-v1-device-mixin","title":"Bypass V1 Device Mixin\u21b2","text":"<p>The <code>pyvesync.utils.device_mixins.BypassV1Mixin</code> class contains boilerplate code for the devices that use the Bypass V1 api. The mixin contains the <code>call_bypassv1_mixin</code> method that builds the request and calls the api. The method accepts the following parameters:</p> <pre><code>async def call_bypassv1_mixin(\n    self,\n    requestModel: type[RequestBypassV1],  # Model for the request body\n    update_dict: dict | None = None,  # Allows additional keys to be provided in the request body\n    method: str = \"bypass\",  # Method value in request body\n    endpoint: bool = False,  # Last segment of API path\n) -&gt; tuple[dict[str, Any], int]: ...\n</code></pre> <p>The process_bypassv1_response method is used to parse the response, check for errors and return the value of the <code>result</code> key. The method accepts the following parameters:</p> <pre><code>def process_bypassv1_result(\n    device: VeSyncBaseDevice,\n    logger: Logger,\n    method: str,\n    resp_dict: dict | None,\n) -&gt; dict | None: ...\n</code></pre> <p>This is an example of the implementation:</p> <pre><code>from pyvesync.devices import VeSyncSwitch\nfrom pvyesync.models.switch_models import RequestSwitchDetails\nfrom pyvesync.utils.device_mixins import BypassV1Mixin, process_bypassv1_response\n\n\nclass VSDevice(BypassV1Mixin, VeSyncSwitch):\n\n\ndef get_details(self) -&gt; bool:\n    ...\n    update_dict = {\n        \"jsonCmd\": {\n            \"getStatus\": \"get\"\n        }\n    }\n    response = await self.call_bypassv1_api(\n        requestModel=RequestSwitchDetails,\n        update_dict=update_dict,\n        method=\"PowerCtl\",\n        endpoint=True\n    )\n\n    # The process_bypassv1_response method makes the appropriate logs if error in response\n    result = process_bypassv1_response(self, logger, 'get_details', response)\n</code></pre> <p>NOTE The <code>process_bypassv1_response</code> method is not necessary for API calls that perform an action and return the simple response shown above with the <code>code</code> and <code>msg</code> keys and no <code>result</code> key.</p>"},{"location":"development/#bypass-v2","title":"Bypass V2\u21b2","text":"<p>The Bypass V2 API is used for newer devices, such as humidifiers. The API calls use the <code>post</code> method and the base endpoint path <code>/cloud/v2/deviceManaged/bypassV2</code>. The final path segment is always <code>bypassV2</code>.</p>"},{"location":"development/#bypass-v2-request-structure","title":"Bypass V2 Request Structure\u21b2","text":"<p>The bypass V2 request structure is very similiar between API calls. The outer <code>method</code> key always has the <code>bypassv2</code> attribute. The payload structure is always the same with the <code>method</code>, <code>data</code> and <code>source</code> keys. The <code>source</code> key always contains the value <code>APP</code>. The payload <code>method</code> and <code>data</code> keys change.</p> <pre><code>{\n    \"acceptLanguage\": \"en\",\n    \"accountID\": \"ACCOUNTID\",\n    \"appVersion\": \"VeSync 5.5.60\",\n    \"cid\": \"deviceCID\",\n    \"configModule\": \"configModule\",\n    \"debugMode\": false,\n    \"method\": \"bypassV2\",\n    \"phoneBrand\": \"SM-A5070\",\n    \"phoneOS\": \"Android 12\",\n    \"timeZone\": \"America/New_York\",\n    \"token\": \"TOKEN\",\n    \"traceId\": \"1743902977493\",\n    \"userCountryCode\": \"US\",\n    \"deviceId\": \"deviceCID\",\n    \"configModel\": \"configModule\",\n    \"payload\": {\n        \"data\": {},\n        \"method\": \"getPurifierStatus\",\n        \"source\": \"APP\"\n    }\n}\n</code></pre>"},{"location":"development/#bypass-v2-response-structure","title":"Bypass V2 Response Structure\u21b2","text":"<p>The response structure has a relatively similiar structure for all calls with a nested result dictionary, containing an additional <code>code</code> and <code>device_error_code</code> key that provides information on errors that are specific to the device:</p> <pre><code>{\n    \"traceId\": \"TIMESTAMP\",\n    \"code\": 0,\n    \"msg\": \"request success\",\n    \"module\": null,\n    \"stacktrace\": null,\n    \"result\": {\n        \"traceId\": \"TIMESTAMP\",\n        \"code\": 0,\n        \"result\": {\n            \"enabled\": true,\n            \"filter_life\": 98,\n            \"mode\": \"manual\",\n            \"level\": 4,\n            \"air_quality\": 1,\n            \"air_quality_value\": 2,\n            \"display\": true,\n            \"child_lock\": false,\n            \"configuration\": {\n                \"display\": true,\n                \"display_forever\": true,\n                \"auto_preference\": {\n                    \"type\": \"efficient\",\n                    \"room_size\": 1050\n                }\n            },\n            \"extension\": {\n                \"schedule_count\": 0,\n                \"timer_remain\": 0\n            },\n            \"device_error_code\": 0\n        }\n    }\n}\n</code></pre>"},{"location":"development/#bypass-v2-device-mixin","title":"Bypass V2 Device Mixin\u21b2","text":"<p>The <code>pyvesync.utils.device_mixins.BypassV2Mixin</code> class contains boilerplate code for the devices that use the Bypass V1 api. The mixin contains the <code>call_bypassv1_mixin</code> method that builds the request and calls the api. The method accepts the following parameters:</p> <pre><code>    async def call_bypassv2_api(\n        self,\n        payload_method: str,  # Value of method in the payload key\n        data: dict | None = None,  # Dictionary to be passed in the payload data key\n        method: str = \"bypassV2\",  # Allows the outer method value to be changed\n        endpoint: str = \"bypassV2\",  # Allows the last segment of API path to be changed\n    ) -&gt; dict | None: ...\n</code></pre> <p>The process_bypassv2_response method is used to parse the response, check for errors and return the value of the inner <code>result</code> key. The method accepts the following parameters:</p> <pre><code>def process_bypassv2_results(\n    device: VeSyncBaseDevice,\n    logger: Logger,\n    method: str,\n    resp_dict: dict | None,\n) -&gt; dict | None:\n</code></pre> <p>This is an example of how it is used:</p> <pre><code>from pyvesync.base_devices import VeSyncPurifier\nfrom pyvesync.models.purifier_models import RequestPurifierDetails\nfrom pyvesync.utils.device_mixins import BypassV2Mixin, process_bypassv2_response\n\n\nclass VSDevice(BypassV2Mixin, VeSyncPurifier):\n    \"\"\"VeSync Purifier device class.\"\"\"\n\n    async def get_details(self) -&gt; bool:\n        \"\"\"Get the details of the device.\"\"\"\n        response = await self.call_bypassv2_api(\n            payload_method=\"getPurifierStatus\",\n            data=update_dict\n        )\n\n        # The process_bypassv2_response method makes the appropriate logs if error in response\n        result = process_bypassv2_response(self, logger, 'get_details', response)\n</code></pre> <p>NOTE The <code>process_bypassv2_response</code> method is not necessary for API calls that perform an action and return the simple response shown above with the <code>code</code> and <code>msg</code> keys and no <code>result</code> key.</p>"},{"location":"development/constants/","title":"VeSync Constants\u21b2","text":""},{"location":"development/constants/#pyvesync.const","title":"pyvesync.const \u21b2","text":"<p>pyvesync library constants.</p> <p>All device states and information are defined by Enums in this module.</p> <p>Attributes:</p> Name Type Description <code>DEFAULT_LANGUAGE</code> <code>str</code> <p>Default language for the VeSync app.</p> <code>API_BASE_URL</code> <code>str</code> <p>Base URL for the VeSync API. If not specified, a region-specific API URL is automatically selected.</p> <code>API_TIMEOUT</code> <code>int</code> <p>Timeout for API requests.</p> <code>USER_AGENT</code> <code>str</code> <p>User agent for API requests.</p> <code>DEFAULT_TZ</code> <code>str</code> <p>Default timezone for VeSync devices, updated by API after login.</p> <code>DEFAULT_REGION</code> <code>str</code> <p>Default region for VeSync devices, updated by API when retrieving devices.</p> <code>APP_VERSION</code> <code>str</code> <p>Version of the VeSync app.</p> <code>APP_ID</code> <code>str</code> <p>ID of the app. VeSync uses a random 8-letter string, but any non-empty string works.</p> <code>PHONE_BRAND</code> <code>str</code> <p>Brand of the phone used to login to the VeSync app.</p> <code>PHONE_OS</code> <code>str</code> <p>Operating system of the phone used to login to the VeSync app.</p> <code>MOBILE_ID</code> <code>str</code> <p>Unique identifier for the phone used to login to the VeSync app.</p> <code>USER_TYPE</code> <code>str</code> <p>User type for the VeSync app - internal app usage.</p> <code>BYPASS_APP_V</code> <code>str</code> <p>Bypass app version</p> <code>BYPASS_HEADER_UA</code> <code>str</code> <p>Bypass header user agent</p> <code>TERMINAL_ID</code> <code>str</code> <p>Unique identifier for new API calls</p>"},{"location":"development/constants/#pyvesync.const.DEFAULT_LANGUAGE","title":"DEFAULT_LANGUAGE  <code>module-attribute</code>  \u21b2","text":"<pre><code>DEFAULT_LANGUAGE = 'en'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.API_BASE_URL","title":"API_BASE_URL  <code>module-attribute</code>  \u21b2","text":"<pre><code>API_BASE_URL = None\n</code></pre>"},{"location":"development/constants/#pyvesync.const.API_BASE_URL_US","title":"API_BASE_URL_US  <code>module-attribute</code>  \u21b2","text":"<pre><code>API_BASE_URL_US = 'https://smartapi.vesync.com'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.API_BASE_URL_EU","title":"API_BASE_URL_EU  <code>module-attribute</code>  \u21b2","text":"<pre><code>API_BASE_URL_EU = 'https://smartapi.vesync.eu'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.REGION_API_MAP","title":"REGION_API_MAP  <code>module-attribute</code>  \u21b2","text":"<pre><code>REGION_API_MAP = {\n    'US': API_BASE_URL_US,\n    'EU': API_BASE_URL_EU,\n}\n</code></pre>"},{"location":"development/constants/#pyvesync.const.NON_EU_COUNTRY_CODES","title":"NON_EU_COUNTRY_CODES  <code>module-attribute</code>  \u21b2","text":"<pre><code>NON_EU_COUNTRY_CODES = ['US', 'CA', 'MX', 'JP']\n</code></pre>"},{"location":"development/constants/#pyvesync.const.API_TIMEOUT","title":"API_TIMEOUT  <code>module-attribute</code>  \u21b2","text":"<pre><code>API_TIMEOUT = 8\n</code></pre>"},{"location":"development/constants/#pyvesync.const.USER_AGENT","title":"USER_AGENT  <code>module-attribute</code>  \u21b2","text":"<pre><code>USER_AGENT = 'VeSync/3.2.39 (com.etekcity.vesyncPlatform; build:5; iOS 15.5.0) Alamofire/5.2.1'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.DEFAULT_TZ","title":"DEFAULT_TZ  <code>module-attribute</code>  \u21b2","text":"<pre><code>DEFAULT_TZ = 'America/New_York'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.DEFAULT_REGION","title":"DEFAULT_REGION  <code>module-attribute</code>  \u21b2","text":"<pre><code>DEFAULT_REGION = 'US'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.APP_VERSION","title":"APP_VERSION  <code>module-attribute</code>  \u21b2","text":"<pre><code>APP_VERSION = '5.6.60'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.APP_ID","title":"APP_ID  <code>module-attribute</code>  \u21b2","text":"<pre><code>APP_ID = join(choices(ascii_lowercase + digits, k=8))\n</code></pre>"},{"location":"development/constants/#pyvesync.const.PHONE_BRAND","title":"PHONE_BRAND  <code>module-attribute</code>  \u21b2","text":"<pre><code>PHONE_BRAND = 'pyvesync'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.PHONE_OS","title":"PHONE_OS  <code>module-attribute</code>  \u21b2","text":"<pre><code>PHONE_OS = 'Android'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.MOBILE_ID","title":"MOBILE_ID  <code>module-attribute</code>  \u21b2","text":"<pre><code>MOBILE_ID = str(randint(1000000000000000, 9999999999999999))\n</code></pre>"},{"location":"development/constants/#pyvesync.const.USER_TYPE","title":"USER_TYPE  <code>module-attribute</code>  \u21b2","text":"<pre><code>USER_TYPE = '1'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.BYPASS_APP_V","title":"BYPASS_APP_V  <code>module-attribute</code>  \u21b2","text":"<pre><code>BYPASS_APP_V = f'VeSync {APP_VERSION}'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.BYPASS_HEADER_UA","title":"BYPASS_HEADER_UA  <code>module-attribute</code>  \u21b2","text":"<pre><code>BYPASS_HEADER_UA = 'okhttp/3.12.1'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.TERMINAL_ID","title":"TERMINAL_ID  <code>module-attribute</code>  \u21b2","text":"<pre><code>TERMINAL_ID = '2' + replace('-', '')\n</code></pre>"},{"location":"development/constants/#pyvesync.const.CLIENT_TYPE","title":"CLIENT_TYPE  <code>module-attribute</code>  \u21b2","text":"<pre><code>CLIENT_TYPE = 'vesyncApp'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.STATUS_OK","title":"STATUS_OK  <code>module-attribute</code>  \u21b2","text":"<pre><code>STATUS_OK = 200\n</code></pre>"},{"location":"development/constants/#pyvesync.const.KELVIN_MIN","title":"KELVIN_MIN  <code>module-attribute</code>  \u21b2","text":"<pre><code>KELVIN_MIN = 2700\n</code></pre>"},{"location":"development/constants/#pyvesync.const.KELVIN_MAX","title":"KELVIN_MAX  <code>module-attribute</code>  \u21b2","text":"<pre><code>KELVIN_MAX = 6500\n</code></pre>"},{"location":"development/constants/#pyvesync.const.AIRFRYER_PID_MAP","title":"AIRFRYER_PID_MAP  <code>module-attribute</code>  \u21b2","text":"<pre><code>AIRFRYER_PID_MAP = {\n    'WiFi_SKA_AirFryer137_US': 'wnxwqs76gknqyzjn',\n    'WiFi_SKA_AirFryer158_US': '2cl8hmafsthl65bd',\n    'WiFi_AirFryer_CS158-AF_EU': '8t8op7pcvzlsbosm',\n}\n</code></pre> <p>PID's for VeSync Air Fryers based on ConfigModule.</p>"},{"location":"development/constants/#pyvesync.const.CUSTOM_RECIPE_ID","title":"CUSTOM_RECIPE_ID  <code>module-attribute</code>  \u21b2","text":"<pre><code>CUSTOM_RECIPE_ID = 1\n</code></pre>"},{"location":"development/constants/#pyvesync.const.CUSTOM_RECIPE_TYPE","title":"CUSTOM_RECIPE_TYPE  <code>module-attribute</code>  \u21b2","text":"<pre><code>CUSTOM_RECIPE_TYPE = 3\n</code></pre>"},{"location":"development/constants/#pyvesync.const.CUSTOM_RECIPE_NAME","title":"CUSTOM_RECIPE_NAME  <code>module-attribute</code>  \u21b2","text":"<pre><code>CUSTOM_RECIPE_NAME = 'Manual Cook'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.CUSTOM_COOK_MODE","title":"CUSTOM_COOK_MODE  <code>module-attribute</code>  \u21b2","text":"<pre><code>CUSTOM_COOK_MODE = 'custom'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.IntEnumMixin","title":"IntEnumMixin \u21b2","text":"<p>               Bases: <code>IntEnum</code></p> <p>Mixin class to handle missing enum values.</p> <p>Adds missing method using the <code>extend_enum</code> function to return a new enum member with the name \"UNKNOWN\" and the missing value.</p> Source code in <code>src\\pyvesync\\utils\\enum_utils.py</code> <pre><code>class IntEnumMixin(enum.IntEnum):\n    \"\"\"Mixin class to handle missing enum values.\n\n    Adds __missing__ method using the `extend_enum` function to\n    return a new enum member with the name \"UNKNOWN\" and the\n    missing value.\n    \"\"\"\n\n    @classmethod\n    def _missing_(cls: type[enum.IntEnum], value: object) -&gt; enum.IntEnum:\n        \"\"\"Handle missing enum values by returning member with UNKNOWN name.\"\"\"\n        for member in cls:\n            if member.value == value:\n                return member\n        unknown_enum_val = int.__new__(cls, value)  # type: ignore[call-overload]\n        unknown_enum_val._name_ = 'UNKNOWN'\n        unknown_enum_val._value_ = value  # type: ignore[assignment]\n        unknown_enum_val.__objclass__ = cls.__class__  # type: ignore[assignment]\n        return unknown_enum_val\n</code></pre>"},{"location":"development/constants/#pyvesync.const.IntEnumMixin._missing_","title":"_missing_  <code>classmethod</code>  \u21b2","text":"<pre><code>_missing_(value: object) -&gt; IntEnum\n</code></pre> <p>Inherited From <code>IntEnumMixin</code></p> <p>Handle missing enum values by returning member with UNKNOWN name.</p> Source code in <code>src\\pyvesync\\utils\\enum_utils.py</code> <pre><code>@classmethod\ndef _missing_(cls: type[enum.IntEnum], value: object) -&gt; enum.IntEnum:\n    \"\"\"Handle missing enum values by returning member with UNKNOWN name.\"\"\"\n    for member in cls:\n        if member.value == value:\n            return member\n    unknown_enum_val = int.__new__(cls, value)  # type: ignore[call-overload]\n    unknown_enum_val._name_ = 'UNKNOWN'\n    unknown_enum_val._value_ = value  # type: ignore[assignment]\n    unknown_enum_val.__objclass__ = cls.__class__  # type: ignore[assignment]\n    return unknown_enum_val\n</code></pre>"},{"location":"development/constants/#pyvesync.const.ProductLines","title":"ProductLines \u21b2","text":"<p>               Bases: <code>StrEnum</code></p> <p>High level product line.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class ProductLines(StrEnum):\n    \"\"\"High level product line.\"\"\"\n\n    WIFI_LIGHT = 'wifi-light'\n    WIFI_AIR = 'wifi-air'\n    WIFI_KITCHEN = 'wifi-kitchen'\n    SWITCHES = 'Switches'\n    WIFI_SWITCH = 'wifi-switch'\n    THERMOSTAT = 'thermostat'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.ProductTypes","title":"ProductTypes \u21b2","text":"<p>               Bases: <code>StrEnum</code></p> <p>General device types enum.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class ProductTypes(StrEnum):\n    \"\"\"General device types enum.\"\"\"\n\n    OUTLET = 'outlet'\n    BULB = 'bulb'\n    SWITCH = 'switch'\n    PURIFIER = 'purifier'\n    FAN = 'fan'\n    HUMIDIFIER = 'humidifier'\n    AIR_FRYER = 'air fryer'\n    KITCHEN_THERMOMETER = 'kitchen thermometer'\n    THERMOSTAT = 'thermostat'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.IntFlag","title":"IntFlag \u21b2","text":"<p>               Bases: <code>IntEnum</code></p> <p>DEPRECATED. Integer flag to indicate if a device is not supported.</p> <p>This is used by data models as a default value for feature attributes that are not supported by all devices.</p> <p>The default value is -999.</p> <p>Attributes:</p> Name Type Description <code>NOT_SUPPORTED</code> <p>Device is not supported, -999</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class IntFlag(IntEnum):\n    \"\"\"DEPRECATED. Integer flag to indicate if a device is not supported.\n\n    This is used by data models as a default value for feature attributes\n    that are not supported by all devices.\n\n    The default value is -999.\n\n    Attributes:\n        NOT_SUPPORTED: Device is not supported, -999\n    \"\"\"\n\n    NOT_SUPPORTED = -999\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return string representation of IntFlag.\"\"\"\n        return str(self.name)\n</code></pre>"},{"location":"development/constants/#pyvesync.const.IntFlag.__str__","title":"__str__ \u21b2","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return string representation of IntFlag.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return string representation of IntFlag.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"development/constants/#pyvesync.const.StrFlag","title":"StrFlag \u21b2","text":"<p>               Bases: <code>StrEnum</code></p> <p>DEPRECATED. String flag to indicate if a device is not supported.</p> <p>This is used by data models as a default value for feature attributes that are not supported by all devices.</p> <p>The default value is \"not_supported\".</p> <p>Attributes:</p> Name Type Description <code>NOT_SUPPORTED</code> <p>Device is not supported, \"not_supported\"</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class StrFlag(StrEnum):\n    \"\"\"DEPRECATED. String flag to indicate if a device is not supported.\n\n    This is used by data models as a default value for feature attributes\n    that are not supported by all devices.\n\n    The default value is \"not_supported\".\n\n    Attributes:\n        NOT_SUPPORTED: Device is not supported, \"not_supported\"\n    \"\"\"\n\n    NOT_SUPPORTED = 'not_supported'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.NightlightStatus","title":"NightlightStatus \u21b2","text":"<p>               Bases: <code>StrEnum</code></p> <p>Nightlight status for VeSync devices.</p> <p>Values can be converted to int and bool.</p> <p>Attributes:</p> Name Type Description <code>ON</code> <p>Nightlight is on.</p> <code>OFF</code> <p>Nightlight is off.</p> <code>AUTO</code> <p>Nightlight is in auto mode.</p> <code>UNKNOWN</code> <p>Nightlight status is unknown.</p> Usage <pre><code>NightlightStatus.ON\n# &lt;NightlightStatus.ON: 'on'&gt;\nint(NightlightStatus.ON)\n# 1\nbool(NightlightStatus.ON)\n# True\n</code></pre> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class NightlightStatus(StrEnum):\n    \"\"\"Nightlight status for VeSync devices.\n\n    Values can be converted to int and bool.\n\n    Attributes:\n        ON: Nightlight is on.\n        OFF: Nightlight is off.\n        AUTO: Nightlight is in auto mode.\n        UNKNOWN: Nightlight status is unknown.\n\n    Usage:\n        ```python\n        NightlightStatus.ON\n        # &lt;NightlightStatus.ON: 'on'&gt;\n        int(NightlightStatus.ON)\n        # 1\n        bool(NightlightStatus.ON)\n        # True\n        ```\n    \"\"\"\n\n    ON = 'on'\n    OFF = 'off'\n    AUTO = 'auto'\n    UNKNOWN = 'unknown'\n\n    def __bool__(self) -&gt; bool:\n        \"\"\"Return True if nightlight is on or auto.\"\"\"\n        return self in [NightlightStatus.ON, NightlightStatus.AUTO]\n\n    def __int__(self) -&gt; int:\n        \"\"\"Return integer representation of the enum.\"\"\"\n        if self not in [NightlightStatus.ON, NightlightStatus.OFF]:\n            raise ValueError('Only ON and OFF are valid values for int conversion')\n        return int(self == NightlightStatus.ON)\n</code></pre>"},{"location":"development/constants/#pyvesync.const.NightlightStatus.__bool__","title":"__bool__ \u21b2","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Return True if nightlight is on or auto.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>def __bool__(self) -&gt; bool:\n    \"\"\"Return True if nightlight is on or auto.\"\"\"\n    return self in [NightlightStatus.ON, NightlightStatus.AUTO]\n</code></pre>"},{"location":"development/constants/#pyvesync.const.NightlightStatus.__int__","title":"__int__ \u21b2","text":"<pre><code>__int__() -&gt; int\n</code></pre> <p>Return integer representation of the enum.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>def __int__(self) -&gt; int:\n    \"\"\"Return integer representation of the enum.\"\"\"\n    if self not in [NightlightStatus.ON, NightlightStatus.OFF]:\n        raise ValueError('Only ON and OFF are valid values for int conversion')\n    return int(self == NightlightStatus.ON)\n</code></pre>"},{"location":"development/constants/#pyvesync.const.DeviceStatus","title":"DeviceStatus \u21b2","text":"<p>               Bases: <code>StrEnum</code></p> <p>VeSync device status enum.</p> <p>In addition to converting to int and bool values, this enum can be used to convert from bool and int values to corresponding string values.</p> <p>Attributes:</p> Name Type Description <code>ON</code> <p>Device is on.</p> <code>OFF</code> <p>Device is off.</p> <code>PAUSED</code> <p>Device is paused.</p> <code>STANDBY</code> <p>Device is in standby mode.</p> <code>IDLE</code> <p>Device is idle.</p> <code>RUNNING</code> <p>Device is running.</p> <code>UNKNOWN</code> <p>Device status is unknown.</p> Usage <pre><code>DeviceStatus.ON\n# &lt;DeviceStatus.ON: 'on'&gt;\nbool(DeviceStatus.ON)\n# True\nint(DeviceStatus.ON)\n# 1\nDeviceStatus.from_int(1)\n# 'on'\nDeviceStatus.from_bool(True)\n# 'on'\n</code></pre> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class DeviceStatus(StrEnum):\n    \"\"\"VeSync device status enum.\n\n    In addition to converting to int and bool values,\n    this enum can be used to convert from bool and int values\n    to corresponding string values.\n\n    Attributes:\n        ON: Device is on.\n        OFF: Device is off.\n        PAUSED: Device is paused.\n        STANDBY: Device is in standby mode.\n        IDLE: Device is idle.\n        RUNNING: Device is running.\n        UNKNOWN: Device status is unknown.\n\n    Usage:\n        ```python\n        DeviceStatus.ON\n        # &lt;DeviceStatus.ON: 'on'&gt;\n        bool(DeviceStatus.ON)\n        # True\n        int(DeviceStatus.ON)\n        # 1\n        DeviceStatus.from_int(1)\n        # 'on'\n        DeviceStatus.from_bool(True)\n        # 'on'\n        ```\n    \"\"\"\n\n    ON = 'on'\n    OFF = 'off'\n    PAUSED = 'paused'\n    STANDBY = 'standby'\n    IDLE = 'idle'\n    RUNNING = 'running'\n    UNKNOWN = 'unknown'\n\n    def __bool__(self) -&gt; bool:\n        \"\"\"Return True if device is on or running.\"\"\"\n        return self in [DeviceStatus.ON, DeviceStatus.RUNNING]\n\n    def __int__(self) -&gt; int:\n        \"\"\"Return integer representation of the enum.\n\n        1 is ON and RUNNING, 0 is OFF, PAUSED, STANDBY, IDLE.\n        -1 is UNKNOWN.\n        \"\"\"\n        match self:\n            case DeviceStatus.ON | DeviceStatus.RUNNING:\n                return 1\n            case (\n                DeviceStatus.OFF\n                | DeviceStatus.PAUSED\n                | DeviceStatus.STANDBY\n                | DeviceStatus.IDLE\n            ):\n                return 0\n        return -1\n\n    @classmethod\n    def from_int(cls, value: int | None) -&gt; str:\n        \"\"\"Convert integer value to corresponding string.\n\n        If value is 1, return ON and if 0, return OFF.\n        If value is -999, return NOT_SUPPORTED.\n        \"\"\"\n        if value == 1:\n            return cls.ON\n        if value == 0:\n            return cls.OFF\n        if value == IntFlag.NOT_SUPPORTED:\n            return StrFlag.NOT_SUPPORTED\n        return cls.UNKNOWN\n\n    @classmethod\n    def from_bool(cls, value: bool) -&gt; DeviceStatus:\n        \"\"\"Convert boolean value to corresponding string.\"\"\"\n        return cls.ON if value is True else cls.OFF\n</code></pre>"},{"location":"development/constants/#pyvesync.const.DeviceStatus.__bool__","title":"__bool__ \u21b2","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Return True if device is on or running.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>def __bool__(self) -&gt; bool:\n    \"\"\"Return True if device is on or running.\"\"\"\n    return self in [DeviceStatus.ON, DeviceStatus.RUNNING]\n</code></pre>"},{"location":"development/constants/#pyvesync.const.DeviceStatus.__int__","title":"__int__ \u21b2","text":"<pre><code>__int__() -&gt; int\n</code></pre> <p>Return integer representation of the enum.</p> <p>1 is ON and RUNNING, 0 is OFF, PAUSED, STANDBY, IDLE. -1 is UNKNOWN.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>def __int__(self) -&gt; int:\n    \"\"\"Return integer representation of the enum.\n\n    1 is ON and RUNNING, 0 is OFF, PAUSED, STANDBY, IDLE.\n    -1 is UNKNOWN.\n    \"\"\"\n    match self:\n        case DeviceStatus.ON | DeviceStatus.RUNNING:\n            return 1\n        case (\n            DeviceStatus.OFF\n            | DeviceStatus.PAUSED\n            | DeviceStatus.STANDBY\n            | DeviceStatus.IDLE\n        ):\n            return 0\n    return -1\n</code></pre>"},{"location":"development/constants/#pyvesync.const.DeviceStatus.from_int","title":"from_int  <code>classmethod</code>  \u21b2","text":"<pre><code>from_int(value: int | None) -&gt; str\n</code></pre> <p>Convert integer value to corresponding string.</p> <p>If value is 1, return ON and if 0, return OFF. If value is -999, return NOT_SUPPORTED.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>@classmethod\ndef from_int(cls, value: int | None) -&gt; str:\n    \"\"\"Convert integer value to corresponding string.\n\n    If value is 1, return ON and if 0, return OFF.\n    If value is -999, return NOT_SUPPORTED.\n    \"\"\"\n    if value == 1:\n        return cls.ON\n    if value == 0:\n        return cls.OFF\n    if value == IntFlag.NOT_SUPPORTED:\n        return StrFlag.NOT_SUPPORTED\n    return cls.UNKNOWN\n</code></pre>"},{"location":"development/constants/#pyvesync.const.DeviceStatus.from_bool","title":"from_bool  <code>classmethod</code>  \u21b2","text":"<pre><code>from_bool(value: bool) -&gt; DeviceStatus\n</code></pre> <p>Convert boolean value to corresponding string.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>@classmethod\ndef from_bool(cls, value: bool) -&gt; DeviceStatus:\n    \"\"\"Convert boolean value to corresponding string.\"\"\"\n    return cls.ON if value is True else cls.OFF\n</code></pre>"},{"location":"development/constants/#pyvesync.const.ConnectionStatus","title":"ConnectionStatus \u21b2","text":"<p>               Bases: <code>StrEnum</code></p> <p>VeSync device connection status enum.</p> <p>Corresponding boolean value is True if device is online.</p> <p>Attributes:</p> Name Type Description <code>ONLINE</code> <p>Device is online.</p> <code>OFFLINE</code> <p>Device is offline.</p> <code>UNKNOWN</code> <p>Device connection status is unknown.</p> <p>Methods:</p> Name Description <code>from_bool</code> <p>bool | None) -&gt; ConnectionStatus: Convert boolean value to corresponding string.</p> Usage <pre><code>ConnectionStatus.ONLINE\n# &lt;ConnectionStatus.ONLINE: 'online'&gt;\nbool(ConnectionStatus.ONLINE)\n# True\nConnectionStatus.ONLINE == ConnectionStatus.ONLINE\n# True\n</code></pre> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class ConnectionStatus(StrEnum):\n    \"\"\"VeSync device connection status enum.\n\n    Corresponding boolean value is True if device is online.\n\n    Attributes:\n        ONLINE: Device is online.\n        OFFLINE: Device is offline.\n        UNKNOWN: Device connection status is unknown.\n\n    Methods:\n        from_bool(value: bool | None) -&gt; ConnectionStatus:\n            Convert boolean value to corresponding string.\n\n    Usage:\n        ```python\n        ConnectionStatus.ONLINE\n        # &lt;ConnectionStatus.ONLINE: 'online'&gt;\n        bool(ConnectionStatus.ONLINE)\n        # True\n        ConnectionStatus.ONLINE == ConnectionStatus.ONLINE\n        # True\n        ```\n    \"\"\"\n\n    ONLINE = 'online'\n    OFFLINE = 'offline'\n    UNKNOWN = 'unknown'\n\n    def __bool__(self) -&gt; bool:\n        \"\"\"Return True if device is online.\"\"\"\n        return self == ConnectionStatus.ONLINE\n\n    @classmethod\n    def from_bool(cls, value: bool | None) -&gt; ConnectionStatus:\n        \"\"\"Convert boolean value to corresponding string.\n\n        Returns ConnectionStatus.ONLINE if True, else ConnectionStatus.OFFLINE.\n        \"\"\"\n        return cls.ONLINE if value else cls.OFFLINE\n</code></pre>"},{"location":"development/constants/#pyvesync.const.ConnectionStatus.__bool__","title":"__bool__ \u21b2","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Return True if device is online.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>def __bool__(self) -&gt; bool:\n    \"\"\"Return True if device is online.\"\"\"\n    return self == ConnectionStatus.ONLINE\n</code></pre>"},{"location":"development/constants/#pyvesync.const.ConnectionStatus.from_bool","title":"from_bool  <code>classmethod</code>  \u21b2","text":"<pre><code>from_bool(value: bool | None) -&gt; ConnectionStatus\n</code></pre> <p>Convert boolean value to corresponding string.</p> <p>Returns ConnectionStatus.ONLINE if True, else ConnectionStatus.OFFLINE.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>@classmethod\ndef from_bool(cls, value: bool | None) -&gt; ConnectionStatus:\n    \"\"\"Convert boolean value to corresponding string.\n\n    Returns ConnectionStatus.ONLINE if True, else ConnectionStatus.OFFLINE.\n    \"\"\"\n    return cls.ONLINE if value else cls.OFFLINE\n</code></pre>"},{"location":"development/constants/#pyvesync.const.NightlightModes","title":"NightlightModes \u21b2","text":"<p>               Bases: <code>StrEnum</code></p> <p>Nightlight modes.</p> <p>Attributes:</p> Name Type Description <code>ON</code> <p>Nightlight is on.</p> <code>OFF</code> <p>Nightlight is off.</p> <code>DIM</code> <p>Nightlight is dimmed.</p> <code>AUTO</code> <p>Nightlight is in auto mode.</p> <code>UNKNOWN</code> <p>Nightlight status is unknown.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class NightlightModes(StrEnum):\n    \"\"\"Nightlight modes.\n\n    Attributes:\n        ON: Nightlight is on.\n        OFF: Nightlight is off.\n        DIM: Nightlight is dimmed.\n        AUTO: Nightlight is in auto mode.\n        UNKNOWN: Nightlight status is unknown.\n    \"\"\"\n\n    ON = 'on'\n    OFF = 'off'\n    DIM = 'dim'\n    AUTO = 'auto'\n    UNKNOWN = 'unknown'\n\n    def __bool__(self) -&gt; bool:\n        \"\"\"Return True if nightlight is on or auto.\n\n        Off and unknown are False, all other True.\n        \"\"\"\n        return self in [NightlightModes.ON, NightlightModes.AUTO, NightlightModes.DIM]\n</code></pre>"},{"location":"development/constants/#pyvesync.const.NightlightModes.__bool__","title":"__bool__ \u21b2","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Return True if nightlight is on or auto.</p> <p>Off and unknown are False, all other True.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>def __bool__(self) -&gt; bool:\n    \"\"\"Return True if nightlight is on or auto.\n\n    Off and unknown are False, all other True.\n    \"\"\"\n    return self in [NightlightModes.ON, NightlightModes.AUTO, NightlightModes.DIM]\n</code></pre>"},{"location":"development/constants/#pyvesync.const.ColorMode","title":"ColorMode \u21b2","text":"<p>               Bases: <code>StrEnum</code></p> <p>VeSync bulb color modes.</p> <p>Attributes:</p> Name Type Description <code>RGB</code> <p>RGB color mode.</p> <code>HSV</code> <p>HSV color mode.</p> <code>WHITE</code> <p>White color mode.</p> <code>COLOR</code> <p>Color mode.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class ColorMode(StrEnum):\n    \"\"\"VeSync bulb color modes.\n\n    Attributes:\n        RGB: RGB color mode.\n        HSV: HSV color mode.\n        WHITE: White color mode.\n        COLOR: Color mode.\n    \"\"\"\n\n    RGB = 'rgb'\n    HSV = 'hsv'\n    WHITE = 'white'\n    COLOR = 'color'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.AirQualityLevel","title":"AirQualityLevel \u21b2","text":"<p>               Bases: <code>Enum</code></p> <p>Representation of air quality levels as string and integers.</p> <p>Attributes:</p> Name Type Description <code>EXCELLENT</code> <p>Air quality is excellent.</p> <code>GOOD</code> <p>Air quality is good.</p> <code>MODERATE</code> <p>Air quality is moderate.</p> <code>POOR</code> <p>Air quality is poor.</p> <code>UNKNOWN</code> <p>Air quality is unknown.</p> <p>Methods:</p> Name Description <code>from_string</code> <p>str | None) -&gt; AirQualityLevel: Convert string value to corresponding integer.</p> <code>from_int</code> <p>int | None) -&gt; AirQualityLevel: Convert integer value to corresponding string.</p> Note <p>Alias for \"very good\" is \"excellent\". Alias for \"bad\" is \"poor\".</p> Usage <pre><code>AirQualityLevels.EXCELLENT\n# &lt;AirQualityLevels.EXCELLENT: 1&gt;\nAirQualityLevels.from_string(\"excellent\")\n# 1\nAirQualityLevels.from_int(1)\n# \"excellent\"\nint(AirQualityLevels.EXCELLENT)\n# 1\nstr(AirQualityLevels.EXCELLENT)\n# \"excellent\"\nfrom_string(\"good\")\n# &lt;AirQualityLevels.GOOD: 2&gt;\nfrom_int(2)\n# \"good\"\n</code></pre> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class AirQualityLevel(Enum):\n    \"\"\"Representation of air quality levels as string and integers.\n\n    Attributes:\n        EXCELLENT: Air quality is excellent.\n        GOOD: Air quality is good.\n        MODERATE: Air quality is moderate.\n        POOR: Air quality is poor.\n        UNKNOWN: Air quality is unknown.\n\n    Methods:\n        from_string(value: str | None) -&gt; AirQualityLevel:\n            Convert string value to corresponding integer.\n        from_int(value: int | None) -&gt; AirQualityLevel:\n            Convert integer value to corresponding string.\n\n    Note:\n        Alias for \"very good\" is \"excellent\".\n        Alias for \"bad\" is \"poor\".\n\n    Usage:\n        ```python\n        AirQualityLevels.EXCELLENT\n        # &lt;AirQualityLevels.EXCELLENT: 1&gt;\n        AirQualityLevels.from_string(\"excellent\")\n        # 1\n        AirQualityLevels.from_int(1)\n        # \"excellent\"\n        int(AirQualityLevels.EXCELLENT)\n        # 1\n        str(AirQualityLevels.EXCELLENT)\n        # \"excellent\"\n        from_string(\"good\")\n        # &lt;AirQualityLevels.GOOD: 2&gt;\n        from_int(2)\n        # \"good\"\n        ```\n    \"\"\"\n\n    EXCELLENT = 1\n    GOOD = 2\n    MODERATE = 3\n    POOR = 4\n    UNKNOWN = -1\n\n    def __int__(self) -&gt; int:\n        \"\"\"Return integer representation of the enum.\"\"\"\n        return self.value\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return string representation of the enum.\"\"\"\n        return self.name.lower()\n\n    @classmethod\n    def from_string(cls, value: str | None) -&gt; AirQualityLevel:\n        \"\"\"Convert string value to corresponding integer.\n\n        Get enum from string value to normalize different values of the same\n        format.\n\n        Note:\n            Values are excellent, good, moderate and poor. Aliases are:\n            very good for excellent and bad for poor. Unknown is returned\n            if value is None or not in the list.\n        \"\"\"\n        _string_to_enum = MappingProxyType(\n            {\n                'excellent': cls.EXCELLENT,\n                'very good': cls.EXCELLENT,  # Alias\n                'good': cls.GOOD,\n                'moderate': cls.MODERATE,\n                'poor': cls.POOR,\n                'bad': cls.POOR,  # Alias\n                'unknown': cls.UNKNOWN,\n            }\n        )\n        if isinstance(value, str) and value.lower() in _string_to_enum:\n            return AirQualityLevel(_string_to_enum[value.lower()])\n        return cls.UNKNOWN\n\n    @classmethod\n    def from_int(cls, value: int | None) -&gt; AirQualityLevel:\n        \"\"\"Convert integer value to corresponding string.\"\"\"\n        if value in [itm.value for itm in cls]:\n            return cls(value)\n        return cls.UNKNOWN\n</code></pre>"},{"location":"development/constants/#pyvesync.const.AirQualityLevel.__int__","title":"__int__ \u21b2","text":"<pre><code>__int__() -&gt; int\n</code></pre> <p>Return integer representation of the enum.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>def __int__(self) -&gt; int:\n    \"\"\"Return integer representation of the enum.\"\"\"\n    return self.value\n</code></pre>"},{"location":"development/constants/#pyvesync.const.AirQualityLevel.__str__","title":"__str__ \u21b2","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return string representation of the enum.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return string representation of the enum.\"\"\"\n    return self.name.lower()\n</code></pre>"},{"location":"development/constants/#pyvesync.const.AirQualityLevel.from_string","title":"from_string  <code>classmethod</code>  \u21b2","text":"<pre><code>from_string(value: str | None) -&gt; AirQualityLevel\n</code></pre> <p>Convert string value to corresponding integer.</p> <p>Get enum from string value to normalize different values of the same format.</p> Note <p>Values are excellent, good, moderate and poor. Aliases are: very good for excellent and bad for poor. Unknown is returned if value is None or not in the list.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>@classmethod\ndef from_string(cls, value: str | None) -&gt; AirQualityLevel:\n    \"\"\"Convert string value to corresponding integer.\n\n    Get enum from string value to normalize different values of the same\n    format.\n\n    Note:\n        Values are excellent, good, moderate and poor. Aliases are:\n        very good for excellent and bad for poor. Unknown is returned\n        if value is None or not in the list.\n    \"\"\"\n    _string_to_enum = MappingProxyType(\n        {\n            'excellent': cls.EXCELLENT,\n            'very good': cls.EXCELLENT,  # Alias\n            'good': cls.GOOD,\n            'moderate': cls.MODERATE,\n            'poor': cls.POOR,\n            'bad': cls.POOR,  # Alias\n            'unknown': cls.UNKNOWN,\n        }\n    )\n    if isinstance(value, str) and value.lower() in _string_to_enum:\n        return AirQualityLevel(_string_to_enum[value.lower()])\n    return cls.UNKNOWN\n</code></pre>"},{"location":"development/constants/#pyvesync.const.AirQualityLevel.from_int","title":"from_int  <code>classmethod</code>  \u21b2","text":"<pre><code>from_int(value: int | None) -&gt; AirQualityLevel\n</code></pre> <p>Convert integer value to corresponding string.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>@classmethod\ndef from_int(cls, value: int | None) -&gt; AirQualityLevel:\n    \"\"\"Convert integer value to corresponding string.\"\"\"\n    if value in [itm.value for itm in cls]:\n        return cls(value)\n    return cls.UNKNOWN\n</code></pre>"},{"location":"development/constants/#pyvesync.const.PurifierAutoPreference","title":"PurifierAutoPreference \u21b2","text":"<p>               Bases: <code>StrEnum</code></p> <p>Preference Levels for Purifier Auto Mode.</p> <p>Attributes:</p> Name Type Description <code>DEFAULT</code> <p>Default preference level.</p> <code>EFFICIENT</code> <p>Efficient preference level.</p> <code>QUIET</code> <p>Quiet preference level.</p> <code>UNKNOWN</code> <p>Unknown preference level.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class PurifierAutoPreference(StrEnum):\n    \"\"\"Preference Levels for Purifier Auto Mode.\n\n    Attributes:\n        DEFAULT: Default preference level.\n        EFFICIENT: Efficient preference level.\n        QUIET: Quiet preference level.\n        UNKNOWN: Unknown preference level.\n    \"\"\"\n\n    DEFAULT = 'default'\n    EFFICIENT = 'efficient'\n    QUIET = 'quiet'\n    UNKNOWN = 'unknown'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.FanSleepPreference","title":"FanSleepPreference \u21b2","text":"<p>               Bases: <code>StrEnum</code></p> <p>Sleep mode preferences for VeSync fans.</p> <p>Attributes:</p> Name Type Description <code>DEFAULT</code> <p>Default sleep mode.</p> <code>ADVANCED</code> <p>Advanced sleep mode.</p> <code>TURBO</code> <p>Turbo sleep mode.</p> <code>EFFICIENT</code> <p>Efficient sleep mode.</p> <code>QUIET</code> <p>Quiet sleep mode.</p> <code>UNKNOWN</code> <p>Unknown sleep mode.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class FanSleepPreference(StrEnum):\n    \"\"\"Sleep mode preferences for VeSync fans.\n\n    Attributes:\n        DEFAULT: Default sleep mode.\n        ADVANCED: Advanced sleep mode.\n        TURBO: Turbo sleep mode.\n        EFFICIENT: Efficient sleep mode.\n        QUIET: Quiet sleep mode.\n        UNKNOWN: Unknown sleep mode.\n    \"\"\"\n\n    DEFAULT = 'default'\n    ADVANCED = 'advanced'\n    TURBO = 'turbo'\n    EFFICIENT = 'efficient'\n    QUIET = 'quiet'\n    TEMP_SENSE = 'tempSense'\n    KIDS = 'kids'\n    UNKNOWN = 'unknown'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.Features","title":"Features \u21b2","text":"<p>               Bases: <code>StrEnum</code></p> <p>Base Class for Features Enum to appease typing.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class Features(StrEnum):\n    \"\"\"Base Class for Features Enum to appease typing.\"\"\"\n</code></pre>"},{"location":"development/constants/#pyvesync.const.HumidifierFeatures","title":"HumidifierFeatures \u21b2","text":"<p>               Bases: <code>Features</code></p> <p>VeSync humidifier features.</p> <p>Attributes:</p> Name Type Description <code>ONOFF</code> <p>Device on/off status.</p> <code>CHILD_LOCK</code> <p>Child lock status.</p> <code>NIGHTLIGHT</code> <p>Nightlight status.</p> <code>WATER_LEVEL</code> <p>Water level status.</p> <code>WARM_MIST</code> <p>Warm mist status.</p> <code>AUTO_STOP</code> <p>Auto stop when target humidity is reached. Different from auto, which adjusts fan level to maintain humidity.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class HumidifierFeatures(Features):\n    \"\"\"VeSync humidifier features.\n\n    Attributes:\n        ONOFF: Device on/off status.\n        CHILD_LOCK: Child lock status.\n        NIGHTLIGHT: Nightlight status.\n        WATER_LEVEL: Water level status.\n        WARM_MIST: Warm mist status.\n        AUTO_STOP: Auto stop when target humidity is reached.\n            Different from auto, which adjusts fan level to maintain humidity.\n    \"\"\"\n\n    ONOFF = 'onoff'\n    CHILD_LOCK = 'child_lock'\n    NIGHTLIGHT = 'night_light'\n    WATER_LEVEL = 'water_level'\n    WARM_MIST = 'warm_mist'\n    AUTO_STOP = 'auto_stop'\n    NIGHTLIGHT_BRIGHTNESS = 'nightlight_brightness'\n    DRYING_MODE = 'drying_mode'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.PurifierFeatures","title":"PurifierFeatures \u21b2","text":"<p>               Bases: <code>Features</code></p> <p>VeSync air purifier features.</p> <p>Attributes:</p> Name Type Description <code>CHILD_LOCK</code> <p>Child lock status.</p> <code>NIGHTLIGHT</code> <p>Nightlight status.</p> <code>AIR_QUALITY</code> <p>Air quality status.</p> <code>VENT_ANGLE</code> <p>Vent angle status.</p> <code>LIGHT_DETECT</code> <p>Light detection status.</p> <code>PM25</code> <p>PM2.5 level status.</p> <code>PM10</code> <p>PM10 level status.</p> <code>PM1</code> <p>PM1 level status.</p> <code>AQPERCENT</code> <p>Air quality percentage status.</p> <code>RESET_FILTER</code> <p>Reset filter status.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class PurifierFeatures(Features):\n    \"\"\"VeSync air purifier features.\n\n    Attributes:\n        CHILD_LOCK: Child lock status.\n        NIGHTLIGHT: Nightlight status.\n        AIR_QUALITY: Air quality status.\n        VENT_ANGLE: Vent angle status.\n        LIGHT_DETECT: Light detection status.\n        PM25: PM2.5 level status.\n        PM10: PM10 level status.\n        PM1: PM1 level status.\n        AQPERCENT: Air quality percentage status.\n        RESET_FILTER: Reset filter status.\n    \"\"\"\n\n    RESET_FILTER = 'reset_filter'\n    CHILD_LOCK = 'child_lock'\n    NIGHTLIGHT = 'night_light'\n    AIR_QUALITY = 'air_quality'\n    VENT_ANGLE = 'fan_rotate'\n    LIGHT_DETECT = 'light_detect'\n    PM25 = 'pm25'\n    PM10 = 'pm10'\n    PM1 = 'pm1'\n    AQPERCENT = 'aq_percent'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.PurifierStringLevels","title":"PurifierStringLevels \u21b2","text":"<p>               Bases: <code>Features</code></p> <p>String levels for Air Purifier fan speed.</p> <p>Attributes:</p> Name Type Description <code>LOW</code> <p>Low fan speed.</p> <code>MEDIUM</code> <p>Medium fan speed.</p> <code>HIGH</code> <p>High fan speed.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class PurifierStringLevels(Features):\n    \"\"\"String levels for Air Purifier fan speed.\n\n    Attributes:\n        LOW: Low fan speed.\n        MEDIUM: Medium fan speed.\n        HIGH: High fan speed.\n    \"\"\"\n\n    LOW = 'low'\n    MEDIUM = 'medium'\n    HIGH = 'high'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.BulbFeatures","title":"BulbFeatures \u21b2","text":"<p>               Bases: <code>Features</code></p> <p>VeSync bulb features.</p> <p>Attributes:</p> Name Type Description <code>ONOFF</code> <p>Device on/off status.</p> <code>DIMMABLE</code> <p>Dimmable status.</p> <code>COLOR_TEMP</code> <p>Color temperature status.</p> <code>MULTICOLOR</code> <p>Multicolor status.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class BulbFeatures(Features):\n    \"\"\"VeSync bulb features.\n\n    Attributes:\n        ONOFF: Device on/off status.\n        DIMMABLE: Dimmable status.\n        COLOR_TEMP: Color temperature status.\n        MULTICOLOR: Multicolor status.\n    \"\"\"\n\n    ONOFF = 'onoff'\n    DIMMABLE = 'dimmable'\n    COLOR_TEMP = 'color_temp'\n    MULTICOLOR = 'multicolor'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.OutletFeatures","title":"OutletFeatures \u21b2","text":"<p>               Bases: <code>Features</code></p> <p>VeSync outlet features.</p> <p>Attributes:</p> Name Type Description <code>ONOFF</code> <p>Device on/off status.</p> <code>ENERGY_MONITOR</code> <p>Energy monitor status.</p> <code>NIGHTLIGHT</code> <p>Nightlight status.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class OutletFeatures(Features):\n    \"\"\"VeSync outlet features.\n\n    Attributes:\n        ONOFF: Device on/off status.\n        ENERGY_MONITOR: Energy monitor status.\n        NIGHTLIGHT: Nightlight status.\n    \"\"\"\n\n    ONOFF = 'onoff'\n    ENERGY_MONITOR = 'energy_monitor'\n    NIGHTLIGHT = 'nightlight'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.SwitchFeatures","title":"SwitchFeatures \u21b2","text":"<p>               Bases: <code>Features</code></p> <p>VeSync switch features.</p> <p>Attributes:</p> Name Type Description <code>ONOFF</code> <p>Device on/off status.</p> <code>DIMMABLE</code> <p>Dimmable status.</p> <code>INDICATOR_LIGHT</code> <p>Indicator light status.</p> <code>BACKLIGHT</code> <p>Backlight status.</p> <code>BACKLIGHT_RGB</code> <p>RGB backlight status.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class SwitchFeatures(Features):\n    \"\"\"VeSync switch features.\n\n    Attributes:\n        ONOFF: Device on/off status.\n        DIMMABLE: Dimmable status.\n        INDICATOR_LIGHT: Indicator light status.\n        BACKLIGHT: Backlight status.\n        BACKLIGHT_RGB: RGB backlight status.\n    \"\"\"\n\n    ONOFF = 'onoff'\n    DIMMABLE = 'dimmable'\n    INDICATOR_LIGHT = 'indicator_light'\n    BACKLIGHT = 'backlight'\n    BACKLIGHT_RGB = 'backlight_rgb'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.FanFeatures","title":"FanFeatures \u21b2","text":"<p>               Bases: <code>Features</code></p> <p>VeSync fan features.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class FanFeatures(Features):\n    \"\"\"VeSync fan features.\"\"\"\n\n    OSCILLATION = 'oscillation'\n    SOUND = 'sound'\n    DISPLAYING_TYPE = 'displaying_type'  # Unknown functionality\n</code></pre>"},{"location":"development/constants/#pyvesync.const.PurifierModes","title":"PurifierModes \u21b2","text":"<p>               Bases: <code>Features</code></p> <p>VeSync air purifier modes.</p> <p>Attributes:</p> Name Type Description <code>AUTO</code> <p>Auto mode.</p> <code>MANUAL</code> <p>Manual mode.</p> <code>SLEEP</code> <p>Sleep mode.</p> <code>TURBO</code> <p>Turbo mode.</p> <code>PET</code> <p>Pet mode.</p> <code>UNKNOWN</code> <p>Unknown mode.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class PurifierModes(Features):\n    \"\"\"VeSync air purifier modes.\n\n    Attributes:\n        AUTO: Auto mode.\n        MANUAL: Manual mode.\n        SLEEP: Sleep mode.\n        TURBO: Turbo mode.\n        PET: Pet mode.\n        UNKNOWN: Unknown mode.\n    \"\"\"\n\n    AUTO = 'auto'\n    MANUAL = 'manual'\n    SLEEP = 'sleep'\n    TURBO = 'turbo'\n    PET = 'pet'\n    UNKNOWN = 'unknown'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.HumidifierModes","title":"HumidifierModes \u21b2","text":"<p>               Bases: <code>Features</code></p> <p>VeSync humidifier modes.</p> <p>Attributes:</p> Name Type Description <code>AUTO</code> <p>Auto mode.</p> <code>MANUAL</code> <p>Manual mode.</p> <code>HUMIDITY</code> <p>Humidity mode.</p> <code>SLEEP</code> <p>Sleep mode.</p> <code>TURBO</code> <p>Turbo mode.</p> <code>PET</code> <p>Pet mode.</p> <code>UNKNOWN</code> <p>Unknown mode.</p> <code>AUTOPRO</code> <p>AutoPro mode.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class HumidifierModes(Features):\n    \"\"\"VeSync humidifier modes.\n\n    Attributes:\n        AUTO: Auto mode.\n        MANUAL: Manual mode.\n        HUMIDITY: Humidity mode.\n        SLEEP: Sleep mode.\n        TURBO: Turbo mode.\n        PET: Pet mode.\n        UNKNOWN: Unknown mode.\n        AUTOPRO: AutoPro mode.\n    \"\"\"\n\n    AUTO = 'auto'\n    MANUAL = 'manual'\n    HUMIDITY = 'humidity'\n    SLEEP = 'sleep'\n    TURBO = 'turbo'\n    PET = 'pet'\n    UNKNOWN = 'unknown'\n    AUTOPRO = 'autopro'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.FanModes","title":"FanModes \u21b2","text":"<p>               Bases: <code>StrEnum</code></p> <p>VeSync fan modes.</p> <p>Attributes:</p> Name Type Description <code>AUTO</code> <p>Auto mode.</p> <code>NORMAL</code> <p>Normal mode.</p> <code>MANUAL</code> <p>Manual mode.</p> <code>SLEEP</code> <p>Sleep mode.</p> <code>TURBO</code> <p>Turbo mode.</p> <code>PET</code> <p>Pet mode.</p> <code>UNKNOWN</code> <p>Unknown mode.</p> <code>ADVANCED_SLEEP</code> <p>Advanced sleep mode.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class FanModes(StrEnum):\n    \"\"\"VeSync fan modes.\n\n    Attributes:\n        AUTO: Auto mode.\n        NORMAL: Normal mode.\n        MANUAL: Manual mode.\n        SLEEP: Sleep mode.\n        TURBO: Turbo mode.\n        PET: Pet mode.\n        UNKNOWN: Unknown mode.\n        ADVANCED_SLEEP: Advanced sleep mode.\n    \"\"\"\n\n    AUTO = 'auto'\n    NORMAL = 'normal'\n    MANUAL = 'normal'\n    SLEEP = 'advancedSleep'\n    TURBO = 'turbo'\n    PET = 'pet'\n    UNKNOWN = 'unknown'\n    ADVANCED_SLEEP = 'advancedSleep'\n</code></pre>"},{"location":"development/constants/#pyvesync.const.ThermostatWorkModes","title":"ThermostatWorkModes \u21b2","text":"<p>               Bases: <code>IntEnum</code></p> <p>Working modes for VeSync Aura thermostats.</p> <p>Based on the VeSync app and API values.</p> <p>Attributes:</p> Name Type Description <code>OFF</code> <p>Thermostat is off (0).</p> <code>HEAT</code> <p>Thermostat is in heating mode (1).</p> <code>COOL</code> <p>Thermostat is in cooling mode (2).</p> <code>AUTO</code> <p>Thermostat is in auto mode (3).</p> <code>EM_HEAT</code> <p>Thermostat is in emergency heating mode (4).</p> <code>SMART_AUTO</code> <p>Thermostat is in smart auto mode (5).</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class ThermostatWorkModes(IntEnum):\n    \"\"\"Working modes for VeSync Aura thermostats.\n\n    Based on the VeSync app and API values.\n\n    Attributes:\n        OFF: Thermostat is off (0).\n        HEAT: Thermostat is in heating mode (1).\n        COOL: Thermostat is in cooling mode (2).\n        AUTO: Thermostat is in auto mode (3).\n        EM_HEAT: Thermostat is in emergency heating mode (4).\n        SMART_AUTO: Thermostat is in smart auto mode (5).\n    \"\"\"\n\n    OFF = 0\n    HEAT = 1\n    COOL = 2\n    AUTO = 3\n    EM_HEAT = 4\n    SMART_AUTO = 5\n</code></pre>"},{"location":"development/constants/#pyvesync.const.ThermostatFanModes","title":"ThermostatFanModes \u21b2","text":"<p>               Bases: <code>IntEnum</code></p> <p>Fan modes for VeSync Aura thermostats.</p> <p>Based on the VeSync app and API values.</p> <p>Attributes:</p> Name Type Description <code>AUTO</code> <p>Fan is in auto mode (1).</p> <code>ON</code> <p>Fan is on (2).</p> <code>CIRCULATE</code> <p>Fan is in circulate mode (3).</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class ThermostatFanModes(IntEnum):\n    \"\"\"Fan modes for VeSync Aura thermostats.\n\n    Based on the VeSync app and API values.\n\n    Attributes:\n        AUTO: Fan is in auto mode (1).\n        ON: Fan is on (2).\n        CIRCULATE: Fan is in circulate mode (3).\n    \"\"\"\n\n    AUTO = 1\n    ON = 2\n    CIRCULATE = 3\n</code></pre>"},{"location":"development/constants/#pyvesync.const.ThermostatHoldOptions","title":"ThermostatHoldOptions \u21b2","text":"<p>               Bases: <code>IntEnumMixin</code></p> <p>Hold options for VeSync Aura thermostats.</p> <p>Attributes:</p> Name Type Description <code>UNTIL_NEXT_SCHEDULED_ITEM</code> <p>Hold until next scheduled item (2).</p> <code>TWO_HOURS</code> <p>Hold for two hours (3).</p> <code>FOUR_HOURS</code> <p>Hold for four hours (4).</p> <code>PERMANENTLY</code> <p>Hold permanently (5).</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class ThermostatHoldOptions(IntEnumMixin):\n    \"\"\"Hold options for VeSync Aura thermostats.\n\n    Attributes:\n        UNTIL_NEXT_SCHEDULED_ITEM: Hold until next scheduled item (2).\n        TWO_HOURS: Hold for two hours (3).\n        FOUR_HOURS: Hold for four hours (4).\n        PERMANENTLY: Hold permanently (5).\n    \"\"\"\n\n    UNTIL_NEXT_SCHEDULED_ITEM = 2\n    TWO_HOURS = 3\n    FOUR_HOURS = 4\n    PERMANENTLY = 5\n</code></pre>"},{"location":"development/constants/#pyvesync.const.ThermostatHoldStatus","title":"ThermostatHoldStatus \u21b2","text":"<p>               Bases: <code>IntEnumMixin</code></p> <p>Set the hold status of the thermostat.</p> <p>Attributes:</p> Name Type Description <code>SET</code> <p>Set the hold status (1).</p> <code>CANCEL</code> <p>Cancel the hold status (0).</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class ThermostatHoldStatus(IntEnumMixin):\n    \"\"\"Set the hold status of the thermostat.\n\n    Attributes:\n        SET: Set the hold status (1).\n        CANCEL: Cancel the hold status (0).\n    \"\"\"\n\n    SET = 1\n    CANCEL = 0\n</code></pre>"},{"location":"development/constants/#pyvesync.const.ThermostatScheduleOrHoldOptions","title":"ThermostatScheduleOrHoldOptions \u21b2","text":"<p>               Bases: <code>IntEnumMixin</code></p> <p>Schedule or hold options for VeSync Aura thermostats.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class ThermostatScheduleOrHoldOptions(IntEnumMixin):\n    \"\"\"Schedule or hold options for VeSync Aura thermostats.\"\"\"\n\n    NOT_SCHEDULE_NOT_HOLD = 0\n    ON_SCHEDULE = 1\n    ON_HOLD = 2\n    VACATION = 3\n</code></pre>"},{"location":"development/constants/#pyvesync.const.ThermostatEcoTypes","title":"ThermostatEcoTypes \u21b2","text":"<p>               Bases: <code>IntEnumMixin</code></p> <p>Eco types for VeSync Aura thermostats.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class ThermostatEcoTypes(IntEnumMixin):\n    \"\"\"Eco types for VeSync Aura thermostats.\"\"\"\n\n    COMFORT_SECOND = 1\n    COMFORT_FIRST = 2\n    BALANCE = 3\n    ECO_FIRST = 4\n    ECO_SECOND = 5\n</code></pre>"},{"location":"development/constants/#pyvesync.const.ThermostatRoutineTypes","title":"ThermostatRoutineTypes \u21b2","text":"<p>               Bases: <code>IntEnumMixin</code></p> <p>Routine types for VeSync Aura thermostats.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class ThermostatRoutineTypes(IntEnumMixin):\n    \"\"\"Routine types for VeSync Aura thermostats.\"\"\"\n\n    HOME = 2\n    AWAY = 1\n    SLEEP = 3\n    CUSTOM = 4\n</code></pre>"},{"location":"development/constants/#pyvesync.const.ThermostatAlarmCodes","title":"ThermostatAlarmCodes \u21b2","text":"<p>               Bases: <code>IntEnumMixin</code></p> <p>Alarm codes for VeSync Aura thermostats.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class ThermostatAlarmCodes(IntEnumMixin):\n    \"\"\"Alarm codes for VeSync Aura thermostats.\"\"\"\n\n    HEAT_COOL = 100\n    ABOVE_SAFE_TEMP = 102\n    HEAT_RUNNING_TIME_TOO_LONG = 104\n</code></pre>"},{"location":"development/constants/#pyvesync.const.ThermostatReminderCodes","title":"ThermostatReminderCodes \u21b2","text":"<p>               Bases: <code>IntEnumMixin</code></p> <p>Reminder codes for VeSync Aura thermostats.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class ThermostatReminderCodes(IntEnumMixin):\n    \"\"\"Reminder codes for VeSync Aura thermostats.\"\"\"\n\n    FILTER = 150\n    HVAC = 151\n</code></pre>"},{"location":"development/constants/#pyvesync.const.ThermostatWorkStatusCodes","title":"ThermostatWorkStatusCodes \u21b2","text":"<p>               Bases: <code>IntEnumMixin</code></p> <p>Work status codes for VeSync Aura thermostats.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class ThermostatWorkStatusCodes(IntEnumMixin):\n    \"\"\"Work status codes for VeSync Aura thermostats.\"\"\"\n\n    OFF = 0\n    HEATING = 1\n    COOLING = 2\n    EM_HEATING = 3\n</code></pre>"},{"location":"development/constants/#pyvesync.const.ThermostatFanStatus","title":"ThermostatFanStatus \u21b2","text":"<p>               Bases: <code>IntEnumMixin</code></p> <p>Fan Status Enum for Aura Thermostats.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class ThermostatFanStatus(IntEnumMixin):\n    \"\"\"Fan Status Enum for Aura Thermostats.\"\"\"\n\n    OFF = 0\n    ON = 1\n</code></pre>"},{"location":"development/constants/#pyvesync.const.ThermostatConst","title":"ThermostatConst \u21b2","text":"<p>Constants for VeSync Aura thermostats.</p> Source code in <code>src\\pyvesync\\const.py</code> <pre><code>class ThermostatConst:\n    \"\"\"Constants for VeSync Aura thermostats.\"\"\"\n\n    ReminderCode = ThermostatReminderCodes\n    AlarmCode = ThermostatAlarmCodes\n    WorkMode = ThermostatWorkModes\n    FanStatus = ThermostatFanStatus\n    FanMode = ThermostatFanModes\n    HoldOption = ThermostatHoldOptions\n    EcoType = ThermostatEcoTypes\n    RoutineType = ThermostatRoutineTypes\n    ScheduleOrHoldOption = ThermostatScheduleOrHoldOptions\n    WorkStatus = ThermostatWorkStatusCodes\n</code></pre>"},{"location":"development/data_models/","title":"Data Models\u21b2","text":"<p>Data models are used to strongly type and verify API request and response structure. All API calls require a data model to be passed in as a parameter. Each module in the <code>pyvesync.models</code> module is for a specific product type or API call.</p> <p>The dataclasses inherit from mashumaro's <code>DataClassORJSONMixin</code> which allows for easy serialization and deserialization of the data models, as well as providing a discrimintor for subclasses.</p> <p>The <code>bypassv2_models</code> module is a generic mixin for the bypassv2 API calls.</p> <ul> <li>Data Models</li> <li>Data Models Module</li> <li>Base Models</li> <li>BypassV2 Models</li> <li>VeSync General API Models</li> <li>Bulb Models</li> <li>Fan Models</li> <li>Humidifier Models</li> <li>Outlet Models</li> <li>Purifier Models</li> <li>Switch Models</li> <li>Fryer Models</li> <li>Thermostat Models</li> </ul>"},{"location":"development/data_models/#data-models-module","title":"Data Models Module\u21b2","text":"<p>Data models for VeSync API requests and responses.</p> <p>Models should follow the naming convention of Request/Response + API Name. Internal models can have any descriptive name.</p> <p>The <code>base_models</code> module contains the base classes for the VeSync API models, while the models for each device type and other API calls are stored in their respective modules.</p> <p>The bypassv2_models module contains the models for the common bypassV2 API calls.</p>"},{"location":"development/data_models/#base-models","title":"Base Models\u21b2","text":"<p>Base data models for API requests and response.</p> <p>These models are used to define the structure of the requests and responses from the API. They use Mashumaro for serialization and deserialization. The <code>DataClassConfigMixin</code> class sets default options for <code>orjson</code> and <code>Mashumaro</code>.</p> Note <p>Dataclasses should follow the naming convention of Request/Response + API Name. Internal models can have any descriptive name.</p> <p>All models should inherit <code>ResponseBaseModel</code> or <code>RequestBaseModel</code>. Use pyvesync.const to set default values and import here.</p> <p>Attributes are inherited from the const module for default values.</p>"},{"location":"development/data_models/#pyvesync.models.base_models-classes","title":"Classes\u21b2","text":""},{"location":"development/data_models/#pyvesync.models.base_models.DefaultValues","title":"DefaultValues  <code>dataclass</code>  \u21b2","text":"<p>Default request fields.</p> <p>Attributes for the default values of the request fields and static methods for preparing calculated fields.</p> Source code in <code>src\\pyvesync\\models\\base_models.py</code> <pre><code>@dataclass\nclass DefaultValues:\n    \"\"\"Default request fields.\n\n    Attributes for the default values of the request fields\n    and static methods for preparing calculated fields.\n    \"\"\"\n\n    _call_number: ClassVar[int] = 0\n    userType: str = USER_TYPE\n    appVersion: str = APP_VERSION\n    clientType: str = CLIENT_TYPE\n    appId: str = APP_ID\n    phoneBrand: str = PHONE_BRAND\n    phoneOS: str = PHONE_OS\n    mobileId: str = MOBILE_ID\n    deviceRegion: str = DEFAULT_REGION\n    countryCode: str = DEFAULT_REGION\n    userCountryCode: str = DEFAULT_REGION\n    acceptLanguage: str = DEFAULT_LANGUAGE\n    timeZone: str = DEFAULT_TZ\n    terminalId: str = TERMINAL_ID\n    debugMode: bool = False\n\n    @staticmethod\n    def traceId() -&gt; str:\n        \"\"\"Trace ID CSRF token.\"\"\"\n        return str(int(time()))\n\n    @staticmethod\n    def newTraceId() -&gt; str:\n        \"\"\"Generate a new trace ID.\"\"\"\n        DefaultValues._call_number += 1\n        return f'APP{TERMINAL_ID[-5:-1]}{int(time())}-{DefaultValues._call_number:0&gt;5}'\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.base_models.DefaultValues-functions","title":"Functions\u21b2","text":""},{"location":"development/data_models/#pyvesync.models.base_models.DefaultValues.newTraceId","title":"newTraceId  <code>staticmethod</code>  \u21b2","text":"<pre><code>newTraceId() -&gt; str\n</code></pre> <p>Generate a new trace ID.</p> Source code in <code>src\\pyvesync\\models\\base_models.py</code> <pre><code>@staticmethod\ndef newTraceId() -&gt; str:\n    \"\"\"Generate a new trace ID.\"\"\"\n    DefaultValues._call_number += 1\n    return f'APP{TERMINAL_ID[-5:-1]}{int(time())}-{DefaultValues._call_number:0&gt;5}'\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.base_models.DefaultValues.traceId","title":"traceId  <code>staticmethod</code>  \u21b2","text":"<pre><code>traceId() -&gt; str\n</code></pre> <p>Trace ID CSRF token.</p> Source code in <code>src\\pyvesync\\models\\base_models.py</code> <pre><code>@staticmethod\ndef traceId() -&gt; str:\n    \"\"\"Trace ID CSRF token.\"\"\"\n    return str(int(time()))\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.base_models.RequestBaseModel","title":"RequestBaseModel  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DataClassORJSONMixin</code></p> <p>Base request model for API requests.</p> <p>Forbids extra keys in the request JSON.</p> Source code in <code>src\\pyvesync\\models\\base_models.py</code> <pre><code>@dataclass\nclass RequestBaseModel(DataClassORJSONMixin):\n    \"\"\"Base request model for API requests.\n\n    Forbids extra keys in the request JSON.\n    \"\"\"\n\n    class Config(BaseModelConfig):\n        \"\"\"orjson config for dataclasses.\"\"\"\n\n        forbid_extra_keys = True\n        orjson_options = orjson.OPT_NON_STR_KEYS\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.base_models.ResponseBaseModel","title":"ResponseBaseModel  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DataClassORJSONMixin</code></p> <p>Base response model for API responses.</p> <p>Allows extra keys in the response model and non-string keys in the JSON.</p> Source code in <code>src\\pyvesync\\models\\base_models.py</code> <pre><code>@dataclass\nclass ResponseBaseModel(DataClassORJSONMixin):\n    \"\"\"Base response model for API responses.\n\n    Allows extra keys in the response model and\n    non-string keys in the JSON.\n    \"\"\"\n\n    class Config(BaseConfig):\n        \"\"\"Config for dataclasses.\"\"\"\n\n        orjson_options = orjson.OPT_NON_STR_KEYS\n        forbid_extra_keys = False\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.base_models.ResponseCodeModel","title":"ResponseCodeModel  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Model for the 'result' field in response.</p> Source code in <code>src\\pyvesync\\models\\base_models.py</code> <pre><code>@dataclass\nclass ResponseCodeModel(ResponseBaseModel):\n    \"\"\"Model for the 'result' field in response.\"\"\"\n\n    traceId: str\n    code: int\n    msg: str | None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.base_models.ResponseCodeModel-attributes","title":"Attributes\u21b2","text":""},{"location":"development/data_models/#pyvesync.models.base_models.ResponseCodeModel.code","title":"code  <code>instance-attribute</code>  \u21b2","text":"<pre><code>code: int\n</code></pre> <p>Inherited From <code>ResponseCodeModel</code></p>"},{"location":"development/data_models/#pyvesync.models.base_models.ResponseCodeModel.msg","title":"msg  <code>instance-attribute</code>  \u21b2","text":"<pre><code>msg: str | None\n</code></pre> <p>Inherited From <code>ResponseCodeModel</code></p>"},{"location":"development/data_models/#pyvesync.models.base_models.ResponseCodeModel.traceId","title":"traceId  <code>instance-attribute</code>  \u21b2","text":"<pre><code>traceId: str\n</code></pre> <p>Inherited From <code>ResponseCodeModel</code></p>"},{"location":"development/data_models/#bypassv2-models","title":"BypassV2 Models\u21b2","text":"<p>Request Models for Bypass V2 Endpoints.</p> <p>API calls to bypassV2 endpoints have similar request structures. These models are used to serialize and deserialize the JSON requests for the bypassV2 endpoints.</p>"},{"location":"development/data_models/#pyvesync.models.bypass_models-classes","title":"Classes\u21b2","text":""},{"location":"development/data_models/#pyvesync.models.bypass_models.BypassV1Result","title":"BypassV1Result  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DataClassORJSONMixin</code></p> <p>Bypass V1 Response Dict.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass BypassV1Result(DataClassORJSONMixin):\n    \"\"\"Bypass V1 Response Dict.\"\"\"\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.BypassV2InnerResult","title":"BypassV2InnerResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DataClassORJSONMixin</code></p> <p>Inner Bypass V2 Result Data Model.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass BypassV2InnerResult(DataClassORJSONMixin):\n    \"\"\"Inner Bypass V2 Result Data Model.\"\"\"\n\n    class Config(BaseModelConfig):\n        \"\"\"Configure the Outer Result model.\"\"\"\n\n        allow_deserialization_not_by_alias = True\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.BypassV2OuterResult","title":"BypassV2OuterResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DataClassORJSONMixin</code></p> <p>Bypass V2 Outer Result Data Model.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass BypassV2OuterResult(DataClassORJSONMixin):\n    \"\"\"Bypass V2 Outer Result Data Model.\"\"\"\n\n    code: int\n    result: BypassV2InnerResult | None = field(\n        default=None,\n        metadata={\n            'serialize': pass_through,\n            'deserialize': pass_through,\n        },\n    )\n\n    class Config(BaseModelConfig):\n        \"\"\"Configure the Outer Result model.\"\"\"\n\n        allow_deserialization_not_by_alias = True\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.BypassV2RequestPayload","title":"BypassV2RequestPayload  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBaseModel</code></p> <p>Generic Bypass V2 Payload Request model.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass BypassV2RequestPayload(RequestBaseModel):\n    \"\"\"Generic Bypass V2 Payload Request model.\"\"\"\n\n    data: dict\n    method: str\n    source: str = 'APP'\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.BypassV2ResultError","title":"BypassV2ResultError  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DataClassORJSONMixin</code></p> <p>Bypass V2 Result Error Data Model.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass BypassV2ResultError(DataClassORJSONMixin):\n    \"\"\"Bypass V2 Result Error Data Model.\"\"\"\n\n    msg: str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV1","title":"RequestBypassV1  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBaseModel</code></p> <p>Bypass V1 Status Request Dict.</p> <p>This is the bypassV1 request model for API calls that use the <code>configModel</code> and <code>deviceId</code> fields.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass RequestBypassV1(RequestBaseModel):\n    \"\"\"Bypass V1 Status Request Dict.\n\n    This is the bypassV1 request model for API calls\n    that use the `configModel` and `deviceId` fields.\n    \"\"\"\n\n    acceptLanguage: str\n    accountID: str\n    appVersion: str\n    cid: str\n    configModule: str\n    debugMode: bool\n    method: str\n    phoneBrand: str\n    phoneOS: str\n    traceId: str\n    timeZone: str\n    token: str\n    userCountryCode: str\n    uuid: str\n    deviceId: str\n    configModel: str\n\n    class Config(BaseConfig):  # type: ignore[override]\n        \"\"\"Configure omit None value keys.\"\"\"\n\n        omit_none = True\n        orjson_options = orjson.OPT_NON_STR_KEYS\n        forbid_extra_keys = True\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV1-attributes","title":"Attributes\u21b2","text":""},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV1.acceptLanguage","title":"acceptLanguage  <code>instance-attribute</code>  \u21b2","text":"<pre><code>acceptLanguage: str\n</code></pre> <p>Inherited From <code>RequestBypassV1</code></p>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV1.accountID","title":"accountID  <code>instance-attribute</code>  \u21b2","text":"<pre><code>accountID: str\n</code></pre> <p>Inherited From <code>RequestBypassV1</code></p>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV1.appVersion","title":"appVersion  <code>instance-attribute</code>  \u21b2","text":"<pre><code>appVersion: str\n</code></pre> <p>Inherited From <code>RequestBypassV1</code></p>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV1.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str\n</code></pre> <p>Inherited From <code>RequestBypassV1</code></p>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV1.configModel","title":"configModel  <code>instance-attribute</code>  \u21b2","text":"<pre><code>configModel: str\n</code></pre> <p>Inherited From <code>RequestBypassV1</code></p>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV1.configModule","title":"configModule  <code>instance-attribute</code>  \u21b2","text":"<pre><code>configModule: str\n</code></pre> <p>Inherited From <code>RequestBypassV1</code></p>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV1.debugMode","title":"debugMode  <code>instance-attribute</code>  \u21b2","text":"<pre><code>debugMode: bool\n</code></pre> <p>Inherited From <code>RequestBypassV1</code></p>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV1.deviceId","title":"deviceId  <code>instance-attribute</code>  \u21b2","text":"<pre><code>deviceId: str\n</code></pre> <p>Inherited From <code>RequestBypassV1</code></p>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV1.method","title":"method  <code>instance-attribute</code>  \u21b2","text":"<pre><code>method: str\n</code></pre> <p>Inherited From <code>RequestBypassV1</code></p>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV1.phoneBrand","title":"phoneBrand  <code>instance-attribute</code>  \u21b2","text":"<pre><code>phoneBrand: str\n</code></pre> <p>Inherited From <code>RequestBypassV1</code></p>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV1.phoneOS","title":"phoneOS  <code>instance-attribute</code>  \u21b2","text":"<pre><code>phoneOS: str\n</code></pre> <p>Inherited From <code>RequestBypassV1</code></p>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV1.timeZone","title":"timeZone  <code>instance-attribute</code>  \u21b2","text":"<pre><code>timeZone: str\n</code></pre> <p>Inherited From <code>RequestBypassV1</code></p>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV1.token","title":"token  <code>instance-attribute</code>  \u21b2","text":"<pre><code>token: str\n</code></pre> <p>Inherited From <code>RequestBypassV1</code></p>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV1.traceId","title":"traceId  <code>instance-attribute</code>  \u21b2","text":"<pre><code>traceId: str\n</code></pre> <p>Inherited From <code>RequestBypassV1</code></p>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV1.userCountryCode","title":"userCountryCode  <code>instance-attribute</code>  \u21b2","text":"<pre><code>userCountryCode: str\n</code></pre> <p>Inherited From <code>RequestBypassV1</code></p>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV1.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str\n</code></pre> <p>Inherited From <code>RequestBypassV1</code></p>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestBypassV2","title":"RequestBypassV2  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBaseModel</code></p> <p>Bypass V2 Status Request Dict.</p> <p>This is the bypassV2 request model for API calls that use the <code>configModel</code> and <code>deviceId</code> fields.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass RequestBypassV2(RequestBaseModel):\n    \"\"\"Bypass V2 Status Request Dict.\n\n    This is the bypassV2 request model for API calls\n    that use the `configModel` and `deviceId` fields.\n    \"\"\"\n\n    acceptLanguage: str\n    accountID: str\n    appVersion: str\n    cid: str\n    configModule: str\n    debugMode: bool\n    method: str\n    phoneBrand: str\n    phoneOS: str\n    traceId: str\n    timeZone: str\n    token: str\n    userCountryCode: str\n    deviceId: str\n    configModel: str\n    payload: BypassV2RequestPayload\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestV1ClearTimer","title":"RequestV1ClearTimer  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Request model for clearing Bypass V1 API outlet timer.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass RequestV1ClearTimer(RequestBypassV1):\n    \"\"\"Request model for clearing Bypass V1 API outlet timer.\"\"\"\n\n    timerId: str\n    status: str | None = None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestV1GetTimer","title":"RequestV1GetTimer  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Request model for getting timers from v1 API.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass RequestV1GetTimer(RequestBypassV1):\n    \"\"\"Request model for getting timers from v1 API.\"\"\"\n\n    switchNo: str | None = None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestV1SetTime","title":"RequestV1SetTime  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Request model for setting timer with counterTime.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass RequestV1SetTime(RequestBypassV1):\n    \"\"\"Request model for setting timer with counterTime.\"\"\"\n\n    counterTime: str\n    action: str\n    status: str | None = None\n    switchNo: int | None = None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.RequestV1SetTimer","title":"RequestV1SetTimer  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Request model for timer with counterTimer key.</p> <p>Attributes:</p> Name Type Description <code>counterTimer</code> <code>str</code> <p>The timer value in seconds.</p> <code>action</code> <code>str</code> <p>The action to perform (e.g., \"on\", \"off\").</p> <code>switchNo</code> <code>int | None</code> <p>The switch number for the timer.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass RequestV1SetTimer(RequestBypassV1):\n    \"\"\"Request model for timer with counterTimer key.\n\n    Attributes:\n        counterTimer (str): The timer value in seconds.\n        action (str): The action to perform (e.g., \"on\", \"off\").\n        switchNo (int | None): The switch number for the timer.\n    \"\"\"\n\n    counterTimer: str\n    action: str\n    switchNo: int | None = None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.ResponseBypassV1","title":"ResponseBypassV1  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseCodeModel</code></p> <p>Bypass V1 Response Dict.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass ResponseBypassV1(ResponseCodeModel):\n    \"\"\"Bypass V1 Response Dict.\"\"\"\n\n    result: BypassV1Result | None = field(\n        default=None,\n        metadata={\n            'serialize': pass_through,\n            'deserialize': pass_through,\n        },\n    )\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.ResponseBypassV2","title":"ResponseBypassV2  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseCodeModel</code></p> <p>Bypass V2 Response Dict.</p> <p>This is the bypassV2 response model for API calls that use the <code>configModel</code> and <code>deviceId</code> fields.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass ResponseBypassV2(ResponseCodeModel):\n    \"\"\"Bypass V2 Response Dict.\n\n    This is the bypassV2 response model for API calls\n    that use the `configModel` and `deviceId` fields.\n    \"\"\"\n\n    result: BypassV2OuterResult | None = None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.ResultV1GetTimerList","title":"ResultV1GetTimerList  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>BypassV1Result</code></p> <p>Get timers result for v1 API.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass ResultV1GetTimerList(BypassV1Result):\n    \"\"\"Get timers result for v1 API.\"\"\"\n\n    timers: list[TimeItemV1] | list[TimerItemV1] | TimerItemV1 | None = None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.ResultV1SetTimer","title":"ResultV1SetTimer  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>BypassV1Result</code></p> <p>Result model for setting Bypass V1 API timer.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass ResultV1SetTimer(BypassV1Result):\n    \"\"\"Result model for setting Bypass V1 API timer.\"\"\"\n\n    timerID: str\n    conflictTimerIds: list[str] | None = None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.ResultV2GetTimer","title":"ResultV2GetTimer  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>BypassV2InnerResult</code></p> <p>Inner result for Bypass V2 GetTimer method.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass ResultV2GetTimer(BypassV2InnerResult):\n    \"\"\"Inner result for Bypass V2 GetTimer method.\"\"\"\n\n    timers: list[TimerItemV2] | None = None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.ResultV2SetTimer","title":"ResultV2SetTimer  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>BypassV2InnerResult</code></p> <p>Result for Bypass V2 SetTimer method.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass ResultV2SetTimer(BypassV2InnerResult):\n    \"\"\"Result for Bypass V2 SetTimer method.\"\"\"\n\n    id: int\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.TimeItemV1","title":"TimeItemV1  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Data model for Bypass V1 Timers.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass TimeItemV1(ResponseBaseModel):\n    \"\"\"Data model for Bypass V1 Timers.\"\"\"\n\n    timerID: str\n    counterTime: str\n    action: str\n    status: str\n    resetTime: str\n    uuid: str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.TimerItemV1","title":"TimerItemV1  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Data model for Bypass V1 Timers.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass TimerItemV1(ResponseBaseModel):\n    \"\"\"Data model for Bypass V1 Timers.\"\"\"\n\n    timerID: str\n    counterTimer: str\n    action: str\n    status: str\n    resetTime: str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.TimerItemV2","title":"TimerItemV2  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Data model for Bypass V2 Timers.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>@dataclass\nclass TimerItemV2(ResponseBaseModel):\n    \"\"\"Data model for Bypass V2 Timers.\"\"\"\n\n    id: int\n    remain: int\n    action: str\n    total: int\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bypass_models.TimerModels","title":"TimerModels \u21b2","text":"<p>Class holding all common timer models.</p> <p>Attributes:</p> Name Type Description <code>ResultV2GetTimer</code> <code>ResultV2GetTimer</code> <p>Result model for Bypass V2 GetTimer method.</p> <code>ResultV2SetTimer</code> <code>ResultV2SetTimer</code> <p>Result model for Bypass V2 SetTimer method.</p> <code>ResultV1SetTimer</code> <code>ResultV1SetTimer</code> <p>Result model V1 API for setting timer.</p> <code>ResultV1GetTimer</code> <code>ResultV1GetTimerList</code> <p>Get timers result for v1 API.</p> <code>TimeItemV1</code> <code>TimeItemV1</code> <p>Data model for Bypass V1 Timers.</p> <code>TimerItemV1</code> <code>TimerItemV1</code> <p>Data model for Bypass V1 Timers.</p> <code>TimerItemV2</code> <code>TimerItemV2</code> <p>Data model for Bypass V2 Timers.</p> <code>RequestV1ClearTimer</code> <code>RequestV1ClearTimer</code> <p>Model for deleting timer.</p> <code>RequestV1SetTimer</code> <code>RequestV1SetTimer</code> <p>Model for timer with counterTimer key.</p> <code>RequestV1GetTimer</code> <code>RequestV1GetTimer</code> <p>Model for getting timers from v1 API.</p> <code>RequestV1SetTime</code> <code>RequestV1SetTime</code> <p>Model for setting timer with counterTime key.</p> Source code in <code>src\\pyvesync\\models\\bypass_models.py</code> <pre><code>class TimerModels:\n    \"\"\"Class holding all common timer models.\n\n    Attributes:\n        ResultV2GetTimer (ResultV2GetTimer): Result model for Bypass V2 GetTimer method.\n        ResultV2SetTimer (ResultV2SetTimer): Result model for Bypass V2 SetTimer method.\n        ResultV1SetTimer (ResultV1SetTimer): Result model V1 API for setting timer.\n        ResultV1GetTimer (ResultV1GetTimerList): Get timers result for v1 API.\n        TimeItemV1 (TimeItemV1): Data model for Bypass V1 Timers.\n        TimerItemV1 (TimerItemV1): Data model for Bypass V1 Timers.\n        TimerItemV2 (TimerItemV2): Data model for Bypass V2 Timers.\n        RequestV1ClearTimer (RequestV1ClearTimer): Model for deleting timer.\n        RequestV1SetTimer (RequestV1SetTimer): Model for timer with counterTimer key.\n        RequestV1GetTimer (RequestV1GetTimer): Model for getting timers from v1 API.\n        RequestV1SetTime (RequestV1SetTime): Model for setting timer with counterTime key.\n    \"\"\"\n\n    ResultV2GetTimer = ResultV2GetTimer\n    ResultV2SetTimer = ResultV2SetTimer\n    ResultV1SetTimer = ResultV1SetTimer\n    ResultV1GetTimer = ResultV1GetTimerList\n    TimeItemV1 = TimeItemV1\n    TimerItemV1 = TimerItemV1\n    TimerItemV2 = TimerItemV2\n    RequestV1ClearTimer = RequestV1ClearTimer\n    RequestV1SetTimer = RequestV1SetTimer\n    RequestV1GetTimer = RequestV1GetTimer\n    RequestV1SetTime = RequestV1SetTime\n</code></pre>"},{"location":"development/data_models/#vesync-general-api-models","title":"VeSync General API Models\u21b2","text":"<p>Models for general VeSync API requests and responses.</p> <p>Dataclasses should follow the naming convention of Request/Response +  + Model. Internal models should be named starting with IntResp/IntReqModel. Note <p>All models should inherit <code>ResponseBaseModel</code> or <code>RequestBaseModel</code>. Use <code>pyvesync.models.base_models.DefaultValues</code> to set default values. There should be no repeating keys set in the child models.</p>"},{"location":"development/data_models/#pyvesync.models.vesync_models-classes","title":"Classes\u21b2","text":""},{"location":"development/data_models/#pyvesync.models.vesync_models.FirmwareDeviceItemModel","title":"FirmwareDeviceItemModel  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Model for the firmware device item in the firmware response.</p> Source code in <code>src\\pyvesync\\models\\vesync_models.py</code> <pre><code>@dataclass\nclass FirmwareDeviceItemModel(ResponseBaseModel):\n    \"\"\"Model for the firmware device item in the firmware response.\"\"\"\n\n    deviceCid: str\n    deviceName: str\n    code: int\n    msg: str | None\n    firmUpdateInfos: list[FirmwareUpdateInfoModel]\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.vesync_models.FirmwareResultModel","title":"FirmwareResultModel  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Model for the firmware response result.</p> Source code in <code>src\\pyvesync\\models\\vesync_models.py</code> <pre><code>@dataclass\nclass FirmwareResultModel(ResponseBaseModel):\n    \"\"\"Model for the firmware response result.\"\"\"\n\n    cidFwInfoList: list[FirmwareDeviceItemModel]\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.vesync_models.FirmwareUpdateInfoModel","title":"FirmwareUpdateInfoModel  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Firmware update information model.</p> Source code in <code>src\\pyvesync\\models\\vesync_models.py</code> <pre><code>@dataclass\nclass FirmwareUpdateInfoModel(ResponseBaseModel):\n    \"\"\"Firmware update information model.\"\"\"\n\n    currentVersion: str\n    latestVersion: str\n    releaseNotes: str\n    pluginName: str\n    isMainFw: bool\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.vesync_models.InternalDeviceListExtension","title":"InternalDeviceListExtension  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Internal Optional 'extension' field in device list response.</p> <p>Used by the <code>InnerRespDeviceListDevModel</code> class to populate the extension field in the device list response.</p> Source code in <code>src\\pyvesync\\models\\vesync_models.py</code> <pre><code>@dataclass\nclass InternalDeviceListExtension(ResponseBaseModel):\n    \"\"\"Internal Optional 'extension' field in device list response.\n\n    Used by the `InnerRespDeviceListDevModel` class to populate\n    the extension field in the device list response.\n    \"\"\"\n\n    airQuality: None | int\n    airQualityLevel: None | int\n    mode: None | str\n    fanSpeedLevel: None | str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.vesync_models.InternalDeviceListResult","title":"InternalDeviceListResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Internal model for the 'result' field in device list response.</p> Notes <p>Used by the <code>ResponseDeviceListModel</code> class to populate result field.</p> Source code in <code>src\\pyvesync\\models\\vesync_models.py</code> <pre><code>@dataclass\nclass InternalDeviceListResult(ResponseBaseModel):\n    \"\"\"Internal model for the 'result' field in device list response.\n\n    Notes:\n      Used by the `ResponseDeviceListModel` class to populate result field.\n    \"\"\"\n\n    total: int\n    pageSize: int\n    pageNo: int\n    list: list[ResponseDeviceDetailsModel]\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.vesync_models.RequestDeviceListModel","title":"RequestDeviceListModel  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBaseModel</code></p> <p>Model for the device list request.</p> Source code in <code>src\\pyvesync\\models\\vesync_models.py</code> <pre><code>@dataclass\nclass RequestDeviceListModel(RequestBaseModel):\n    \"\"\"Model for the device list request.\"\"\"\n\n    token: str\n    accountID: str\n    timeZone: str = DefaultValues.timeZone\n    method: str = 'devices'\n    pageNo: int = 1\n    pageSize: int = 100\n    appVersion: str = DefaultValues.appVersion\n    phoneBrand: str = DefaultValues.phoneBrand\n    phoneOS: str = DefaultValues.phoneOS\n    acceptLanguage: str = DefaultValues.acceptLanguage\n    traceId: str = str(DefaultValues.traceId())\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.vesync_models.RequestFirmwareModel","title":"RequestFirmwareModel  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBaseModel</code></p> <p>Model for the firmware request.</p> Source code in <code>src\\pyvesync\\models\\vesync_models.py</code> <pre><code>@dataclass\nclass RequestFirmwareModel(RequestBaseModel):\n    \"\"\"Model for the firmware request.\"\"\"\n\n    accountID: str\n    timeZone: str\n    token: str\n    userCountryCode: str\n    cidList: list[str]\n    acceptLanguage: str = DefaultValues.acceptLanguage\n    traceId: str = field(default_factory=DefaultValues.traceId)\n    appVersion: str = DefaultValues.appVersion\n    phoneBrand: str = DefaultValues.phoneBrand\n    phoneOS: str = DefaultValues.phoneOS\n    method: str = 'getFirmwareUpdateInfoList'\n    debugMode: bool = False\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.vesync_models.RequestGetTokenModel","title":"RequestGetTokenModel  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBaseModel</code></p> <p>Request model for requesting auth token (used for login).</p> Source code in <code>src\\pyvesync\\models\\vesync_models.py</code> <pre><code>@dataclass\nclass RequestGetTokenModel(RequestBaseModel):\n    \"\"\"Request model for requesting auth token (used for login).\"\"\"\n\n    # Arguments to set\n    email: str\n    method: str\n    password: str\n    # default values\n    acceptLanguage: str = DefaultValues.acceptLanguage\n    accountID: str = ''\n    authProtocolType: str = 'generic'\n    clientInfo: str = DefaultValues.phoneBrand\n    clientType: str = DefaultValues.clientType\n    clientVersion: str = f'VeSync {DefaultValues.appVersion}'\n    debugMode: bool = False\n    osInfo: str = DefaultValues.phoneOS\n    terminalId: str = DefaultValues.terminalId\n    timeZone: str = DefaultValues.timeZone\n    token: str = ''\n    userCountryCode: str = DefaultValues.userCountryCode\n    appID: str = DefaultValues.appId\n    sourceAppID: str = DefaultValues.appId\n    traceId: str = field(default_factory=DefaultValues.newTraceId)\n\n    def __post_init__(self) -&gt; None:\n        \"\"\"Hash the password field.\"\"\"\n        self.password = self.hash_password(self.password)\n\n    @staticmethod\n    def hash_password(string: str) -&gt; str:\n        \"\"\"Encode password.\"\"\"\n        return hashlib.md5(string.encode('utf-8')).hexdigest()  # noqa: S324\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.vesync_models.RequestGetTokenModel-functions","title":"Functions\u21b2","text":""},{"location":"development/data_models/#pyvesync.models.vesync_models.RequestGetTokenModel.hash_password","title":"hash_password  <code>staticmethod</code>  \u21b2","text":"<pre><code>hash_password(string: str) -&gt; str\n</code></pre> <p>Encode password.</p> Source code in <code>src\\pyvesync\\models\\vesync_models.py</code> <pre><code>@staticmethod\ndef hash_password(string: str) -&gt; str:\n    \"\"\"Encode password.\"\"\"\n    return hashlib.md5(string.encode('utf-8')).hexdigest()  # noqa: S324\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.vesync_models.RequestLoginTokenModel","title":"RequestLoginTokenModel  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBaseModel</code></p> <p>Request model for login.</p> Source code in <code>src\\pyvesync\\models\\vesync_models.py</code> <pre><code>@dataclass\nclass RequestLoginTokenModel(RequestBaseModel):\n    \"\"\"Request model for login.\"\"\"\n\n    # Arguments to set\n    method: str\n    authorizeCode: str | None\n    # default values\n    acceptLanguage: str = DefaultValues.acceptLanguage\n    accountID: str = ''\n    clientInfo: str = DefaultValues.phoneBrand\n    clientType: str = DefaultValues.clientType\n    clientVersion: str = f'VeSync {DefaultValues.appVersion}'\n    debugMode: bool = False\n    emailSubscriptions: bool = False\n    osInfo: str = DefaultValues.phoneOS\n    terminalId: str = DefaultValues.terminalId\n    timeZone: str = DefaultValues.timeZone\n    token: str = ''\n    bizToken: str | None = None\n    regionChange: str | None = None\n    userCountryCode: str = DefaultValues.userCountryCode\n    traceId: str = field(default_factory=DefaultValues.newTraceId)\n\n    def __post_serialize__(self, d: dict[Any, Any]) -&gt; dict[Any, Any]:\n        \"\"\"Remove null keys.\"\"\"\n        if d['regionChange'] is None:\n            d.pop('regionChange')\n        if d['authorizeCode'] is None:\n            d.pop('authorizeCode')\n        if d['bizToken'] is None:\n            d.pop('bizToken')\n        return d\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.vesync_models.RequestPID","title":"RequestPID  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBaseModel</code></p> <p>Model for the PID request.</p> Source code in <code>src\\pyvesync\\models\\vesync_models.py</code> <pre><code>@dataclass\nclass RequestPID(RequestBaseModel):\n    \"\"\"Model for the PID request.\"\"\"\n\n    method: str\n    appVersion: str\n    phoneBrand: str\n    phoneOS: str\n    traceId: str\n    token: str\n    accountID: str\n    mobileID: str\n    configModule: str\n    region: str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.vesync_models.RespGetTokenResultModel","title":"RespGetTokenResultModel  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Model for the 'result' field in auth response with authorizeCode and account ID.</p> <p>This class is referenced by the <code>ResponseAuthModel</code> class.</p> Source code in <code>src\\pyvesync\\models\\vesync_models.py</code> <pre><code>@dataclass\nclass RespGetTokenResultModel(ResponseBaseModel):\n    \"\"\"Model for the 'result' field in auth response with authorizeCode and account ID.\n\n    This class is referenced by the `ResponseAuthModel` class.\n    \"\"\"\n\n    accountID: str\n    authorizeCode: str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.vesync_models.RespLoginTokenResultModel","title":"RespLoginTokenResultModel  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Model for the 'result' field in login response containing token and account ID.</p> <p>This class is referenced by the <code>ResponseLoginModel</code> class.</p> Source code in <code>src\\pyvesync\\models\\vesync_models.py</code> <pre><code>@dataclass\nclass RespLoginTokenResultModel(ResponseBaseModel):\n    \"\"\"Model for the 'result' field in login response containing token and account ID.\n\n    This class is referenced by the `ResponseLoginModel` class.\n    \"\"\"\n\n    accountID: str\n    acceptLanguage: str\n    countryCode: str\n    token: str\n    bizToken: str = ''\n    currentRegion: str = ''\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.vesync_models.ResponseDeviceDetailsModel","title":"ResponseDeviceDetailsModel  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Internal response model for each device in device list response.</p> <p>Populates the 'list' field in the <code>InternalDeviceListResult</code>.</p> <p>Certain Devices have device status information in the <code>deviceProp</code> or <code>extension</code> fields. This model flattens those fields into the <code>deviceStatus</code> and <code>connectionStatus</code> fields before deserialization.</p> Source code in <code>src\\pyvesync\\models\\vesync_models.py</code> <pre><code>@dataclass\nclass ResponseDeviceDetailsModel(ResponseBaseModel):\n    \"\"\"Internal response model for each device in device list response.\n\n    Populates the 'list' field in the `InternalDeviceListResult`.\n\n    Certain Devices have device status information in the `deviceProp` or `extension`\n    fields. This model flattens those fields into the `deviceStatus` and\n    `connectionStatus` fields before deserialization.\n    \"\"\"\n\n    deviceRegion: str\n    isOwner: bool\n    deviceName: str\n    cid: str\n    connectionType: str\n    deviceType: str\n    type: str\n    configModule: str\n    uuid: str | None = None\n    macID: str = ''\n    mode: str = ''\n    deviceImg: str = ''\n    speed: str | None = None\n    currentFirmVersion: str | None = None\n    subDeviceType: str | None = None\n    subDeviceList: str | None = None\n    extension: InternalDeviceListExtension | None = None\n    subDeviceNo: int | None = None\n    deviceStatus: str = 'off'\n    connectionStatus: str = 'offline'\n    productType: str | None = None\n\n    @classmethod\n    def __pre_deserialize__(cls, d: dict[Any, Any]) -&gt; dict[Any, Any]:\n        \"\"\"Perform device_list pre-deserialization processes.\n\n        This performs the following:\n            - Flattens the `deviceProp` field into `deviceStatus`, `connectionStatus`\n                and `macID`\n            - Sets `cid` to `uuid` or `macID` if null\n        \"\"\"\n        super().__pre_deserialize__(d)\n        d = _flatten_device_prop(d)\n        if d.get('cid') is None:\n            d['cid'] = d.get('uuid') if d.get('uuid') is not None else d.get('macID')\n        return d\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.vesync_models.ResponseDeviceListModel","title":"ResponseDeviceListModel  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseCodeModel</code></p> <p>Device list response model.</p> <p>Inherits from <code>BaseResultModel</code>. The <code>BaseResultModel</code> class provides the defaults \"code\" and \"msg\" fields for the response.</p> <p>Attributes:</p> Name Type Description <code>result</code> <code>InternalDeviceListResult</code> <p>InternalDeviceListResult The inner model for the 'result' field in the device list response.</p> <code>module</code> <code>InternalDeviceListResult</code> <p>str | None</p> <code>stacktrace</code> <code>InternalDeviceListResult</code> <p>str | None</p> Notes <p>See the <code>DeviceListResultModel</code> and <code>DeviceListDeviceModel</code> classes for the inner model of the 'result' field.</p> Source code in <code>src\\pyvesync\\models\\vesync_models.py</code> <pre><code>@dataclass\nclass ResponseDeviceListModel(ResponseCodeModel):\n    \"\"\"Device list response model.\n\n    Inherits from `BaseResultModel`. The `BaseResultModel` class provides the\n    defaults \"code\" and \"msg\" fields for the response.\n\n    Attributes:\n        result: InternalDeviceListResult\n            The inner model for the 'result' field in the device list response.\n        module: str | None\n        stacktrace: str | None\n\n    Notes:\n        See the `DeviceListResultModel` and `DeviceListDeviceModel` classes for\n        the inner model of the 'result' field.\n    \"\"\"\n\n    result: InternalDeviceListResult\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.vesync_models.ResponseFirmwareModel","title":"ResponseFirmwareModel  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseCodeModel</code></p> <p>Model for the firmware response.</p> Source code in <code>src\\pyvesync\\models\\vesync_models.py</code> <pre><code>@dataclass\nclass ResponseFirmwareModel(ResponseCodeModel):\n    \"\"\"Model for the firmware response.\"\"\"\n\n    result: FirmwareResultModel\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.vesync_models.ResponseLoginModel","title":"ResponseLoginModel  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseCodeModel</code></p> <p>Model for the login response.</p> <p>Inherits from <code>BaseResultModel</code>. The <code>BaseResultModel</code> class provides the defaults \"code\" and \"msg\" fields for the response.</p> <p>Attributes:</p> Name Type Description <code>result</code> <code>RespLoginTokenResultModel | RespGetTokenResultModel</code> <p>ResponseLoginResultModel The inner model for the 'result' field in the login response.</p> <p>Examples:</p> <pre><code>a = {\n    \"code\": 0,\n    \"msg\": \"success\",\n    \"stacktrace\": null,\n    \"module\": null,\n    \"traceId\": \"123456\",\n    \"result\": {\n        \"accountID\": \"123456\",\n        \"acceptLanguage\": \"en\",\n        \"countryCode\": \"US\",\n        \"token\": \"abcdef1234567890\"\n    }\n}\nb = ResponseLoginModel.from_dict(a)\naccount_id = b.result.accountId\ntoken = b.result.token\n</code></pre> Source code in <code>src\\pyvesync\\models\\vesync_models.py</code> <pre><code>@dataclass\nclass ResponseLoginModel(ResponseCodeModel):\n    \"\"\"Model for the login response.\n\n    Inherits from `BaseResultModel`. The `BaseResultModel` class provides the\n    defaults \"code\" and \"msg\" fields for the response.\n\n    Attributes:\n        result: ResponseLoginResultModel\n            The inner model for the 'result' field in the login response.\n\n    Examples:\n        ```python\n        a = {\n            \"code\": 0,\n            \"msg\": \"success\",\n            \"stacktrace\": null,\n            \"module\": null,\n            \"traceId\": \"123456\",\n            \"result\": {\n                \"accountID\": \"123456\",\n                \"acceptLanguage\": \"en\",\n                \"countryCode\": \"US\",\n                \"token\": \"abcdef1234567890\"\n            }\n        }\n        b = ResponseLoginModel.from_dict(a)\n        account_id = b.result.accountId\n        token = b.result.token\n        ```\n    \"\"\"\n\n    result: RespLoginTokenResultModel | RespGetTokenResultModel\n</code></pre>"},{"location":"development/data_models/#bulb-models","title":"Bulb Models\u21b2","text":"<p>Models for VeSync Bulb API responses and requests.</p> <p>These models are used to serialize and deserialize the JSON responses from the VeSync API. The models are used in the VeSync API class methods to provide type hints and data validation.</p>"},{"location":"development/data_models/#pyvesync.models.bulb_models-classes","title":"Classes\u21b2","text":""},{"location":"development/data_models/#pyvesync.models.bulb_models.JSONCMD","title":"JSONCMD  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DataClassORJSONMixin</code></p> <p>Tunable Bulb JSON CMD dict.</p> Source code in <code>src\\pyvesync\\models\\bulb_models.py</code> <pre><code>@dataclass\nclass JSONCMD(DataClassORJSONMixin):\n    \"\"\"Tunable Bulb JSON CMD dict.\"\"\"\n\n    light: None | JSONCMDLight = None\n    getLightStatus: None | str = None\n\n    class Config(BaseConfig):\n        \"\"\"Configure the JSONCMD model.\"\"\"\n\n        omit_none = True\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bulb_models.JSONCMDLight","title":"JSONCMDLight  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DataClassORJSONMixin</code></p> <p>Light JSON CMD dict.</p> Source code in <code>src\\pyvesync\\models\\bulb_models.py</code> <pre><code>@dataclass\nclass JSONCMDLight(DataClassORJSONMixin):\n    \"\"\"Light JSON CMD dict.\"\"\"\n\n    action: str\n    brightness: int | None = None\n    colorTempe: int | None = None\n\n    class Config(BaseConfig):\n        \"\"\"Configure the JSONCMDLight model.\"\"\"\n\n        omit_none = True\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bulb_models.RequestESL100Brightness","title":"RequestESL100Brightness  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Request model for Etekcity bulb details.</p> Source code in <code>src\\pyvesync\\models\\bulb_models.py</code> <pre><code>@dataclass\nclass RequestESL100Brightness(RequestBypassV1):\n    \"\"\"Request model for Etekcity bulb details.\"\"\"\n\n    status: str\n    brightNess: int\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bulb_models.RequestESL100CWBase","title":"RequestESL100CWBase  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Request model for ESL100CW bulb.</p> Source code in <code>src\\pyvesync\\models\\bulb_models.py</code> <pre><code>@dataclass\nclass RequestESL100CWBase(RequestBypassV1):\n    \"\"\"Request model for ESL100CW bulb.\"\"\"\n\n    jsonCmd: JSONCMD\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bulb_models.RequestESL100Detail","title":"RequestESL100Detail  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Request model for Etekcity bulb details.</p> Source code in <code>src\\pyvesync\\models\\bulb_models.py</code> <pre><code>@dataclass\nclass RequestESL100Detail(RequestBypassV1):\n    \"\"\"Request model for Etekcity bulb details.\"\"\"\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bulb_models.RequestESL100Status","title":"RequestESL100Status  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Request model for Etekcity bulb details.</p> Source code in <code>src\\pyvesync\\models\\bulb_models.py</code> <pre><code>@dataclass\nclass RequestESL100Status(RequestBypassV1):\n    \"\"\"Request model for Etekcity bulb details.\"\"\"\n\n    status: str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bulb_models.ResponseESL100CWDetail","title":"ResponseESL100CWDetail  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseCodeModel</code></p> <p>Response model for Etekcity bulb details.</p> Source code in <code>src\\pyvesync\\models\\bulb_models.py</code> <pre><code>@dataclass\nclass ResponseESL100CWDetail(ResponseCodeModel):\n    \"\"\"Response model for Etekcity bulb details.\"\"\"\n\n    result: ResponseESL100CWDetailResult\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bulb_models.ResponseESL100CWDetailResult","title":"ResponseESL100CWDetailResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Result model for ESL100CW Tunable bulb details.</p> Source code in <code>src\\pyvesync\\models\\bulb_models.py</code> <pre><code>@dataclass\nclass ResponseESL100CWDetailResult(ResponseBaseModel):\n    \"\"\"Result model for ESL100CW Tunable bulb details.\"\"\"\n\n    light: ResponseESL100CWLight\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bulb_models.ResponseESL100CWLight","title":"ResponseESL100CWLight  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>ESL100CW Tunable Bulb Device Detail Response.</p> Source code in <code>src\\pyvesync\\models\\bulb_models.py</code> <pre><code>@dataclass\nclass ResponseESL100CWLight(ResponseBaseModel):\n    \"\"\"ESL100CW Tunable Bulb Device Detail Response.\"\"\"\n\n    brightness: int | None\n    action: str = 'on'\n    colorTempe: int = 0\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bulb_models.ResponseESL100Detail","title":"ResponseESL100Detail  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseCodeModel</code></p> <p>Response model for Etekcity bulb details.</p> Source code in <code>src\\pyvesync\\models\\bulb_models.py</code> <pre><code>@dataclass\nclass ResponseESL100Detail(ResponseCodeModel):\n    \"\"\"Response model for Etekcity bulb details.\"\"\"\n\n    traceId: str\n    code: int\n    msg: str | None\n    result: ResponseESL100DetailResult\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bulb_models.ResponseESL100Detail-attributes","title":"Attributes\u21b2","text":""},{"location":"development/data_models/#pyvesync.models.bulb_models.ResponseESL100Detail.code","title":"code  <code>instance-attribute</code>  \u21b2","text":"<pre><code>code: int\n</code></pre> <p>Inherited From <code>ResponseCodeModel</code></p>"},{"location":"development/data_models/#pyvesync.models.bulb_models.ResponseESL100Detail.msg","title":"msg  <code>instance-attribute</code>  \u21b2","text":"<pre><code>msg: str | None\n</code></pre> <p>Inherited From <code>ResponseCodeModel</code></p>"},{"location":"development/data_models/#pyvesync.models.bulb_models.ResponseESL100Detail.traceId","title":"traceId  <code>instance-attribute</code>  \u21b2","text":"<pre><code>traceId: str\n</code></pre> <p>Inherited From <code>ResponseCodeModel</code></p>"},{"location":"development/data_models/#pyvesync.models.bulb_models.ResponseESL100DetailResult","title":"ResponseESL100DetailResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>ESL100 Dimmable Bulb Device Detail Response.</p> Source code in <code>src\\pyvesync\\models\\bulb_models.py</code> <pre><code>@dataclass\nclass ResponseESL100DetailResult(ResponseBaseModel):\n    \"\"\"ESL100 Dimmable Bulb Device Detail Response.\"\"\"\n\n    deviceName: str | None\n    name: str | None\n    brightness: int | None = field(metadata=field_options(alias='brightNess'))\n    activeTime: int | None\n    deviceStatus: str = 'off'\n    connectionStatus: str = 'offline'\n\n    @classmethod\n    def __post_deserialize__(  # type: ignore[override]\n        cls, obj: Self\n    ) -&gt; Self:\n        \"\"\"Set values depending on color or white mode.\"\"\"\n        if obj.brightness is None:\n            obj.brightness = 0\n        if obj.activeTime is None:\n            obj.activeTime = 0\n        return obj\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bulb_models.ResponseESL100MCOuterResult","title":"ResponseESL100MCOuterResult  <code>dataclass</code>  \u21b2","text":"<p>ESL100MC Multi-Color Bulb Status Response.</p> Source code in <code>src\\pyvesync\\models\\bulb_models.py</code> <pre><code>@dataclass\nclass ResponseESL100MCOuterResult:\n    \"\"\"ESL100MC Multi-Color Bulb Status Response.\"\"\"\n\n    traceId: str\n    code: int\n    result: ResponseESL100MCResult\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bulb_models.ResponseESL100MCResult","title":"ResponseESL100MCResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>BypassV2InnerResult</code></p> <p>ESL100MC Multi-Color Bulb Status Response.</p> Source code in <code>src\\pyvesync\\models\\bulb_models.py</code> <pre><code>@dataclass\nclass ResponseESL100MCResult(BypassV2InnerResult):\n    \"\"\"ESL100MC Multi-Color Bulb Status Response.\"\"\"\n\n    colorMode: str\n    action: str\n    brightness: int = 0\n    red: int = 0\n    green: int = 0\n    blue: int = 0\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bulb_models.ResponseESL100MCStatus","title":"ResponseESL100MCStatus  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseCodeModel</code></p> <p>Response model for Etekcity bulb status.</p> Source code in <code>src\\pyvesync\\models\\bulb_models.py</code> <pre><code>@dataclass\nclass ResponseESL100MCStatus(ResponseCodeModel):\n    \"\"\"Response model for Etekcity bulb status.\"\"\"\n\n    result: ResponseESL100MCOuterResult\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bulb_models.ResponseValcenoOuterResult","title":"ResponseValcenoOuterResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Valceno Bulb Status Response.</p> Source code in <code>src\\pyvesync\\models\\bulb_models.py</code> <pre><code>@dataclass\nclass ResponseValcenoOuterResult(ResponseBaseModel):\n    \"\"\"Valceno Bulb Status Response.\"\"\"\n\n    result: ResponseValcenoStatusResult\n    traceId: str = ''\n    code: int = 0\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bulb_models.ResponseValcenoStatus","title":"ResponseValcenoStatus  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseCodeModel</code></p> <p>Response model for Valceno bulb status.</p> Source code in <code>src\\pyvesync\\models\\bulb_models.py</code> <pre><code>@dataclass\nclass ResponseValcenoStatus(ResponseCodeModel):\n    \"\"\"Response model for Valceno bulb status.\"\"\"\n\n    result: ResponseValcenoOuterResult\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bulb_models.ResponseValcenoStatusResult","title":"ResponseValcenoStatusResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Valceno Bulb Status Result.</p> Source code in <code>src\\pyvesync\\models\\bulb_models.py</code> <pre><code>@dataclass\nclass ResponseValcenoStatusResult(ResponseBaseModel):\n    \"\"\"Valceno Bulb Status Result.\"\"\"\n\n    colorMode: str = ''\n    colorTemp: int = 0\n    brightness: int = 0\n    hue: int = 0\n    saturation: int = 0\n    value: int = 0\n    enabled: str = 'off'\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.bulb_models.ValcenoStatusPayload","title":"ValcenoStatusPayload \u21b2","text":"<p>               Bases: <code>TypedDict</code></p> <p>Typed Dict for setting Valceno bulb status.</p> Source code in <code>src\\pyvesync\\models\\bulb_models.py</code> <pre><code>class ValcenoStatusPayload(TypedDict):\n    \"\"\"Typed Dict for setting Valceno bulb status.\"\"\"\n\n    colorMode: str\n    colorTemp: int | str\n    brightness: int | str\n    hue: int | str\n    saturation: int | str\n    value: int | str\n    force: int\n</code></pre>"},{"location":"development/data_models/#fan-models","title":"Fan Models\u21b2","text":"<p>Data models for VeSync Fans.</p> <p>These models inherit from <code>ResponseBaseModel</code> and <code>RequestBaseModel</code> from the <code>base_models</code> module.</p>"},{"location":"development/data_models/#pyvesync.models.fan_models-classes","title":"Classes\u21b2","text":""},{"location":"development/data_models/#pyvesync.models.fan_models.FanSleepPreferences","title":"FanSleepPreferences  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DataClassORJSONMixin</code></p> <p>Fan Sleep Preferences.</p> Source code in <code>src\\pyvesync\\models\\fan_models.py</code> <pre><code>@dataclass\nclass FanSleepPreferences(DataClassORJSONMixin):\n    \"\"\"Fan Sleep Preferences.\"\"\"\n\n    sleepPreferenceType: str\n    oscillationSwitch: int\n    fallAsleepRemain: int\n    autoChangeFanLevelSwitch: int\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.fan_models.TowerFanResult","title":"TowerFanResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>BypassV2InnerResult</code></p> <p>Tower Fan Result Model.</p> Source code in <code>src\\pyvesync\\models\\fan_models.py</code> <pre><code>@dataclass\nclass TowerFanResult(BypassV2InnerResult):\n    \"\"\"Tower Fan Result Model.\"\"\"\n\n    powerSwitch: int\n    workMode: str\n    manualSpeedLevel: int\n    fanSpeedLevel: int\n    screenState: int\n    screenSwitch: int\n    oscillationSwitch: int\n    oscillationState: int\n    muteSwitch: int\n    muteState: int\n    timerRemain: int\n    temperature: int\n    errorCode: int\n    scheduleCount: int\n    displayingType: int | None = None\n    sleepPreference: FanSleepPreferences | None = None\n</code></pre>"},{"location":"development/data_models/#humidifier-models","title":"Humidifier Models\u21b2","text":"<p>Data models for VeSync Humidifier devices.</p> <p>These models inherit from <code>ResponseBaseModel</code> and <code>RequestBaseModel</code> from the <code>base_models</code> module.</p> <p>The <code>InnerHumidifierBaseResult</code> class is used as a base class for the inner humidifier result models. The correct subclass is determined by the mashumaro discriminator.</p>"},{"location":"development/data_models/#pyvesync.models.humidifier_models-classes","title":"Classes\u21b2","text":""},{"location":"development/data_models/#pyvesync.models.humidifier_models.BypassV2InnerErrorResult","title":"BypassV2InnerErrorResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>InnerHumidifierBaseResult</code></p> <p>Inner Error Result Model.</p> Source code in <code>src\\pyvesync\\models\\humidifier_models.py</code> <pre><code>class BypassV2InnerErrorResult(InnerHumidifierBaseResult):\n    \"\"\"Inner Error Result Model.\"\"\"\n\n    msg: str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.humidifier_models.ClassicLVHumidResult","title":"ClassicLVHumidResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>InnerHumidifierBaseResult</code></p> <p>Classic 200S Humidifier Result Model.</p> <p>Inherits from InnerHumidifierBaseResult.</p> Source code in <code>src\\pyvesync\\models\\humidifier_models.py</code> <pre><code>@dataclass\nclass ClassicLVHumidResult(InnerHumidifierBaseResult):\n    \"\"\"Classic 200S Humidifier Result Model.\n\n    Inherits from InnerHumidifierBaseResult.\n    \"\"\"\n\n    enabled: bool\n    mist_virtual_level: int\n    mist_level: int\n    mode: str\n    display: Annotated[bool, Alias('indicator_light_status')]\n    water_lacks: bool\n    humidity: int | None = None\n    humidity_high: bool = False\n    automatic_stop_reach_target: bool = False\n    water_tank_lifted: bool = False\n    warm_enabled: bool = False\n    warm_level: int | None = None\n    night_light_brightness: int | None = None\n    configuration: ClassicConfig | None = None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.humidifier_models.InnerHumidifierBaseResult","title":"InnerHumidifierBaseResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Base class for inner humidifier results model.</p> <p>All inner results models inherit from this class and are correctly subclassed by the mashumaro discriminator.</p> Source code in <code>src\\pyvesync\\models\\humidifier_models.py</code> <pre><code>@dataclass\nclass InnerHumidifierBaseResult(ResponseBaseModel):\n    \"\"\"Base class for inner humidifier results model.\n\n    All inner results models inherit from this class and are\n    correctly subclassed by the mashumaro discriminator.\n    \"\"\"\n\n    class Config(BaseConfig):  # type: ignore[override]\n        \"\"\"Configure the results model to use subclass discriminator.\"\"\"\n\n        allow_deserialization_not_by_alias = True\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.humidifier_models.LV600SExtension","title":"LV600SExtension  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>LV 600S Humidifier Configuration Model.</p> Source code in <code>src\\pyvesync\\models\\humidifier_models.py</code> <pre><code>@dataclass\nclass LV600SExtension(ResponseBaseModel):\n    \"\"\"LV 600S Humidifier Configuration Model.\"\"\"\n\n    timer_remain: int = 0\n    schedule_count: int = 0\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.humidifier_models.LV600SHumidResult","title":"LV600SHumidResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>InnerHumidifierBaseResult</code></p> <p>LV600S Humidifier Result Model.</p> <p>Inherits from InnerHumidifierBaseResult.</p> Source code in <code>src\\pyvesync\\models\\humidifier_models.py</code> <pre><code>@dataclass\nclass LV600SHumidResult(InnerHumidifierBaseResult):\n    \"\"\"LV600S Humidifier Result Model.\n\n    Inherits from InnerHumidifierBaseResult.\n    \"\"\"\n\n    automatic_stop_reach_target: bool\n    display: bool\n    enabled: bool\n    humidity: int\n    humidity_high: bool\n    mist_level: int\n    mist_virtual_level: int\n    mode: str\n    water_lacks: bool\n    water_tank_lifted: bool\n    extension: LV600SExtension | None = None\n    configuration: LV600SConfig | None = None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.humidifier_models.Levoit1000SResult","title":"Levoit1000SResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>InnerHumidifierBaseResult</code></p> <p>Levoit 1000S Humidifier Result Model.</p> Source code in <code>src\\pyvesync\\models\\humidifier_models.py</code> <pre><code>@dataclass\nclass Levoit1000SResult(InnerHumidifierBaseResult):\n    \"\"\"Levoit 1000S Humidifier Result Model.\"\"\"\n\n    powerSwitch: int\n    humidity: int\n    targetHumidity: int\n    virtualLevel: int\n    mistLevel: int\n    workMode: str\n    waterLacksState: int\n    waterTankLifted: int\n    autoStopSwitch: int\n    autoStopState: int\n    screenSwitch: int\n    screenState: int\n    scheduleCount: int\n    timerRemain: int\n    errorCode: int\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.humidifier_models.OuterHumidifierResult","title":"OuterHumidifierResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Humidifier Result Dict.</p> Source code in <code>src\\pyvesync\\models\\humidifier_models.py</code> <pre><code>@dataclass\nclass OuterHumidifierResult(ResponseBaseModel):\n    \"\"\"Humidifier Result Dict.\"\"\"\n\n    code: int\n    result: InnerHumidifierBaseResult\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.humidifier_models.ResponseHumidifierBase","title":"ResponseHumidifierBase  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseCodeModel</code></p> <p>Humidifier Base Response Dict.</p> Source code in <code>src\\pyvesync\\models\\humidifier_models.py</code> <pre><code>@dataclass\nclass ResponseHumidifierBase(ResponseCodeModel):\n    \"\"\"Humidifier Base Response Dict.\"\"\"\n\n    result: OuterHumidifierResult\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.humidifier_models.Superior6000SDryingMode","title":"Superior6000SDryingMode  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Drying Mode Model for Superior 6000S Humidifier.</p> Source code in <code>src\\pyvesync\\models\\humidifier_models.py</code> <pre><code>@dataclass\nclass Superior6000SDryingMode(ResponseBaseModel):\n    \"\"\"Drying Mode Model for Superior 6000S Humidifier.\"\"\"\n\n    dryingLevel: int\n    autoDryingSwitch: int\n    dryingState: int\n    dryingRemain: int\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.humidifier_models.Superior6000SResult","title":"Superior6000SResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>InnerHumidifierBaseResult</code></p> <p>Superior 6000S Humidifier Result Model.</p> <p>Inherits from InnerHumidifierBaseResult.</p> Source code in <code>src\\pyvesync\\models\\humidifier_models.py</code> <pre><code>@dataclass\nclass Superior6000SResult(InnerHumidifierBaseResult):\n    \"\"\"Superior 6000S Humidifier Result Model.\n\n    Inherits from InnerHumidifierBaseResult.\n    \"\"\"\n\n    powerSwitch: int\n    humidity: int\n    targetHumidity: int\n    virtualLevel: int\n    mistLevel: int\n    workMode: str\n    waterLacksState: int\n    waterTankLifted: int\n    autoStopSwitch: int\n    autoStopState: int\n    screenSwitch: int\n    screenState: int\n    scheduleCount: int\n    timerRemain: int\n    errorCode: int\n    autoPreference: int\n    childLockSwitch: int\n    filterLifePercent: int\n    temperature: int\n    dryingMode: Superior6000SDryingMode | None = None\n</code></pre>"},{"location":"development/data_models/#outlet-models","title":"Outlet Models\u21b2","text":"<p>Data models for VeSync outlets.</p>"},{"location":"development/data_models/#pyvesync.models.outlet_models-classes","title":"Classes\u21b2","text":""},{"location":"development/data_models/#pyvesync.models.outlet_models.EnergyInfo","title":"EnergyInfo  <code>dataclass</code>  \u21b2","text":"<p>Energy Info list items.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass EnergyInfo:\n    \"\"\"Energy Info list items.\"\"\"\n\n    timestamp: int\n    energyKWH: float\n    money: float\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.Request15ADetails","title":"Request15ADetails  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Request data model for 15A outlet Details.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass Request15ADetails(RequestBypassV1):\n    \"\"\"Request data model for 15A outlet Details.\"\"\"\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.Request15ANightlight","title":"Request15ANightlight  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Nightlight request data model for 15A Outlets.</p> <p>Inherits from RequestBypassV1.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass Request15ANightlight(RequestBypassV1):\n    \"\"\"Nightlight request data model for 15A Outlets.\n\n    Inherits from RequestBypassV1.\n    \"\"\"\n\n    mode: str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.Request15AStatus","title":"Request15AStatus  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Request data model for 15A outlet.</p> <p>Inherits from RequestBypassV1.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass Request15AStatus(RequestBypassV1):\n    \"\"\"Request data model for 15A outlet.\n\n    Inherits from RequestBypassV1.\n    \"\"\"\n\n    status: str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.RequestEnergyHistory","title":"RequestEnergyHistory  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBaseModel</code></p> <p>Request model for energy history.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass RequestEnergyHistory(RequestBaseModel):\n    \"\"\"Request model for energy history.\"\"\"\n\n    acceptLanguage: str\n    appVersion: str\n    accountID: str\n    method: str\n    phoneBrand: str\n    phoneOS: str\n    timeZone: str\n    token: str\n    traceId: str\n    userCountryCode: str\n    debugMode: bool\n    homeTimeZone: str\n    uuid: str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.RequestOutdoorStatus","title":"RequestOutdoorStatus  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Request model for outlet status.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass RequestOutdoorStatus(RequestBypassV1):\n    \"\"\"Request model for outlet status.\"\"\"\n\n    status: str\n    switchNo: str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.Response10ADetails","title":"Response10ADetails  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DataClassORJSONMixin</code></p> <p>Response model for Etekcity outlet details.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass Response10ADetails(DataClassORJSONMixin):\n    \"\"\"Response model for Etekcity outlet details.\"\"\"\n\n    code: int\n    msg: str | None\n    deviceStatus: str\n    connectionStatus: str\n    activeTime: int\n    power: float\n    voltage: float\n    energy: float | None = None\n    nightLightStatus: str | None = None\n    nightLightAutoMode: str | None = None\n    nightLightBrightness: int | None = None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.Response15ADetails","title":"Response15ADetails  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseCodeModel</code></p> <p>Response for 15A Outlets.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass Response15ADetails(ResponseCodeModel):\n    \"\"\"Response for 15A Outlets.\"\"\"\n\n    result: Response15AOutletResult\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.Response15AOutletResult","title":"Response15AOutletResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Response model for 15A outlet.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass Response15AOutletResult(ResponseBaseModel):\n    \"\"\"Response model for 15A outlet.\"\"\"\n\n    deviceStatus: str\n    connectionStatus: str\n    activeTime: int\n    power: float\n    voltage: float\n    energy: float | None = None\n    nightLightStatus: str | None = None\n    nightLightAutoMode: str | None = None\n    nightLightBrightness: int | None = None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.Response7AOutlet","title":"Response7AOutlet  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Response model for 7A outlet.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass Response7AOutlet(ResponseBaseModel):\n    \"\"\"Response model for 7A outlet.\"\"\"\n\n    activeTime: int\n    energy: float\n    deviceStatus: str\n    power: float | str\n    voltage: float | str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.ResponseBSDGO1Details","title":"ResponseBSDGO1Details  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseCodeModel</code></p> <p>Response model for BSDGO1 outlet.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass ResponseBSDGO1Details(ResponseCodeModel):\n    \"\"\"Response model for BSDGO1 outlet.\"\"\"\n\n    result: ResponseBSDGO1OutletResult\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.ResponseBSDGO1OutletResult","title":"ResponseBSDGO1OutletResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Response model for BSDGO1 outlet.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass ResponseBSDGO1OutletResult(ResponseBaseModel):\n    \"\"\"Response model for BSDGO1 outlet.\"\"\"\n\n    powerSwitch_1: int\n    active_time: int\n    connectionStatus: str\n    code: int\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.ResponseEnergyHistory","title":"ResponseEnergyHistory  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseCodeModel</code></p> <p>Response model for energy history.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass ResponseEnergyHistory(ResponseCodeModel):\n    \"\"\"Response model for energy history.\"\"\"\n\n    result: ResponseEnergyResult\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.ResponseEnergyResult","title":"ResponseEnergyResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Response model for energy result.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass ResponseEnergyResult(ResponseBaseModel):\n    \"\"\"Response model for energy result.\"\"\"\n\n    energyConsumptionOfToday: float\n    costPerKWH: float\n    maxEnergy: float\n    totalEnergy: float\n    energyInfos: list[EnergyInfo]\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.ResponseOldEnergy","title":"ResponseOldEnergy  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseCodeModel</code></p> <p>Response model for old energy history.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass ResponseOldEnergy(ResponseCodeModel):\n    \"\"\"Response model for old energy history.\"\"\"\n\n    energyConsumptionOfToday: float\n    costPerKWH: float\n    maxEnergy: float\n    totalEnergy: float\n    data: list[float]\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.ResponseOutdoorDetails","title":"ResponseOutdoorDetails  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseCodeModel</code></p> <p>Response model for outdoor outlet.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass ResponseOutdoorDetails(ResponseCodeModel):\n    \"\"\"Response model for outdoor outlet.\"\"\"\n\n    result: ResponseOutdoorOutletResult\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.ResponseOutdoorOutletResult","title":"ResponseOutdoorOutletResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Response model for outdoor outlet.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass ResponseOutdoorOutletResult(ResponseBaseModel):\n    \"\"\"Response model for outdoor outlet.\"\"\"\n\n    deviceStatus: str\n    connectionStatus: str\n    activeTime: int\n    power: float\n    voltage: float\n    energy: float\n    subDevices: list[ResponseOutdoorSubDevices]\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.ResponseOutdoorSubDevices","title":"ResponseOutdoorSubDevices  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Response model for outdoor energy.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass ResponseOutdoorSubDevices(ResponseBaseModel):\n    \"\"\"Response model for outdoor energy.\"\"\"\n\n    subDeviceNo: int\n    defaultName: str\n    subDeviceName: str\n    subDeviceStatus: str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.ResultESW10Details","title":"ResultESW10Details  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Response model for ESW10 outlet.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass ResultESW10Details(ResponseBaseModel):\n    \"\"\"Response model for ESW10 outlet.\"\"\"\n\n    enabled: bool\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.outlet_models.Timer7AItem","title":"Timer7AItem  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Timer item for 7A outlet.</p> Source code in <code>src\\pyvesync\\models\\outlet_models.py</code> <pre><code>@dataclass\nclass Timer7AItem(ResponseBaseModel):\n    \"\"\"Timer item for 7A outlet.\"\"\"\n\n    timerID: str\n    counterTimer: int\n    action: str\n    timerStatus: str\n</code></pre>"},{"location":"development/data_models/#purifier-models","title":"Purifier Models\u21b2","text":"<p>Data models for VeSync Purifiers.</p> <p>These models inherit from <code>ResponseBaseModel</code> and <code>RequestBaseModel</code> from the <code>base_models</code> module.</p> <p>The <code>InnerPurifierBaseResult</code> class is used as a base class for the inner purifier result models for all models and the mashumaro discriminator determines the correct subclass when deserializing.</p>"},{"location":"development/data_models/#pyvesync.models.purifier_models-classes","title":"Classes\u21b2","text":""},{"location":"development/data_models/#pyvesync.models.purifier_models.InnerPurifierBaseResult","title":"InnerPurifierBaseResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>BypassV2InnerResult</code></p> <p>Base class for inner purifier results model.</p> Source code in <code>src\\pyvesync\\models\\purifier_models.py</code> <pre><code>@dataclass\nclass InnerPurifierBaseResult(BypassV2InnerResult):\n    \"\"\"Base class for inner purifier results model.\"\"\"\n\n    class Config(BaseConfig):  # type: ignore[override]\n        \"\"\"Configure the results model to use subclass discriminator.\"\"\"\n\n        discriminator = Discriminator(include_subtypes=True)\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.purifier_models.Purifier131Filter","title":"Purifier131Filter  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Filter details model for LV PUR131.</p> Source code in <code>src\\pyvesync\\models\\purifier_models.py</code> <pre><code>@dataclass\nclass Purifier131Filter(ResponseBaseModel):\n    \"\"\"Filter details model for LV PUR131.\"\"\"\n\n    change: bool\n    useHour: int\n    percent: int\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.purifier_models.Purifier131Result","title":"Purifier131Result  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>BypassV1Result</code></p> <p>Purifier 131 Details Response Dict.</p> Source code in <code>src\\pyvesync\\models\\purifier_models.py</code> <pre><code>@dataclass\nclass Purifier131Result(BypassV1Result):\n    \"\"\"Purifier 131 Details Response Dict.\"\"\"\n\n    screenStatus: str\n    filterLife: Purifier131Filter\n    activeTime: int\n    levelNew: int\n    level: int | None\n    mode: str\n    airQuality: str\n    deviceName: str\n    childLock: str\n    deviceStatus: str\n    connectionStatus: str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.purifier_models.PurifierCoreDetailsResult","title":"PurifierCoreDetailsResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>InnerPurifierBaseResult</code></p> <p>Purifier inner Result Dict.</p> Source code in <code>src\\pyvesync\\models\\purifier_models.py</code> <pre><code>@dataclass\nclass PurifierCoreDetailsResult(InnerPurifierBaseResult):\n    \"\"\"Purifier inner Result Dict.\"\"\"\n\n    enabled: bool\n    filter_life: int\n    mode: str\n    level: int\n    device_error_code: int\n    levelNew: int | None = None\n    air_quality: int | None = None\n    display: bool | None = None\n    child_lock: bool | None = None\n    configuration: PurifierCoreDetailsConfig | None = None\n    extension: dict | None = None\n    air_quality_value: int | None = None\n    night_light: str | None = None\n    fan_rotate: str | None = None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.purifier_models.PurifierDetailsExtension","title":"PurifierDetailsExtension  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Extension dict in purifier details response for Core 200/300/400.</p> Source code in <code>src\\pyvesync\\models\\purifier_models.py</code> <pre><code>@dataclass\nclass PurifierDetailsExtension(ResponseBaseModel):\n    \"\"\"Extension dict in purifier details response for Core 200/300/400.\"\"\"\n\n    schedule_count: int\n    timer_remain: int\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.purifier_models.PurifierGetTimerResult","title":"PurifierGetTimerResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>InnerPurifierBaseResult</code></p> <p>Purifier inner Timer Result Dict.</p> Source code in <code>src\\pyvesync\\models\\purifier_models.py</code> <pre><code>@dataclass\nclass PurifierGetTimerResult(InnerPurifierBaseResult):\n    \"\"\"Purifier inner Timer Result Dict.\"\"\"\n\n    timers: list[ResponsePurifierTimerItems] | None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.purifier_models.PurifierModifyTimerResult","title":"PurifierModifyTimerResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>InnerPurifierBaseResult</code></p> <p>Purifier inner Add Timer Result Dict.</p> Source code in <code>src\\pyvesync\\models\\purifier_models.py</code> <pre><code>@dataclass\nclass PurifierModifyTimerResult(InnerPurifierBaseResult):\n    \"\"\"Purifier inner Add Timer Result Dict.\"\"\"\n\n    id: int\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.purifier_models.PurifierNightlight","title":"PurifierNightlight  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Purifier Nightlight Response Dict.</p> Source code in <code>src\\pyvesync\\models\\purifier_models.py</code> <pre><code>@dataclass\nclass PurifierNightlight(ResponseBaseModel):\n    \"\"\"Purifier Nightlight Response Dict.\"\"\"\n\n    nightLightSwitch: bool\n    brightness: int\n    colorTemperature: int\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.purifier_models.PurifierSproutResult","title":"PurifierSproutResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>InnerPurifierBaseResult</code></p> <p>Sprout Purifier Result Model.</p> Source code in <code>src\\pyvesync\\models\\purifier_models.py</code> <pre><code>@dataclass\nclass PurifierSproutResult(InnerPurifierBaseResult):\n    \"\"\"Sprout Purifier Result Model.\"\"\"\n\n    powerSwitch: int\n    workMode: str\n    manualSpeedLevel: int | None\n    fanSpeedLevel: int | None\n    PM1: int | None\n    PM25: int | None\n    PM10: int | None\n    screenState: int\n    childLockSwitch: int\n    screenSwitch: int\n    scheduleCount: int\n    timerRemain: int\n    humidity: int | None\n    AQI: int | None\n    AQLevel: int | None\n    temperature: int | None\n    VOC: int | None\n    CO2: int | None\n    errorCode: int\n    nightlight: PurifierNightlight | None = None\n    autoPreference: V2AutoPreferences | None = None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.purifier_models.PurifierV2EventTiming","title":"PurifierV2EventTiming  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBaseModel</code></p> <p>Purifier Event Timing Request Dict.</p> Source code in <code>src\\pyvesync\\models\\purifier_models.py</code> <pre><code>@dataclass\nclass PurifierV2EventTiming(RequestBaseModel):\n    \"\"\"Purifier Event Timing Request Dict.\"\"\"\n\n    clkSec: int\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.purifier_models.PurifierV2TimerActionItems","title":"PurifierV2TimerActionItems  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBaseModel</code></p> <p>Purifier Timer Action Items Request Dict.</p> Source code in <code>src\\pyvesync\\models\\purifier_models.py</code> <pre><code>@dataclass\nclass PurifierV2TimerActionItems(RequestBaseModel):\n    \"\"\"Purifier Timer Action Items Request Dict.\"\"\"\n\n    type: str\n    act: int\n    num: int = 0\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.purifier_models.PurifierV2TimerPayloadData","title":"PurifierV2TimerPayloadData  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBaseModel</code></p> <p>Purifier Timer Payload Data Request Dict.</p> Source code in <code>src\\pyvesync\\models\\purifier_models.py</code> <pre><code>@dataclass\nclass PurifierV2TimerPayloadData(RequestBaseModel):\n    \"\"\"Purifier Timer Payload Data Request Dict.\"\"\"\n\n    enabled: bool\n    startAct: list[PurifierV2TimerActionItems]\n    tmgEvt: PurifierV2EventTiming | None = None\n    type: int = 0\n    subDeviceNo: int = 0\n    repeat: int = 0\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.purifier_models.PurifierVitalDetailsResult","title":"PurifierVitalDetailsResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>InnerPurifierBaseResult</code></p> <p>Vital 100S/200S and Everest Purifier Result Model.</p> Source code in <code>src\\pyvesync\\models\\purifier_models.py</code> <pre><code>@dataclass\nclass PurifierVitalDetailsResult(InnerPurifierBaseResult):\n    \"\"\"Vital 100S/200S and Everest Purifier Result Model.\"\"\"\n\n    powerSwitch: int\n    filterLifePercent: int\n    workMode: str\n    manualSpeedLevel: int\n    fanSpeedLevel: int\n    AQLevel: int\n    PM25: int\n    screenState: int\n    childLockSwitch: int\n    screenSwitch: int\n    lightDetectionSwitch: int\n    environmentLightState: int\n    scheduleCount: int\n    timerRemain: int\n    efficientModeTimeRemain: int\n    errorCode: int\n    autoPreference: V2AutoPreferences | None = None\n    fanRotateAngle: int | None = None\n    filterOpenState: int | None = None\n    PM1: int | None = None\n    PM10: int | None = None\n    AQPercent: int | None = None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.purifier_models.RequestPurifier131","title":"RequestPurifier131  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Purifier 131 Request Dict.</p> Source code in <code>src\\pyvesync\\models\\purifier_models.py</code> <pre><code>@dataclass\nclass RequestPurifier131(RequestBypassV1):\n    \"\"\"Purifier 131 Request Dict.\"\"\"\n\n    status: str | None = None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.purifier_models.RequestPurifier131Level","title":"RequestPurifier131Level  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Purifier 131 Request Dict.</p> Source code in <code>src\\pyvesync\\models\\purifier_models.py</code> <pre><code>@dataclass\nclass RequestPurifier131Level(RequestBypassV1):\n    \"\"\"Purifier 131 Request Dict.\"\"\"\n\n    level: int\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.purifier_models.RequestPurifier131Mode","title":"RequestPurifier131Mode  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Purifier 131 Request Dict.</p> Source code in <code>src\\pyvesync\\models\\purifier_models.py</code> <pre><code>@dataclass\nclass RequestPurifier131Mode(RequestBypassV1):\n    \"\"\"Purifier 131 Request Dict.\"\"\"\n\n    mode: str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.purifier_models.ResponsePurifierTimerItems","title":"ResponsePurifierTimerItems  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Purifier Timer Items Response Dict.</p> Source code in <code>src\\pyvesync\\models\\purifier_models.py</code> <pre><code>@dataclass\nclass ResponsePurifierTimerItems(ResponseBaseModel):\n    \"\"\"Purifier Timer Items Response Dict.\"\"\"\n\n    id: int\n    remain: int\n    total: int\n    action: str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.purifier_models.V2AutoPreferences","title":"V2AutoPreferences  <code>dataclass</code>  \u21b2","text":"<p>Vital 100S/200S Auto Preferences.</p> Source code in <code>src\\pyvesync\\models\\purifier_models.py</code> <pre><code>@dataclass\nclass V2AutoPreferences:\n    \"\"\"Vital 100S/200S Auto Preferences.\"\"\"\n\n    autoPreferenceType: str\n    roomSize: int\n</code></pre>"},{"location":"development/data_models/#switch-models","title":"Switch Models\u21b2","text":"<p>Data models for VeSync switches.</p> <p>These models inherit from <code>ResponseBaseModel</code> and <code>RequestBaseModel</code> from the <code>base_models</code> module.</p>"},{"location":"development/data_models/#pyvesync.models.switch_models-classes","title":"Classes\u21b2","text":""},{"location":"development/data_models/#pyvesync.models.switch_models.InternalDimmerDetailsResult","title":"InternalDimmerDetailsResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Dimmer Details Result Dict.</p> Source code in <code>src\\pyvesync\\models\\switch_models.py</code> <pre><code>@dataclass\nclass InternalDimmerDetailsResult(ResponseBaseModel):\n    \"\"\"Dimmer Details Result Dict.\"\"\"\n\n    devicename: str\n    brightness: int\n    indicatorlightStatus: str\n    rgbStatus: str\n    rgbValue: DimmerRGB\n    deviceStatus: str\n    connectionStatus: str\n    activeTime: int = 0\n    timer: Any | None = None\n    schedule: Any | None = None\n    deviceImg: str | None = None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.switch_models.InternalSwitchResult","title":"InternalSwitchResult  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Dimmer Status Response Dict.</p> Source code in <code>src\\pyvesync\\models\\switch_models.py</code> <pre><code>@dataclass\nclass InternalSwitchResult(ResponseBaseModel):\n    \"\"\"Dimmer Status Response Dict.\"\"\"\n\n    deviceStatus: str\n    connectionStatus: str\n    activeTime: int\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.switch_models.RequestDimmerBrightness","title":"RequestDimmerBrightness  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Dimmer Status Request Dict.</p> Source code in <code>src\\pyvesync\\models\\switch_models.py</code> <pre><code>@dataclass\nclass RequestDimmerBrightness(RequestBypassV1):\n    \"\"\"Dimmer Status Request Dict.\"\"\"\n\n    brightness: str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.switch_models.RequestDimmerDetails","title":"RequestDimmerDetails  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Dimmer Details Request Dict.</p> Source code in <code>src\\pyvesync\\models\\switch_models.py</code> <pre><code>@dataclass\nclass RequestDimmerDetails(RequestBypassV1):\n    \"\"\"Dimmer Details Request Dict.\"\"\"\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.switch_models.RequestDimmerStatus","title":"RequestDimmerStatus  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Dimmer Status Request Dict.</p> Source code in <code>src\\pyvesync\\models\\switch_models.py</code> <pre><code>@dataclass\nclass RequestDimmerStatus(RequestBypassV1):\n    \"\"\"Dimmer Status Request Dict.\"\"\"\n\n    status: str\n    rgbValue: dict | None = None\n\n    class Config(BaseConfig):  # type: ignore[override]\n        \"\"\"Dimmer Indicator Control Config Dict.\"\"\"\n\n        omit_none = True\n        omit_default = True\n        orjson_options = orjson.OPT_NON_STR_KEYS\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.switch_models.RequestSwitchBase","title":"RequestSwitchBase  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Base Dimmer Request Dict.</p> <p>Inherits from RequestBypassV1 to include the common fields for all requests.</p> Source code in <code>src\\pyvesync\\models\\switch_models.py</code> <pre><code>@dataclass\nclass RequestSwitchBase(RequestBypassV1):\n    \"\"\"Base Dimmer Request Dict.\n\n    Inherits from RequestBypassV1 to include the common fields for all requests.\n    \"\"\"\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.switch_models.RequestSwitchStatus","title":"RequestSwitchStatus  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>RequestBypassV1</code></p> <p>Dimmer Details Request Dict.</p> Source code in <code>src\\pyvesync\\models\\switch_models.py</code> <pre><code>@dataclass\nclass RequestSwitchStatus(RequestBypassV1):\n    \"\"\"Dimmer Details Request Dict.\"\"\"\n\n    status: str\n    switchNo: int\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.switch_models.ResponseSwitchDetails","title":"ResponseSwitchDetails  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseCodeModel</code></p> <p>Dimmer and Wall Switch Details Response Dict.</p> Source code in <code>src\\pyvesync\\models\\switch_models.py</code> <pre><code>@dataclass\nclass ResponseSwitchDetails(ResponseCodeModel):\n    \"\"\"Dimmer and Wall Switch Details Response Dict.\"\"\"\n\n    result: InternalDimmerDetailsResult | InternalSwitchResult | None = None\n</code></pre>"},{"location":"development/data_models/#fryer-models","title":"Fryer Models\u21b2","text":"<p>Data models for VeSync air fryers.</p>"},{"location":"development/data_models/#pyvesync.models.fryer_models-classes","title":"Classes\u21b2","text":""},{"location":"development/data_models/#pyvesync.models.fryer_models.FryerBaseReturnStatus","title":"FryerBaseReturnStatus  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Result returnStatus model for air fryer status.</p> Source code in <code>src\\pyvesync\\models\\fryer_models.py</code> <pre><code>@dataclass\nclass FryerBaseReturnStatus(ResponseBaseModel):\n    \"\"\"Result returnStatus model for air fryer status.\"\"\"\n\n    cookStatus: str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.fryer_models.FryerCookingReturnStatus","title":"FryerCookingReturnStatus  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Result returnStatus model for air fryer status.</p> Source code in <code>src\\pyvesync\\models\\fryer_models.py</code> <pre><code>@dataclass\nclass FryerCookingReturnStatus(ResponseBaseModel):\n    \"\"\"Result returnStatus model for air fryer status.\"\"\"\n\n    currentTemp: int\n    cookSetTemp: int\n    mode: str\n    cookSetTime: int\n    cookLastTime: int\n    cookStatus: str\n    tempUnit: str\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.fryer_models.ResultFryerDetails","title":"ResultFryerDetails  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>ResponseBaseModel</code></p> <p>Result model for air fryer details.</p> Source code in <code>src\\pyvesync\\models\\fryer_models.py</code> <pre><code>@dataclass\nclass ResultFryerDetails(ResponseBaseModel):\n    \"\"\"Result model for air fryer details.\"\"\"\n\n    returnStatus: FryerCookingReturnStatus | FryerBaseReturnStatus | None = None\n</code></pre>"},{"location":"development/data_models/#thermostat-models","title":"Thermostat Models\u21b2","text":"<p>Data models for VeSync thermostats.</p>"},{"location":"development/data_models/#pyvesync.models.thermostat_models-classes","title":"Classes\u21b2","text":""},{"location":"development/data_models/#pyvesync.models.thermostat_models.ResultThermostatDetails","title":"ResultThermostatDetails  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>BypassV2InnerResult</code></p> <p>Result model for thermostat details.</p> Source code in <code>src\\pyvesync\\models\\thermostat_models.py</code> <pre><code>@dataclass\nclass ResultThermostatDetails(BypassV2InnerResult):\n    \"\"\"Result model for thermostat details.\"\"\"\n\n    supportMode: list[int]\n    workMode: int\n    workStatus: int\n    fanMode: int\n    fanStatus: int\n    tempUnit: str\n    temperature: float\n    humidity: int\n    heatToTemp: int\n    coolToTemp: int\n    lockStatus: bool\n    scheduleOrHold: int\n    holdEndTime: int\n    holdOption: int\n    deadband: int\n    ecoType: int\n    alertStatus: int\n    routines: list[ThermostatSimpleRoutine]\n    routineRunningId: int | None = None\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.thermostat_models.ThermostatAlarm","title":"ThermostatAlarm  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DataClassORJSONMixin</code></p> <p>Model for thermostat alarm.</p> Source code in <code>src\\pyvesync\\models\\thermostat_models.py</code> <pre><code>@dataclass\nclass ThermostatAlarm(DataClassORJSONMixin):\n    \"\"\"Model for thermostat alarm.\"\"\"\n\n    code: int\n    enabled: bool\n    code_name: str | None = None\n    aux_runtime_limit: int | None = field(\n        default=None, metadata=field_options(alias='auxRunTimeLimit')\n    )\n\n    @classmethod\n    def __post_deserialize__(  # type: ignore[override]\n        cls, obj: ThermostatAlarm\n    ) -&gt; ThermostatAlarm:\n        \"\"\"Post-deserialization processing.\"\"\"\n        if obj.code is not None:\n            obj.code_name = ThermostatConst.AlarmCode(obj.code).name\n        return obj\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.thermostat_models.ThermostatMinorDetails","title":"ThermostatMinorDetails  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DataClassORJSONMixin</code></p> <p>Model for thermostat minor details.</p> Source code in <code>src\\pyvesync\\models\\thermostat_models.py</code> <pre><code>@dataclass\nclass ThermostatMinorDetails(DataClassORJSONMixin):\n    \"\"\"Model for thermostat minor details.\"\"\"\n\n    mcu_version: str = field(metadata=field_options(alias='mcuVersion'))\n    hvac_capacity: int = field(metadata=field_options(alias='hvacCapcity'))\n    timestamp: int = field(metadata=field_options(alias='timeStamp'))\n    time_zone: int = field(metadata=field_options(alias='timeZone'))\n    offset_in_sec: int = field(metadata=field_options(alias='offsetInSec'))\n    time_fmt: int = field(metadata=field_options(alias='timeFmt'))\n    date_fmt: int = field(metadata=field_options(alias='dateFmt'))\n    fan_delay_time: int = field(metadata=field_options(alias='fanDelayTime'))\n    fan_circulation_time: int = field(metadata=field_options(alias='fanCirTime'))\n    hvac_protect_time: int = field(metadata=field_options(alias='hvacProtecTime'))\n    hvac_min_on_time: int = field(metadata=field_options(alias='hvacMinOnTime'))\n    aux_min_on_time: int = field(metadata=field_options(alias='auxMinOnTime'))\n    screen_brightness: int = field(metadata=field_options(alias='screenBrightness'))\n    standby_timeout: int = field(metadata=field_options(alias='standbyTimeOut'))\n    aux_low_temperature: int = field(metadata=field_options(alias='auxLowBalanceTemp'))\n    aux_high_temperature: int = field(metadata=field_options(alias='auxHighBalanceTemp'))\n    keytone: bool = field(metadata=field_options(alias='keyTone'))\n    smart_schedule_enabled: bool = field(\n        metadata=field_options(alias='smartScheduleEnabled')\n    )\n    time_to_temp_enabled: bool = field(metadata=field_options(alias='timeToTempEnabled'))\n    early_on_enabled: bool = field(metadata=field_options(alias='earlyOnEnabled'))\n    reminder_list: list[ThermostatReminder] = field(\n        metadata=field_options(alias='reminderList')\n    )\n    alarm_list: list[ThermostatAlarm] = field(metadata=field_options(alias='alarmList'))\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.thermostat_models.ThermostatReminder","title":"ThermostatReminder  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DataClassORJSONMixin</code></p> <p>Model for thermostat reminder.</p> Source code in <code>src\\pyvesync\\models\\thermostat_models.py</code> <pre><code>@dataclass\nclass ThermostatReminder(DataClassORJSONMixin):\n    \"\"\"Model for thermostat reminder.\"\"\"\n\n    code: int\n    enabled: bool\n    frequency: int\n    code_name: str | None = None\n    last_maintenance_time: int | None = field(\n        default=None, metadata=field_options(alias='lastMaintenTime')\n    )\n\n    @classmethod\n    def __post_deserialize__(  # type: ignore[override]\n        cls, obj: ThermostatReminder\n    ) -&gt; ThermostatReminder:\n        \"\"\"Post-deserialization processing.\"\"\"\n        if isinstance(obj.code, int):\n            obj.code_name = ThermostatConst.ReminderCode(obj.code).name\n        return obj\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.thermostat_models.ThermostatRoutine","title":"ThermostatRoutine  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DataClassORJSONMixin</code></p> <p>Model for full thermostat routine.</p> Source code in <code>src\\pyvesync\\models\\thermostat_models.py</code> <pre><code>@dataclass\nclass ThermostatRoutine(DataClassORJSONMixin):\n    \"\"\"Model for full thermostat routine.\"\"\"\n\n    name: str\n    routineId: int\n    type: int\n    heatToTemp: int\n    coolToTemp: int\n    heatFanMode: int\n    coolFanMode: int\n    usuallyMask: int\n    sensorIds: list[str]\n</code></pre>"},{"location":"development/data_models/#pyvesync.models.thermostat_models.ThermostatSimpleRoutine","title":"ThermostatSimpleRoutine  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DataClassORJSONMixin</code></p> <p>Thermostat routine model.</p> Source code in <code>src\\pyvesync\\models\\thermostat_models.py</code> <pre><code>@dataclass\nclass ThermostatSimpleRoutine(DataClassORJSONMixin):\n    \"\"\"Thermostat routine model.\"\"\"\n\n    name: str\n    routineId: int\n</code></pre>"},{"location":"development/device_container/","title":"Device Container\u21b2","text":""},{"location":"development/device_container/#pyvesync.device_container","title":"pyvesync.device_container \u21b2","text":"<p>Module to contain VeSync device instances.</p> <p>Attributes:</p> Name Type Description <code>DeviceContainerInstance</code> <code>DeviceContainer</code> <p>Singleton instance of the DeviceContainer class. This is imported by the <code>vesync</code> module.</p> <p>Classes:</p> Name Description <code>DeviceContainer</code> <p>Container for VeSync device instances. This class should not be instantiated directly. Use the <code>DeviceContainerInstance</code> instead.</p> <code>_DeviceContainerBase</code> <p>Base class for VeSync device container. Inherits from <code>MutableSet</code>.</p>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainerInstance","title":"DeviceContainerInstance  <code>module-attribute</code>  \u21b2","text":"<pre><code>DeviceContainerInstance = DeviceContainer()\n</code></pre> <p>Singleton instance of the DeviceContainer class.</p> <p>This attribute should be imported by the <code>vesync</code> module and not the <code>DeviceContainer</code> class directly.</p>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer","title":"pyvesync.device_container.DeviceContainer \u21b2","text":"<p>               Bases: <code>_DeviceContainerBase</code></p> <p>Container for VeSync device instances.</p> <p>Warning</p> <p>type: warning</p> <p>This class should not be instantiated directly. Use the <code>DeviceContainerInstance</code> instead.</p> <p>The <code>DeviceContainer</code> class is a container for VeSync device instances that inherits behavior from <code>MutableSet</code>. The container contains all VeSync devices and is used to store and manage device instances. The container is a singleton and is instantiated directly by the <code>DeviceContainerInstance</code> in the <code>device_container</code> module and imported as needed.</p> <p>Use the <code>add_new_devices</code> class method to add devices from the device list model API response and <code>remove_stale_devices</code> to remove stale devices from the device list API response model. The device list response model is built in the VeSync.get_devices() method.</p> <p>Parameters:</p> Name Type Description Default <code>sequence</code> <code>Sequence[VeSyncBaseDevice] | None</code> <p>A sequence of device instances to initialize the container with. Typically this is not used directly, defaults to None.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>_data</code> <code>set[VeSyncBaseDevice]</code> <p>The mutable set of devices in the container.</p> Source code in <code>src\\pyvesync\\device_container.py</code> <pre><code>class DeviceContainer(_DeviceContainerBase):\n    \"\"\"Container for VeSync device instances.\n\n    /// admonition | Warning\n    type: warning\n\n    This class should not be instantiated directly. Use the `DeviceContainerInstance`\n    instead.\n    ///\n\n    The `DeviceContainer` class is a container for VeSync device instances that\n    inherits behavior from `MutableSet`. The container contains all VeSync devices\n    and is used to store and manage device instances. The container is a singleton\n    and is instantiated directly by the `DeviceContainerInstance` in the\n    `device_container` module and imported as needed.\n\n    Use the [`add_new_devices`][pyvesync.device_container.DeviceContainer.add_new_devices]\n    class method to add devices from the device list model API response and\n    `remove_stale_devices` to remove stale devices from the device list API response\n    model. The device list response model is built in the\n    [VeSync.get_devices()][pyvesync.vesync.VeSync.get_devices] method.\n\n    Args:\n        sequence (Sequence[VeSyncBaseDevice] | None): A sequence of device instances to\n            initialize the container with. Typically this is not used directly,\n            defaults to None.\n\n    Attributes:\n        _data (set[VeSyncBaseDevice]): The mutable set of devices in the container.\n    \"\"\"\n\n    __slots__ = ()\n\n    def __init__(\n        self,\n        sequence: Sequence[VeSyncBaseDevice] | None = None,\n        /,\n    ) -&gt; None:\n        \"\"\"Initialize the DeviceContainer class.\"\"\"\n        super().__init__(sequence)\n\n    def _build_device_instance(\n        self, device: ResponseDeviceDetailsModel, manager: VeSync\n    ) -&gt; VeSyncBaseDevice | None:\n        \"\"\"Create a device from a single device model from the device list.\n\n        Args:\n            device (ResponseDeviceDetailsModel): The device details model from the\n                device list response model.\n            manager (VeSync): The VeSync instance to pass to the device instance\n\n        Returns:\n            VeSyncBaseDevice: The device instance created from the device list\n                response model.\n\n        Raises:\n            VeSyncAPIResponseError: If the model is not an instance of\n                `ResponseDeviceDetailsModel`.\n        \"\"\"\n        device_features = get_device_config(device.deviceType)\n        if device_features is None:\n            logger.debug('Device type %s not found in device map', device.deviceType)\n            return None\n        dev_class = device_features.class_name\n        dev_module = device_features.module\n        device.productType = device_features.product_type\n        # Import via string to avoid circular imports\n        cls = getattr(dev_module, dev_class)\n        return cls(device, manager, device_features)\n\n    def add_device_from_model(\n        self, device: ResponseDeviceDetailsModel, manager: VeSync\n    ) -&gt; None:\n        \"\"\"Add a single device from the device list response model.\n\n        Args:\n            device (ResponseDeviceDetailsModel): The device details model from the\n                device list response model.\n            manager (VeSync): The VeSync instance to pass to the device instance\n\n        Raises:\n            VeSyncAPIResponseError: If the model is not an instance of\n                `ResponseDeviceDetailsModel`.\n        \"\"\"\n        device_obj = self._build_device_instance(device, manager)\n        if device_obj is not None:\n            self.add(device_obj)\n\n    def device_exists(self, cid: str, sub_device_no: int | None = None) -&gt; bool:\n        \"\"\"Check if a device with the given cid &amp; sub_dev_no exists.\n\n        Args:\n            cid (str): The cid of the device to check.\n            sub_device_no (int): The sub_device_no of the device to check, defaults to 0\n                for most devices.\n\n        Returns:\n            bool: True if the device exists, False otherwise.\n        \"\"\"\n        new_hash = hash(cid + str(sub_device_no))\n        return any(new_hash == hash(dev) for dev in self._data)\n\n    def get_by_name(self, name: str, fuzzy: bool = False) -&gt; VeSyncBaseDevice | None:\n        \"\"\"Forgiving method to get a device by name.\n\n        Args:\n            name (str): The name of the device to get.\n            fuzzy (bool): Use a fuzzy match to find the device. Defaults to False.\n\n        Returns:\n            VeSyncBaseDevice | None: The device instance if found, None otherwise.\n\n        Note:\n            Fuzzy matching removes all non-alphanumeric characters and makes the string\n            lowercase. If there are multiple devices with the same name, the first one\n            found will be returned (a set is unordered).\n        \"\"\"\n        for device in self._data:\n            if (fuzzy and _clean_string(device.device_name) == _clean_string(name)) or (\n                device.device_name == name\n            ):\n                return device\n        return None\n\n    def remove_by_cid(self, cid: str) -&gt; bool:\n        \"\"\"Remove a device by cid.\n\n        Args:\n            cid (str): The cid of the device to remove.\n\n        Returns:\n            bool : True if the device was removed, False otherwise.\n        \"\"\"\n        device_found: VeSyncBaseDevice | None = None\n        for device in self._data:\n            if device.cid == cid:\n                device_found = device\n                break\n        if device_found is not None:\n            self.remove(device_found)\n            return True\n        return False\n\n    def discard(self, value: VeSyncBaseDevice) -&gt; None:\n        \"\"\"Discard a device from the container.\n\n        Args:\n            value (VeSyncBaseDevice): The device to discard.\n        \"\"\"\n        return self._data.discard(value)\n\n    def remove_stale_devices(self, device_list_result: ResponseDeviceListModel) -&gt; None:\n        \"\"\"Remove devices that are not in the provided list.\n\n        Args:\n            device_list_result (ResponseDeviceListModel): The device list response model\n                from the VeSync API. This is generated by the `VeSync.get_devices()`\n                method.\n        \"\"\"\n        device_list = device_list_result.result.list\n        new_hashes = [\n            hash(device.cid + str(device.subDeviceNo)) for device in device_list\n        ]\n        remove_cids = []\n        for device in self._data:\n            if hash(device) not in new_hashes:\n                logger.debug('Removing stale device %s', device.device_name)\n                remove_cids.append(device.cid)\n        for cid in remove_cids:\n            self.remove_by_cid(cid)\n\n    def add_new_devices(\n        self, device_list_result: ResponseDeviceListModel, manager: VeSync\n    ) -&gt; None:\n        \"\"\"Add new devices to the container.\n\n        Args:\n            device_list_result (ResponseDeviceListModel): The device list response model\n                from the VeSync API. This is generated by the `VeSync.get_devices()`\n                method.\n            manager (VeSync): The VeSync instance to pass to the device instance\n        \"\"\"\n        device_list = device_list_result.result.list\n        for device in device_list:\n            if self.device_exists(device.cid, device.subDeviceNo) not in self._data:\n                self.add_device_from_model(device, manager)\n\n    @property\n    def outlets(self) -&gt; list[VeSyncOutlet]:\n        \"\"\"Return a list of devices that are outlets.\"\"\"\n        return [\n            device\n            for device in self\n            if isinstance(device, VeSyncOutlet)\n            and device.product_type == ProductTypes.OUTLET\n        ]\n\n    @property\n    def switches(self) -&gt; list[VeSyncSwitch]:\n        \"\"\"Return a list of devices that are switches.\"\"\"\n        return [\n            device\n            for device in self\n            if (\n                isinstance(device, VeSyncSwitch)\n                and device.product_type == ProductTypes.SWITCH\n            )\n        ]\n\n    @property\n    def bulbs(self) -&gt; list[VeSyncBulb]:\n        \"\"\"Return a list of devices that are lights.\"\"\"\n        return [\n            device\n            for device in self\n            if isinstance(device, VeSyncBulb)\n            and (device.product_type == ProductTypes.BULB)\n        ]\n\n    @property\n    def air_purifiers(self) -&gt; list[VeSyncPurifier]:\n        \"\"\"Return a list of devices that are air purifiers.\"\"\"\n        return [\n            device\n            for device in self\n            if isinstance(device, VeSyncPurifier)\n            and device.product_type == ProductTypes.PURIFIER\n        ]\n\n    @property\n    def fans(self) -&gt; list[VeSyncFanBase]:\n        \"\"\"Return a list of devices that are fans.\"\"\"\n        return [\n            device\n            for device in self\n            if isinstance(device, VeSyncFanBase)\n            and device.product_type == ProductTypes.FAN\n        ]\n\n    @property\n    def humidifiers(self) -&gt; list[VeSyncHumidifier]:\n        \"\"\"Return a list of devices that are humidifiers.\"\"\"\n        return [\n            device\n            for device in self\n            if isinstance(device, VeSyncHumidifier)\n            and device.product_type == ProductTypes.HUMIDIFIER\n        ]\n\n    @property\n    def air_fryers(self) -&gt; list[VeSyncFryer]:\n        \"\"\"Return a list of devices that are air fryers.\"\"\"\n        return [\n            device\n            for device in self\n            if isinstance(device, VeSyncFryer)\n            and device.product_type == ProductTypes.AIR_FRYER\n        ]\n\n    @property\n    def thermostats(self) -&gt; list[VeSyncThermostat]:\n        \"\"\"Return a list of devices that are thermostats.\"\"\"\n        return [\n            device\n            for device in self\n            if isinstance(device, VeSyncThermostat)\n            and device.product_type == ProductTypes.THERMOSTAT\n        ]\n</code></pre>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer.__slots__","title":"__slots__  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>__slots__ = ()\n</code></pre> <p>Inherited From <code>_DeviceContainerBase</code></p>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer.outlets","title":"outlets  <code>property</code>  \u21b2","text":"<pre><code>outlets: list[VeSyncOutlet]\n</code></pre> <p>Return a list of devices that are outlets.</p>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer.switches","title":"switches  <code>property</code>  \u21b2","text":"<pre><code>switches: list[VeSyncSwitch]\n</code></pre> <p>Return a list of devices that are switches.</p>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer.bulbs","title":"bulbs  <code>property</code>  \u21b2","text":"<pre><code>bulbs: list[VeSyncBulb]\n</code></pre> <p>Return a list of devices that are lights.</p>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer.air_purifiers","title":"air_purifiers  <code>property</code>  \u21b2","text":"<pre><code>air_purifiers: list[VeSyncPurifier]\n</code></pre> <p>Return a list of devices that are air purifiers.</p>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer.fans","title":"fans  <code>property</code>  \u21b2","text":"<pre><code>fans: list[VeSyncFanBase]\n</code></pre> <p>Return a list of devices that are fans.</p>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer.humidifiers","title":"humidifiers  <code>property</code>  \u21b2","text":"<pre><code>humidifiers: list[VeSyncHumidifier]\n</code></pre> <p>Return a list of devices that are humidifiers.</p>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer.air_fryers","title":"air_fryers  <code>property</code>  \u21b2","text":"<pre><code>air_fryers: list[VeSyncFryer]\n</code></pre> <p>Return a list of devices that are air fryers.</p>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer.thermostats","title":"thermostats  <code>property</code>  \u21b2","text":"<pre><code>thermostats: list[VeSyncThermostat]\n</code></pre> <p>Return a list of devices that are thermostats.</p>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer.__init__","title":"__init__ \u21b2","text":"<pre><code>__init__(\n    sequence: Sequence[VeSyncBaseDevice] | None = None,\n) -&gt; None\n</code></pre> <p>Inherited From <code>_DeviceContainerBase</code></p> <p>Initialize the DeviceContainer class.</p> <p>Initialize the DeviceContainer class.</p> Source code in <code>src\\pyvesync\\device_container.py</code> <pre><code>def __init__(\n    self,\n    sequence: Sequence[VeSyncBaseDevice] | None = None,\n    /,\n) -&gt; None:\n    \"\"\"Initialize the DeviceContainer class.\"\"\"\n    super().__init__(sequence)\n</code></pre>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer._build_device_instance","title":"_build_device_instance \u21b2","text":"<pre><code>_build_device_instance(\n    device: ResponseDeviceDetailsModel, manager: VeSync\n) -&gt; VeSyncBaseDevice | None\n</code></pre> <p>Create a device from a single device model from the device list.</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>ResponseDeviceDetailsModel</code> <p>The device details model from the device list response model.</p> required <code>manager</code> <code>VeSync</code> <p>The VeSync instance to pass to the device instance</p> required <p>Returns:</p> Name Type Description <code>VeSyncBaseDevice</code> <code>VeSyncBaseDevice | None</code> <p>The device instance created from the device list response model.</p> <p>Raises:</p> Type Description <code>VeSyncAPIResponseError</code> <p>If the model is not an instance of <code>ResponseDeviceDetailsModel</code>.</p> Source code in <code>src\\pyvesync\\device_container.py</code> <pre><code>def _build_device_instance(\n    self, device: ResponseDeviceDetailsModel, manager: VeSync\n) -&gt; VeSyncBaseDevice | None:\n    \"\"\"Create a device from a single device model from the device list.\n\n    Args:\n        device (ResponseDeviceDetailsModel): The device details model from the\n            device list response model.\n        manager (VeSync): The VeSync instance to pass to the device instance\n\n    Returns:\n        VeSyncBaseDevice: The device instance created from the device list\n            response model.\n\n    Raises:\n        VeSyncAPIResponseError: If the model is not an instance of\n            `ResponseDeviceDetailsModel`.\n    \"\"\"\n    device_features = get_device_config(device.deviceType)\n    if device_features is None:\n        logger.debug('Device type %s not found in device map', device.deviceType)\n        return None\n    dev_class = device_features.class_name\n    dev_module = device_features.module\n    device.productType = device_features.product_type\n    # Import via string to avoid circular imports\n    cls = getattr(dev_module, dev_class)\n    return cls(device, manager, device_features)\n</code></pre>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer.add_device_from_model","title":"add_device_from_model \u21b2","text":"<pre><code>add_device_from_model(\n    device: ResponseDeviceDetailsModel, manager: VeSync\n) -&gt; None\n</code></pre> <p>Add a single device from the device list response model.</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>ResponseDeviceDetailsModel</code> <p>The device details model from the device list response model.</p> required <code>manager</code> <code>VeSync</code> <p>The VeSync instance to pass to the device instance</p> required <p>Raises:</p> Type Description <code>VeSyncAPIResponseError</code> <p>If the model is not an instance of <code>ResponseDeviceDetailsModel</code>.</p> Source code in <code>src\\pyvesync\\device_container.py</code> <pre><code>def add_device_from_model(\n    self, device: ResponseDeviceDetailsModel, manager: VeSync\n) -&gt; None:\n    \"\"\"Add a single device from the device list response model.\n\n    Args:\n        device (ResponseDeviceDetailsModel): The device details model from the\n            device list response model.\n        manager (VeSync): The VeSync instance to pass to the device instance\n\n    Raises:\n        VeSyncAPIResponseError: If the model is not an instance of\n            `ResponseDeviceDetailsModel`.\n    \"\"\"\n    device_obj = self._build_device_instance(device, manager)\n    if device_obj is not None:\n        self.add(device_obj)\n</code></pre>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer.device_exists","title":"device_exists \u21b2","text":"<pre><code>device_exists(\n    cid: str, sub_device_no: int | None = None\n) -&gt; bool\n</code></pre> <p>Check if a device with the given cid &amp; sub_dev_no exists.</p> <p>Parameters:</p> Name Type Description Default <code>cid</code> <code>str</code> <p>The cid of the device to check.</p> required <code>sub_device_no</code> <code>int</code> <p>The sub_device_no of the device to check, defaults to 0 for most devices.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the device exists, False otherwise.</p> Source code in <code>src\\pyvesync\\device_container.py</code> <pre><code>def device_exists(self, cid: str, sub_device_no: int | None = None) -&gt; bool:\n    \"\"\"Check if a device with the given cid &amp; sub_dev_no exists.\n\n    Args:\n        cid (str): The cid of the device to check.\n        sub_device_no (int): The sub_device_no of the device to check, defaults to 0\n            for most devices.\n\n    Returns:\n        bool: True if the device exists, False otherwise.\n    \"\"\"\n    new_hash = hash(cid + str(sub_device_no))\n    return any(new_hash == hash(dev) for dev in self._data)\n</code></pre>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer.get_by_name","title":"get_by_name \u21b2","text":"<pre><code>get_by_name(\n    name: str, fuzzy: bool = False\n) -&gt; VeSyncBaseDevice | None\n</code></pre> <p>Forgiving method to get a device by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the device to get.</p> required <code>fuzzy</code> <code>bool</code> <p>Use a fuzzy match to find the device. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>VeSyncBaseDevice | None</code> <p>VeSyncBaseDevice | None: The device instance if found, None otherwise.</p> Note <p>Fuzzy matching removes all non-alphanumeric characters and makes the string lowercase. If there are multiple devices with the same name, the first one found will be returned (a set is unordered).</p> Source code in <code>src\\pyvesync\\device_container.py</code> <pre><code>def get_by_name(self, name: str, fuzzy: bool = False) -&gt; VeSyncBaseDevice | None:\n    \"\"\"Forgiving method to get a device by name.\n\n    Args:\n        name (str): The name of the device to get.\n        fuzzy (bool): Use a fuzzy match to find the device. Defaults to False.\n\n    Returns:\n        VeSyncBaseDevice | None: The device instance if found, None otherwise.\n\n    Note:\n        Fuzzy matching removes all non-alphanumeric characters and makes the string\n        lowercase. If there are multiple devices with the same name, the first one\n        found will be returned (a set is unordered).\n    \"\"\"\n    for device in self._data:\n        if (fuzzy and _clean_string(device.device_name) == _clean_string(name)) or (\n            device.device_name == name\n        ):\n            return device\n    return None\n</code></pre>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer.remove_by_cid","title":"remove_by_cid \u21b2","text":"<pre><code>remove_by_cid(cid: str) -&gt; bool\n</code></pre> <p>Remove a device by cid.</p> <p>Parameters:</p> Name Type Description Default <code>cid</code> <code>str</code> <p>The cid of the device to remove.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the device was removed, False otherwise.</p> Source code in <code>src\\pyvesync\\device_container.py</code> <pre><code>def remove_by_cid(self, cid: str) -&gt; bool:\n    \"\"\"Remove a device by cid.\n\n    Args:\n        cid (str): The cid of the device to remove.\n\n    Returns:\n        bool : True if the device was removed, False otherwise.\n    \"\"\"\n    device_found: VeSyncBaseDevice | None = None\n    for device in self._data:\n        if device.cid == cid:\n            device_found = device\n            break\n    if device_found is not None:\n        self.remove(device_found)\n        return True\n    return False\n</code></pre>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer.discard","title":"discard \u21b2","text":"<pre><code>discard(value: VeSyncBaseDevice) -&gt; None\n</code></pre> <p>Discard a device from the container.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>VeSyncBaseDevice</code> <p>The device to discard.</p> required Source code in <code>src\\pyvesync\\device_container.py</code> <pre><code>def discard(self, value: VeSyncBaseDevice) -&gt; None:\n    \"\"\"Discard a device from the container.\n\n    Args:\n        value (VeSyncBaseDevice): The device to discard.\n    \"\"\"\n    return self._data.discard(value)\n</code></pre>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer.remove_stale_devices","title":"remove_stale_devices \u21b2","text":"<pre><code>remove_stale_devices(\n    device_list_result: ResponseDeviceListModel,\n) -&gt; None\n</code></pre> <p>Remove devices that are not in the provided list.</p> <p>Parameters:</p> Name Type Description Default <code>device_list_result</code> <code>ResponseDeviceListModel</code> <p>The device list response model from the VeSync API. This is generated by the <code>VeSync.get_devices()</code> method.</p> required Source code in <code>src\\pyvesync\\device_container.py</code> <pre><code>def remove_stale_devices(self, device_list_result: ResponseDeviceListModel) -&gt; None:\n    \"\"\"Remove devices that are not in the provided list.\n\n    Args:\n        device_list_result (ResponseDeviceListModel): The device list response model\n            from the VeSync API. This is generated by the `VeSync.get_devices()`\n            method.\n    \"\"\"\n    device_list = device_list_result.result.list\n    new_hashes = [\n        hash(device.cid + str(device.subDeviceNo)) for device in device_list\n    ]\n    remove_cids = []\n    for device in self._data:\n        if hash(device) not in new_hashes:\n            logger.debug('Removing stale device %s', device.device_name)\n            remove_cids.append(device.cid)\n    for cid in remove_cids:\n        self.remove_by_cid(cid)\n</code></pre>"},{"location":"development/device_container/#pyvesync.device_container.DeviceContainer.add_new_devices","title":"add_new_devices \u21b2","text":"<pre><code>add_new_devices(\n    device_list_result: ResponseDeviceListModel,\n    manager: VeSync,\n) -&gt; None\n</code></pre> <p>Add new devices to the container.</p> <p>Parameters:</p> Name Type Description Default <code>device_list_result</code> <code>ResponseDeviceListModel</code> <p>The device list response model from the VeSync API. This is generated by the <code>VeSync.get_devices()</code> method.</p> required <code>manager</code> <code>VeSync</code> <p>The VeSync instance to pass to the device instance</p> required Source code in <code>src\\pyvesync\\device_container.py</code> <pre><code>def add_new_devices(\n    self, device_list_result: ResponseDeviceListModel, manager: VeSync\n) -&gt; None:\n    \"\"\"Add new devices to the container.\n\n    Args:\n        device_list_result (ResponseDeviceListModel): The device list response model\n            from the VeSync API. This is generated by the `VeSync.get_devices()`\n            method.\n        manager (VeSync): The VeSync instance to pass to the device instance\n    \"\"\"\n    device_list = device_list_result.result.list\n    for device in device_list:\n        if self.device_exists(device.cid, device.subDeviceNo) not in self._data:\n            self.add_device_from_model(device, manager)\n</code></pre>"},{"location":"development/device_container/#pyvesync.device_container._DeviceContainerBase","title":"pyvesync.device_container._DeviceContainerBase \u21b2","text":"<p>               Bases: <code>MutableSet[VeSyncBaseDevice]</code></p> <p>Base class for VeSync device container.</p> <p>Inherits from <code>MutableSet</code> and defines the core MutableSet methods.</p> Source code in <code>src\\pyvesync\\device_container.py</code> <pre><code>class _DeviceContainerBase(MutableSet[VeSyncBaseDevice]):\n    \"\"\"Base class for VeSync device container.\n\n    Inherits from `MutableSet` and defines the core MutableSet methods.\n    \"\"\"\n\n    __slots__ = ('__weakref__', '_data')\n\n    def __init__(\n        self,\n        sequence: Sequence[VeSyncBaseDevice] | None = None,\n        /,\n    ) -&gt; None:\n        \"\"\"Initialize the DeviceContainer class.\"\"\"\n        self._data: set[VeSyncBaseDevice] = set()\n        if isinstance(sequence, Sequence):\n            self._data.update(sequence)\n\n    def __iter__(self) -&gt; Iterator[VeSyncBaseDevice]:\n        \"\"\"Iterate over the container.\"\"\"\n        return iter(self._data)\n\n    def __len__(self) -&gt; int:\n        \"\"\"Return the length of the container.\"\"\"\n        return len(self._data)\n\n    def add(self, value: VeSyncBaseDevice) -&gt; None:\n        \"\"\"Add a device to the container.\"\"\"\n        if value in self._data:\n            logger.debug('Device already exists')\n            return\n        self._data.add(value)\n\n    def remove(self, value: VeSyncBaseDevice) -&gt; None:\n        \"\"\"Remove a device from the container.\"\"\"\n        self._data.remove(value)\n\n    def clear(self) -&gt; None:\n        \"\"\"Clear the container.\"\"\"\n        self._data.clear()\n\n    def __contains__(self, value: object) -&gt; bool:\n        \"\"\"Check if a device is in the container.\"\"\"\n        return value in self._data\n</code></pre>"},{"location":"development/device_container/#pyvesync.device_container._DeviceContainerBase.__slots__","title":"__slots__  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>__slots__ = ('__weakref__', '_data')\n</code></pre>"},{"location":"development/device_container/#pyvesync.device_container._DeviceContainerBase._data","title":"_data  <code>instance-attribute</code>  \u21b2","text":"<pre><code>_data: set[VeSyncBaseDevice] = set()\n</code></pre> <p>Inherited From <code>_DeviceContainerBase</code></p>"},{"location":"development/device_container/#pyvesync.device_container._DeviceContainerBase.__init__","title":"__init__ \u21b2","text":"<pre><code>__init__(\n    sequence: Sequence[VeSyncBaseDevice] | None = None,\n) -&gt; None\n</code></pre> <p>Initialize the DeviceContainer class.</p> Source code in <code>src\\pyvesync\\device_container.py</code> <pre><code>def __init__(\n    self,\n    sequence: Sequence[VeSyncBaseDevice] | None = None,\n    /,\n) -&gt; None:\n    \"\"\"Initialize the DeviceContainer class.\"\"\"\n    self._data: set[VeSyncBaseDevice] = set()\n    if isinstance(sequence, Sequence):\n        self._data.update(sequence)\n</code></pre>"},{"location":"development/device_container/#pyvesync.device_container._DeviceContainerBase.__iter__","title":"__iter__ \u21b2","text":"<pre><code>__iter__() -&gt; Iterator[VeSyncBaseDevice]\n</code></pre> <p>Inherited From <code>_DeviceContainerBase</code></p> <p>Iterate over the container.</p> Source code in <code>src\\pyvesync\\device_container.py</code> <pre><code>def __iter__(self) -&gt; Iterator[VeSyncBaseDevice]:\n    \"\"\"Iterate over the container.\"\"\"\n    return iter(self._data)\n</code></pre>"},{"location":"development/device_container/#pyvesync.device_container._DeviceContainerBase.__len__","title":"__len__ \u21b2","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>Inherited From <code>_DeviceContainerBase</code></p> <p>Return the length of the container.</p> Source code in <code>src\\pyvesync\\device_container.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"Return the length of the container.\"\"\"\n    return len(self._data)\n</code></pre>"},{"location":"development/device_container/#pyvesync.device_container._DeviceContainerBase.add","title":"add \u21b2","text":"<pre><code>add(value: VeSyncBaseDevice) -&gt; None\n</code></pre> <p>Inherited From <code>_DeviceContainerBase</code></p> <p>Add a device to the container.</p> Source code in <code>src\\pyvesync\\device_container.py</code> <pre><code>def add(self, value: VeSyncBaseDevice) -&gt; None:\n    \"\"\"Add a device to the container.\"\"\"\n    if value in self._data:\n        logger.debug('Device already exists')\n        return\n    self._data.add(value)\n</code></pre>"},{"location":"development/device_container/#pyvesync.device_container._DeviceContainerBase.remove","title":"remove \u21b2","text":"<pre><code>remove(value: VeSyncBaseDevice) -&gt; None\n</code></pre> <p>Inherited From <code>_DeviceContainerBase</code></p> <p>Remove a device from the container.</p> Source code in <code>src\\pyvesync\\device_container.py</code> <pre><code>def remove(self, value: VeSyncBaseDevice) -&gt; None:\n    \"\"\"Remove a device from the container.\"\"\"\n    self._data.remove(value)\n</code></pre>"},{"location":"development/device_container/#pyvesync.device_container._DeviceContainerBase.clear","title":"clear \u21b2","text":"<pre><code>clear() -&gt; None\n</code></pre> <p>Inherited From <code>_DeviceContainerBase</code></p> <p>Clear the container.</p> Source code in <code>src\\pyvesync\\device_container.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"Clear the container.\"\"\"\n    self._data.clear()\n</code></pre>"},{"location":"development/device_container/#pyvesync.device_container._DeviceContainerBase.__contains__","title":"__contains__ \u21b2","text":"<pre><code>__contains__(value: object) -&gt; bool\n</code></pre> <p>Inherited From <code>_DeviceContainerBase</code></p> <p>Check if a device is in the container.</p> Source code in <code>src\\pyvesync\\device_container.py</code> <pre><code>def __contains__(self, value: object) -&gt; bool:\n    \"\"\"Check if a device is in the container.\"\"\"\n    return value in self._data\n</code></pre>"},{"location":"development/device_map/","title":"VeSync device_map configuration\u21b2","text":""},{"location":"development/device_map/#pyvesync.device_map","title":"pyvesync.device_map \u21b2","text":"<p>Device and module mappings for VeSync devices.</p> <p>To add a new device type to existing module: Add the device_type to the end of the existing dev_types list.</p> <p>This module contains mappings for VeSync devices to their respective classes. The mappings are used to create instances of the appropriate device class based on the device type and define features and modes. The device type is taken from the <code>deviceType</code> field in the device list API.</p> <p>The AirFryerMap, OutletMap, SwitchMap, BulbMap, FanMap, HumidifierMap, PurifierMap and ThermostatMap dataclasses are used to define the mappings for each product type with the assocated module, class, features and other device specific configuration. The <code>get_device_config</code> function is used to get the device map object from the device type to instantiate the appropriate class. The individual <code>get_&lt;product-type&gt;</code> functions are used to get the device details for the specific to the device type. Both functions return the same model, the individual product type functions are used to satisfy type checking in the individual devices.</p> <p>Attributes:</p> Name Type Description <code>outlet_modules</code> <p>list[OutletMap]: List of Outlet device mappings.</p> <code>switch_modules</code> <p>list[SwitchMap]: List of Switch device mappings.</p> <code>bulb_modules</code> <p>list[BulbMap]: List of Bulb device mappings.</p> <code>fan_modules</code> <code>list[FanMap]</code> <p>list[FanMap]: List of Fan device mappings.</p> <code>purifier_modules</code> <code>list[PurifierMap]</code> <p>list[PurifierMap]: List of Purifier device mappings.</p> <code>humidifier_modules</code> <p>list[HumidifierMap]: List of Humidifier device mappings.</p> <code>air_fryer_modules</code> <code>list[AirFryerMap]</code> <p>list[AirFryerMap]: List of Air Fryer device mappings.</p> <code>thermostat_modules</code> <p>list[ThermostatMap]: List of Thermostat device mappings.</p> <p>Classes:</p> Name Description <code>ProductTypes</code> <p>Enum: General device types enum.</p> <code>DeviceMapTemplate</code> <p>Template for DeviceModules mapping.</p> <code>OutletMap</code> <p>Template for Outlet device mapping.</p> <code>SwitchMap</code> <p>Template for Switch device mapping.</p> <code>BulbMap</code> <p>dataclass: Template for Bulb device mapping.</p> <code>FanMap</code> <p>dataclass: Template for Fan device mapping.</p> <code>HumidifierMap</code> <p>dataclass: Template for Humidifier device mapping.</p> <code>PurifierMap</code> <p>dataclass: Template for Purifier device mapping.</p> <code>AirFryerMap</code> <p>dataclass: Template for Air Fryer device mapping.</p> <code>ThermostatMap</code> <p>dataclass: Template for Thermostat device mapping.</p> <p>Functions:</p> Name Description <code>get_device_config</code> <p>Get the device map object from the device type.</p> <code>get_outlet</code> <p>Get outlet device config, returning OutletMap object.</p> <code>get_switch</code> <p>Get switch device config, returning SwitchMap object.</p> <code>get_bulb</code> <p>Get the bulb device config, returning BulbMap object.</p> <code>get_fan</code> <p>Get the fan device config, returning the FanMap object.</p> <code>get_humidifier</code> <p>Get the humidfier config, returning the HumidifierMap object.</p> <code>get_purifier</code> <p>Get the purifier config, returning the PurifierMap object.</p> <code>get_air_fryer</code> <p>Get the Air Fryer config, returning the AirFryerMap object.</p> <code>get_thermostat</code> <p>Get the thermostat config, returning the ThermostatMap object.</p> Note <p>To add devices, add the device mapping to the appropriate <code>&lt;product-type&gt;_modules</code> list, ensuring all required fields are present based on the <code>&lt;product-type&gt;Map</code> fields.</p>"},{"location":"development/device_map/#pyvesync.device_map.T_MAPS","title":"T_MAPS  <code>module-attribute</code>  \u21b2","text":"<pre><code>T_MAPS = Union[\n    list['OutletMap'],\n    list['SwitchMap'],\n    list['BulbMap'],\n    list['FanMap'],\n    list['HumidifierMap'],\n    list['PurifierMap'],\n    list['AirFryerMap'],\n    list['ThermostatMap'],\n]\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.thermostat_modules","title":"thermostat_modules  <code>module-attribute</code>  \u21b2","text":"<pre><code>thermostat_modules = [\n    ThermostatMap(\n        dev_types=['LTM-A401S-WUS'],\n        class_name='VeSyncAuraThermostat',\n        fan_modes=[AUTO, CIRCULATE, ON],\n        modes=[HEAT, COOL, AUTO, OFF, SMART_AUTO, EM_HEAT],\n        eco_types=[\n            BALANCE,\n            COMFORT_FIRST,\n            COMFORT_SECOND,\n            ECO_FIRST,\n            ECO_SECOND,\n        ],\n        hold_options=[\n            PERMANENTLY,\n            FOUR_HOURS,\n            TWO_HOURS,\n            UNTIL_NEXT_SCHEDULED_ITEM,\n        ],\n        routine_types=[AWAY, CUSTOM, HOME, SLEEP],\n        setup_entry='LTM-A401S-WUS',\n        model_display='LTM-A401S Series',\n        model_name='Aura Thermostat',\n    )\n]\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.outlet_modules","title":"outlet_modules  <code>module-attribute</code>  \u21b2","text":"<pre><code>outlet_modules = [\n    OutletMap(\n        dev_types=['wifi-switch-1.3'],\n        class_name='VeSyncOutlet7A',\n        features=[ENERGY_MONITOR],\n        model_name='WiFi Outlet US/CA',\n        model_display='ESW01-USA Series',\n        setup_entry='wifi-switch-1.3',\n    ),\n    OutletMap(\n        dev_types=['ESW10-USA'],\n        class_name='VeSyncESW10USA',\n        features=[],\n        model_name='10A WiFi Outlet USA',\n        model_display='ESW10-USA Series',\n        setup_entry='ESW03-USA',\n    ),\n    OutletMap(\n        dev_types=['ESW01-EU'],\n        class_name='VeSyncOutlet10A',\n        features=[ENERGY_MONITOR],\n        model_name='10A WiFi Outlet Europe',\n        model_display='ESW01-EU',\n        setup_entry='ESW01-EU',\n    ),\n    OutletMap(\n        dev_types=['ESW15-USA'],\n        class_name='VeSyncOutlet15A',\n        features=[ENERGY_MONITOR, NIGHTLIGHT],\n        nightlight_modes=[ON, OFF, AUTO],\n        model_name='15A WiFi Outlet US/CA',\n        model_display='ESW15-USA Series',\n        setup_entry='ESW15-USA',\n    ),\n    OutletMap(\n        dev_types=['ESO15-TB'],\n        class_name='VeSyncOutdoorPlug',\n        features=[ENERGY_MONITOR],\n        model_name='Outdoor Plug',\n        model_display='ESO15-TB Series',\n        setup_entry='ESO15-TB',\n    ),\n    OutletMap(\n        dev_types=[\n            'BSDOG01',\n            'WYSMTOD16A',\n            'WHOGPLUG',\n            'WM-PLUG',\n            'JXUK13APLUG',\n            'WYZYOGMINIPLUG',\n            'BSDOG02',\n            'HWPLUG16A',\n            'FY-PLUG',\n            'HWPLUG16',\n        ],\n        class_name='VeSyncOutletBSDGO1',\n        features=[ONOFF],\n        model_name='Smart Plug',\n        model_display='Smart Plug Series',\n        setup_entry='BSDOG01',\n        device_alias='Greensun Smart Plug',\n    ),\n]\n</code></pre> <p>List of 'OutletMap' configuration objects for outlet devices.</p>"},{"location":"development/device_map/#pyvesync.device_map.switch_modules","title":"switch_modules  <code>module-attribute</code>  \u21b2","text":"<pre><code>switch_modules = [\n    SwitchMap(\n        dev_types=['ESWL01'],\n        class_name='VeSyncWallSwitch',\n        device_alias='Wall Switch',\n        features=[ONOFF],\n        model_name='Light Switch',\n        model_display='ESWL01 Series',\n        setup_entry='ESWL01',\n    ),\n    SwitchMap(\n        dev_types=['ESWD16'],\n        class_name='VeSyncDimmerSwitch',\n        features=[DIMMABLE, INDICATOR_LIGHT, BACKLIGHT_RGB],\n        device_alias='Dimmer Switch',\n        model_name='Dimmer Switch',\n        model_display='ESWD16 Series',\n        setup_entry='ESWD16',\n    ),\n    SwitchMap(\n        dev_types=['ESWL03'],\n        class_name='VeSyncWallSwitch',\n        device_alias='Three-Way Wall Switch',\n        features=[ONOFF],\n        model_name='Light Switch 3 way',\n        model_display='ESWL03 Series',\n        setup_entry='ESWL03',\n    ),\n]\n</code></pre> <p>List of 'SwitchMap' configuration objects for switch devices.</p>"},{"location":"development/device_map/#pyvesync.device_map.bulb_modules","title":"bulb_modules  <code>module-attribute</code>  \u21b2","text":"<pre><code>bulb_modules = [\n    BulbMap(\n        dev_types=['ESL100'],\n        class_name='VeSyncBulbESL100',\n        features=[DIMMABLE],\n        color_model=None,\n        device_alias='Dimmable Bright White Bulb',\n        color_modes=[WHITE],\n        model_display='ESL100 Series',\n        model_name='Soft white light bulb',\n        setup_entry='ESL100',\n    ),\n    BulbMap(\n        dev_types=['ESL100CW'],\n        class_name='VeSyncBulbESL100CW',\n        features=[DIMMABLE, COLOR_TEMP],\n        color_model=None,\n        device_alias='Dimmable Tunable White Bulb',\n        color_modes=[WHITE],\n        model_display='ESL100CW Series',\n        model_name='Cool-to-Warm White Light Bulb',\n        setup_entry='ESL100CW',\n    ),\n    BulbMap(\n        dev_types=['XYD0001'],\n        class_name='VeSyncBulbValcenoA19MC',\n        features=[DIMMABLE, MULTICOLOR, COLOR_TEMP],\n        color_model=HSV,\n        device_alias='Valceno Dimmable RGB Bulb',\n        color_modes=[WHITE, COLOR],\n        model_display='XYD0001',\n        model_name='Valceno WiFi Bulb',\n        setup_entry='XYD0001',\n    ),\n    BulbMap(\n        dev_types=['ESL100MC'],\n        class_name='VeSyncBulbESL100MC',\n        features=[MULTICOLOR, DIMMABLE],\n        color_model=RGB,\n        device_alias='Etekcity Dimmable RGB Bulb',\n        color_modes=[WHITE, COLOR],\n        model_name='Multicolor Bulb',\n        model_display='ESL100MC',\n        setup_entry='ESL100MC',\n    ),\n]\n</code></pre> <p>List of 'BulbMap' configuration objects for bulb devices.</p>"},{"location":"development/device_map/#pyvesync.device_map.humidifier_modules","title":"humidifier_modules  <code>module-attribute</code>  \u21b2","text":"<pre><code>humidifier_modules = [\n    HumidifierMap(\n        class_name='VeSyncHumid200300S',\n        dev_types=[\n            'Classic300S',\n            'LUH-A601S-WUSB',\n            'LUH-A601S-AUSW',\n        ],\n        features=[NIGHTLIGHT, NIGHTLIGHT_BRIGHTNESS],\n        mist_modes={\n            AUTO: 'auto',\n            SLEEP: 'sleep',\n            MANUAL: 'manual',\n        },\n        mist_levels=list(range(1, 10)),\n        device_alias='Classic 300S',\n        model_display='LUH-A601S Series',\n        model_name='Classic 300S',\n        setup_entry='Classic300S',\n    ),\n    HumidifierMap(\n        class_name='VeSyncHumid200S',\n        dev_types=['Classic200S'],\n        features=[],\n        mist_modes={AUTO: 'auto', MANUAL: 'manual'},\n        mist_levels=list(range(1, 10)),\n        device_alias='Classic 200S',\n        model_display='Classic 200S Series',\n        model_name='Classic 200S',\n        setup_entry='Classic200S',\n    ),\n    HumidifierMap(\n        class_name='VeSyncHumid200300S',\n        dev_types=[\n            'Dual200S',\n            'LUH-D301S-WUSR',\n            'LUH-D301S-WJP',\n            'LUH-D301S-WEU',\n            'LUH-D301S-KEUR',\n        ],\n        features=[],\n        mist_modes={AUTO: 'auto', MANUAL: 'manual'},\n        mist_levels=list(range(1, 3)),\n        device_alias='Dual 200S',\n        model_display='LUH-D301S Series',\n        model_name='Dual 200S',\n        setup_entry='Dual200S',\n    ),\n    HumidifierMap(\n        class_name='VeSyncHumid200300S',\n        dev_types=[\n            'LUH-A602S-WUSR',\n            'LUH-A602S-WUS',\n            'LUH-A602S-WEUR',\n            'LUH-A602S-WEU',\n            'LUH-A602S-WJP',\n            'LUH-A602S-WUSC',\n        ],\n        features=[WARM_MIST],\n        mist_modes={\n            AUTO: 'auto',\n            SLEEP: 'sleep',\n            MANUAL: 'manual',\n        },\n        mist_levels=list(range(1, 10)),\n        warm_mist_levels=[0, 1, 2, 3],\n        device_alias='LV600S',\n        model_display='LUH-A602S Series',\n        model_name='LV600S',\n        setup_entry='LUH-A602S-WUS',\n    ),\n    HumidifierMap(\n        class_name='VeSyncHumid200300S',\n        dev_types=['LUH-O451S-WEU'],\n        features=[WARM_MIST],\n        mist_modes={\n            AUTO: 'auto',\n            SLEEP: 'sleep',\n            MANUAL: 'manual',\n        },\n        mist_levels=list(range(1, 10)),\n        warm_mist_levels=list(range(4)),\n        device_alias='OasisMist 450S EU',\n        model_name='OasisMist 4.5L',\n        model_display='LUH-O451S Series',\n        setup_entry='LUH-O451S-WEU',\n    ),\n    HumidifierMap(\n        class_name='VeSyncHumid200300S',\n        dev_types=[\n            'LUH-O451S-WUS',\n            'LUH-O451S-WUSR',\n            'LUH-O601S-WUS',\n            'LUH-O601S-KUS',\n        ],\n        features=[WARM_MIST],\n        mist_modes={\n            AUTO: 'auto',\n            SLEEP: 'sleep',\n            MANUAL: 'manual',\n            HUMIDITY: 'humidity',\n        },\n        mist_levels=list(range(1, 10)),\n        warm_mist_levels=list(range(4)),\n        device_alias='OasisMist 450S',\n        model_display='OasisMist 4.5L Series',\n        model_name='OasisMist 4.5L',\n        setup_entry='LUH-O451S-WUS',\n    ),\n    HumidifierMap(\n        class_name='VeSyncHumid1000S',\n        dev_types=[\n            'LUH-M101S-WUS',\n            'LUH-M101S-WEUR',\n            'LUH-M101S-WUSR',\n        ],\n        features=[],\n        mist_modes={\n            AUTO: 'auto',\n            SLEEP: 'sleep',\n            MANUAL: 'manual',\n        },\n        mist_levels=list(range(1, 10)),\n        device_alias='Oasismist 1000S',\n        model_display='Oasismist Series',\n        model_name='Oasismist 1000S',\n        setup_entry='LUH-M101S',\n    ),\n    HumidifierMap(\n        class_name='VeSyncSuperior6000S',\n        dev_types=[\n            'LEH-S601S-WUS',\n            'LEH-S601S-WUSR',\n            'LEH-S601S-WEUR',\n        ],\n        features=[DRYING_MODE],\n        mist_modes={\n            AUTO: 'autoPro',\n            SLEEP: 'sleep',\n            HUMIDITY: 'humidity',\n            MANUAL: 'manual',\n            AUTOPRO: 'autoPro',\n        },\n        mist_levels=list(range(1, 10)),\n        device_alias='Superior 6000S',\n        model_display='LEH-S601S Series',\n        model_name='Superior 6000S',\n        setup_entry='LEH-S601S',\n    ),\n]\n</code></pre> <p>List of 'HumidifierMap' configuration objects for humidifier devices.</p>"},{"location":"development/device_map/#pyvesync.device_map.purifier_modules","title":"purifier_modules  <code>module-attribute</code>  \u21b2","text":"<pre><code>purifier_modules: list[PurifierMap] = [\n    PurifierMap(\n        class_name='VeSyncAirBypass',\n        dev_types=[\n            'Core200S',\n            'LAP-C201S-AUSR',\n            'LAP-C202S-WUSR',\n        ],\n        modes=[SLEEP, MANUAL],\n        features=[RESET_FILTER, NIGHTLIGHT],\n        auto_preferences=[DEFAULT, EFFICIENT, QUIET],\n        fan_levels=list(range(1, 4)),\n        nightlight_modes=[ON, OFF, DIM],\n        device_alias='Core 200S',\n        model_display='Core 200S',\n        model_name='Core 200S',\n        setup_entry='Core200S',\n    ),\n    PurifierMap(\n        class_name='VeSyncAirBypass',\n        dev_types=[\n            'Core300S',\n            'LAP-C301S-WJP',\n            'LAP-C302S-WUSB',\n            'LAP-C301S-WAAA',\n            'LAP-C302S-WGC',\n        ],\n        modes=[SLEEP, MANUAL, AUTO],\n        auto_preferences=[DEFAULT, EFFICIENT, QUIET],\n        features=[AIR_QUALITY],\n        fan_levels=list(range(1, 5)),\n        device_alias='Core 300S',\n        model_display='Core 300S',\n        model_name='Core 300S',\n        setup_entry='Core300S',\n    ),\n    PurifierMap(\n        class_name='VeSyncAirBypass',\n        dev_types=[\n            'Core400S',\n            'LAP-C401S-WJP',\n            'LAP-C401S-WUSR',\n            'LAP-C401S-WAAA',\n        ],\n        modes=[SLEEP, MANUAL, AUTO],\n        features=[AIR_QUALITY],\n        fan_levels=list(range(1, 5)),\n        device_alias='Core 400S',\n        auto_preferences=[DEFAULT, EFFICIENT, QUIET],\n        model_display='Core 400S',\n        model_name='Core 400S',\n        setup_entry='Core400S',\n    ),\n    PurifierMap(\n        class_name='VeSyncAirBypass',\n        dev_types=[\n            'Core600S',\n            'LAP-C601S-WUS',\n            'LAP-C601S-WUSR',\n            'LAP-C601S-WEU',\n        ],\n        modes=[SLEEP, MANUAL, AUTO],\n        features=[AIR_QUALITY],\n        auto_preferences=[DEFAULT, EFFICIENT, QUIET],\n        fan_levels=list(range(1, 5)),\n        device_alias='Core 600S',\n        model_display='Core 600S',\n        model_name='Core 600S',\n        setup_entry='Core600S',\n    ),\n    PurifierMap(\n        class_name='VeSyncAir131',\n        dev_types=['LV-PUR131S', 'LV-RH131S'],\n        modes=[SLEEP, MANUAL, AUTO],\n        features=[AIR_QUALITY],\n        fan_levels=list(range(1, 4)),\n        device_alias='LV-PUR131S',\n        model_display='LV-PUR131S/RH131S Series',\n        model_name='LV131S',\n        setup_entry='LV-PUR131S',\n    ),\n    PurifierMap(\n        class_name='VeSyncAirBaseV2',\n        dev_types=[\n            'LAP-V102S-AASR',\n            'LAP-V102S-WUS',\n            'LAP-V102S-WEU',\n            'LAP-V102S-AUSR',\n            'LAP-V102S-WJP',\n            'LAP-V102S-AJPR',\n            'LAP-V102S-AEUR',\n        ],\n        modes=[SLEEP, MANUAL, AUTO, PET],\n        features=[AIR_QUALITY],\n        fan_levels=list(range(1, 5)),\n        device_alias='Vital 100S',\n        auto_preferences=[DEFAULT, EFFICIENT, QUIET],\n        model_display='LAP-V102S Series',\n        model_name='Vital 100S',\n        setup_entry='LAP-V102S',\n    ),\n    PurifierMap(\n        class_name='VeSyncAirBaseV2',\n        dev_types=[\n            'LAP-V201S-AASR',\n            'LAP-V201S-WJP',\n            'LAP-V201S-WEU',\n            'LAP-V201S-WUS',\n            'LAP-V201-AUSR',\n            'LAP-V201S-AUSR',\n            'LAP-V201S-AEUR',\n        ],\n        modes=[SLEEP, MANUAL, AUTO, PET],\n        features=[AIR_QUALITY, LIGHT_DETECT],\n        fan_levels=list(range(1, 5)),\n        device_alias='Vital 200S',\n        auto_preferences=[DEFAULT, EFFICIENT, QUIET],\n        model_display='LAP-V201S Series',\n        model_name='Vital 200S',\n        setup_entry='LAP-V201S',\n    ),\n    PurifierMap(\n        class_name='VeSyncAirBaseV2',\n        dev_types=[\n            'LAP-EL551S-AUS',\n            'LAP-EL551S-AEUR',\n            'LAP-EL551S-WEU',\n            'LAP-EL551S-WUS',\n        ],\n        modes=[SLEEP, MANUAL, AUTO, TURBO],\n        features=[AIR_QUALITY, VENT_ANGLE, LIGHT_DETECT],\n        fan_levels=list(range(1, 4)),\n        device_alias='Everest Air',\n        auto_preferences=[DEFAULT, EFFICIENT, QUIET],\n        model_display='LAP-EL551S Series',\n        model_name='Everest Air',\n        setup_entry='EL551S',\n    ),\n    PurifierMap(\n        class_name='VeSyncAirBaseV2',\n        dev_types=[\n            'LAP-B851S-WEU',\n            'LAP-B851S-WNA',\n            'LAP-B851S-AEUR',\n            'LAP-B851S-AUS',\n            'LAP-B851S-WUS',\n            'LAP-BAY-MAX01S',\n        ],\n        modes=[SLEEP, MANUAL, AUTO],\n        features=[AIR_QUALITY, NIGHTLIGHT],\n        fan_levels=list(range(1, 4)),\n        device_alias='Sprout Air Purifier',\n        auto_preferences=[DEFAULT, EFFICIENT, QUIET],\n        model_display='Sprout Air Series',\n        model_name='Sprout Air',\n        setup_entry='LAP-B851S-WUS',\n    ),\n]\n</code></pre> <p>List of 'PurifierMap' configuration objects for purifier devices.</p>"},{"location":"development/device_map/#pyvesync.device_map.fan_modules","title":"fan_modules  <code>module-attribute</code>  \u21b2","text":"<pre><code>fan_modules: list[FanMap] = [\n    FanMap(\n        class_name='VeSyncTowerFan',\n        dev_types=[\n            'LTF-F422S-KEU',\n            'LTF-F422S-WUSR',\n            'LTF-F422_WJP',\n            'LTF-F422S-WUS',\n        ],\n        modes=[NORMAL, TURBO, AUTO, ADVANCED_SLEEP],\n        set_mode_method='setTowerFanMode',\n        features=[OSCILLATION, DISPLAYING_TYPE, SOUND],\n        fan_levels=list(range(1, 13)),\n        device_alias='Tower Fan',\n        sleep_preferences=[\n            DEFAULT,\n            ADVANCED,\n            TURBO,\n            EFFICIENT,\n            QUIET,\n        ],\n        model_display='LTF-F422S Series',\n        model_name='Classic 42-Inch Tower Fan',\n        setup_entry='LTF-F422S',\n    )\n]\n</code></pre> <p>List of 'FanMap' configuration objects for fan devices.</p>"},{"location":"development/device_map/#pyvesync.device_map.air_fryer_modules","title":"air_fryer_modules  <code>module-attribute</code>  \u21b2","text":"<pre><code>air_fryer_modules: list[AirFryerMap] = [\n    AirFryerMap(\n        class_name='VeSyncAirFryer158',\n        module=vesynckitchen,\n        dev_types=[\n            'CS137-AF/CS158-AF',\n            'CS158-AF',\n            'CS137-AF',\n        ],\n        device_alias='Air Fryer',\n        model_display='CS158/159/168/169-AF Series',\n        model_name='Smart/Pro/Pro Gen 2 5.8 Qt. Air Fryer',\n        setup_entry='CS137-AF/CS158-AF',\n    )\n]\n</code></pre> <p>List of 'AirFryerMap' configuration for air fryer devices.</p>"},{"location":"development/device_map/#pyvesync.device_map.full_device_list","title":"full_device_list  <code>module-attribute</code>  \u21b2","text":"<pre><code>full_device_list = [\n    *fan_modules,\n    *purifier_modules,\n    *humidifier_modules,\n    *air_fryer_modules,\n    *thermostat_modules,\n]\n</code></pre> <p>List of all device configuration objects.</p>"},{"location":"development/device_map/#pyvesync.device_map.DeviceMapTemplate","title":"DeviceMapTemplate  <code>dataclass</code>  \u21b2","text":"<p>Template for DeviceModules mapping.</p> <p>Attributes:</p> Name Type Description <code>dev_types</code> <code>list[str]</code> <p>List of device types to match from API.</p> <code>class_name</code> <code>str</code> <p>Class name of the device.</p> <code>product_type</code> <code>str</code> <p>Product type of the device.</p> <code>module</code> <code>ModuleType</code> <p>Module for the device.</p> <code>setup_entry</code> <code>str</code> <p>Setup entry for the device, if unknown use the device_type base without region</p> <code>model_display</code> <code>str</code> <p>Display name of the model.</p> <code>model_name</code> <code>str</code> <p>Name of the model.</p> <code>device_alias</code> <code>str | None</code> <p>Alias for the device, if any.</p> <code>features</code> <code>list[str]</code> <p>List of features for the device.</p> Source code in <code>src\\pyvesync\\device_map.py</code> <pre><code>@dataclass(kw_only=True)\nclass DeviceMapTemplate:\n    \"\"\"Template for DeviceModules mapping.\n\n    Attributes:\n        dev_types (list[str]): List of device types to match from API.\n        class_name (str): Class name of the device.\n        product_type (str): Product type of the device.\n        module (ModuleType): Module for the device.\n        setup_entry (str): Setup entry for the device, if unknown use the device_type\n            base without region\n        model_display (str): Display name of the model.\n        model_name (str): Name of the model.\n        device_alias (str | None): Alias for the device, if any.\n        features (list[str]): List of features for the device.\n    \"\"\"\n\n    dev_types: list[str]\n    class_name: str\n    product_type: str\n    product_line: str\n    module: ModuleType\n    setup_entry: str\n    model_display: str\n    model_name: str\n    device_alias: str | None = None\n    features: list[str] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.DeviceMapTemplate.dev_types","title":"dev_types  <code>instance-attribute</code>  \u21b2","text":"<pre><code>dev_types: list[str]\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.DeviceMapTemplate.class_name","title":"class_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>class_name: str\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.DeviceMapTemplate.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.DeviceMapTemplate.product_line","title":"product_line  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_line: str\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.DeviceMapTemplate.module","title":"module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>module: ModuleType\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.DeviceMapTemplate.setup_entry","title":"setup_entry  <code>instance-attribute</code>  \u21b2","text":"<pre><code>setup_entry: str\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.DeviceMapTemplate.model_display","title":"model_display  <code>instance-attribute</code>  \u21b2","text":"<pre><code>model_display: str\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.DeviceMapTemplate.model_name","title":"model_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>model_name: str\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.DeviceMapTemplate.device_alias","title":"device_alias  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_alias: str | None = None\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.DeviceMapTemplate.features","title":"features  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = field(default_factory=list)\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.DeviceMapTemplate.__init__","title":"__init__ \u21b2","text":"<pre><code>__init__(\n    *,\n    dev_types: list[str],\n    class_name: str,\n    product_type: str,\n    product_line: str,\n    module: ModuleType,\n    setup_entry: str,\n    model_display: str,\n    model_name: str,\n    device_alias: str | None = None,\n    features: list[str] = list(),\n) -&gt; None\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.OutletMap","title":"OutletMap  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DeviceMapTemplate</code></p> <p>Template for DeviceModules mapping.</p> <p>Attributes:</p> Name Type Description <code>dev_types</code> <code>list[str]</code> <p>List of device types to match from API.</p> <code>class_name</code> <code>str</code> <p>Class name of the device.</p> <code>product_type</code> <code>str</code> <p>Product type of the device - ProductTypes.OUTLET</p> <code>module</code> <code>ModuleType</code> <p>Module for the device.</p> <code>setup_entry</code> <code>str</code> <p>Setup entry for the device, if unknown use the device_type base without region</p> <code>model_display</code> <code>str</code> <p>Display name of the model.</p> <code>model_name</code> <code>str</code> <p>Name of the model.</p> <code>device_alias</code> <code>str | None</code> <p>Alias for the device, if any.</p> <code>features</code> <code>list[str]</code> <p>List of features for the device.</p> <code>product_type</code> <code>str</code> <p>Product type of the device.</p> <code>module</code> <code>ModuleType</code> <p>Module for the device.</p> <code>nightlight_modes</code> <code>list[str]</code> <p>List of nightlight modes for the device.</p> Source code in <code>src\\pyvesync\\device_map.py</code> <pre><code>@dataclass(kw_only=True)\nclass OutletMap(DeviceMapTemplate):\n    \"\"\"Template for DeviceModules mapping.\n\n    Attributes:\n        dev_types (list[str]): List of device types to match from API.\n        class_name (str): Class name of the device.\n        product_type (str): Product type of the device - ProductTypes.OUTLET\n        module (ModuleType): Module for the device.\n        setup_entry (str): Setup entry for the device, if unknown use the device_type\n            base without region\n        model_display (str): Display name of the model.\n        model_name (str): Name of the model.\n        device_alias (str | None): Alias for the device, if any.\n        features (list[str]): List of features for the device.\n        product_type (str): Product type of the device.\n        module (ModuleType): Module for the device.\n        nightlight_modes (list[str]): List of nightlight modes for the device.\n    \"\"\"\n\n    product_line: str = ProductLines.WIFI_LIGHT\n    product_type: str = ProductTypes.OUTLET\n    module: ModuleType = vesyncoutlet\n    nightlight_modes: list[NightlightModes] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.OutletMap.product_line","title":"product_line  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_line: str = WIFI_LIGHT\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.OutletMap.product_type","title":"product_type  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = OUTLET\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.OutletMap.module","title":"module  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>module: ModuleType = vesyncoutlet\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.OutletMap.nightlight_modes","title":"nightlight_modes  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_modes: list[NightlightModes] = field(\n    default_factory=list\n)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.OutletMap.__init__","title":"__init__ \u21b2","text":"<pre><code>__init__(\n    *,\n    dev_types: list[str],\n    class_name: str,\n    product_type: str = OUTLET,\n    product_line: str = WIFI_LIGHT,\n    module: ModuleType = vesyncoutlet,\n    setup_entry: str,\n    model_display: str,\n    model_name: str,\n    device_alias: str | None = None,\n    features: list[str] = list(),\n    nightlight_modes: list[NightlightModes] = list(),\n) -&gt; None\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.SwitchMap","title":"SwitchMap  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DeviceMapTemplate</code></p> <p>Template for DeviceModules mapping.</p> <p>Attributes:</p> Name Type Description <code>dev_types</code> <code>list[str]</code> <p>List of device types to match from API.</p> <code>class_name</code> <code>str</code> <p>Class name of the device.</p> <code>product_type</code> <code>str</code> <p>Product type of the device - ProductTypes.SWITCH</p> <code>module</code> <code>ModuleType</code> <p>Module for the device.</p> <code>setup_entry</code> <code>str</code> <p>Setup entry for the device, if unknown use the device_type base without region</p> <code>model_display</code> <code>str</code> <p>Display name of the model.</p> <code>model_name</code> <code>str</code> <p>Name of the model.</p> <code>device_alias</code> <code>str | None</code> <p>Alias for the device, if any.</p> <code>features</code> <code>list[str]</code> <p>List of features for the device.</p> <code>product_type</code> <code>str</code> <p>Product type of the device.</p> <code>module</code> <code>ModuleType</code> <p>Module for the device.</p> Source code in <code>src\\pyvesync\\device_map.py</code> <pre><code>@dataclass(kw_only=True)\nclass SwitchMap(DeviceMapTemplate):\n    \"\"\"Template for DeviceModules mapping.\n\n    Attributes:\n        dev_types (list[str]): List of device types to match from API.\n        class_name (str): Class name of the device.\n        product_type (str): Product type of the device - ProductTypes.SWITCH\n        module (ModuleType): Module for the device.\n        setup_entry (str): Setup entry for the device, if unknown use the device_type\n            base without region\n        model_display (str): Display name of the model.\n        model_name (str): Name of the model.\n        device_alias (str | None): Alias for the device, if any.\n        features (list[str]): List of features for the device.\n        product_type (str): Product type of the device.\n        module (ModuleType): Module for the device.\n    \"\"\"\n\n    product_line: str = ProductLines.SWITCHES\n    product_type: str = ProductTypes.SWITCH\n    module: ModuleType = vesyncswitch\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.SwitchMap.product_line","title":"product_line  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_line: str = SWITCHES\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.SwitchMap.product_type","title":"product_type  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = SWITCH\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.SwitchMap.module","title":"module  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>module: ModuleType = vesyncswitch\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.SwitchMap.__init__","title":"__init__ \u21b2","text":"<pre><code>__init__(\n    *,\n    dev_types: list[str],\n    class_name: str,\n    product_type: str = SWITCH,\n    product_line: str = SWITCHES,\n    module: ModuleType = vesyncswitch,\n    setup_entry: str,\n    model_display: str,\n    model_name: str,\n    device_alias: str | None = None,\n    features: list[str] = list(),\n) -&gt; None\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.BulbMap","title":"BulbMap  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DeviceMapTemplate</code></p> <p>Template for DeviceModules mapping.</p> <p>Attributes:</p> Name Type Description <code>dev_types</code> <code>list[str]</code> <p>List of device types to match from API.</p> <code>class_name</code> <code>str</code> <p>Class name of the device.</p> <code>product_type</code> <code>str</code> <p>Product type of the device - ProductTypes.BULB</p> <code>module</code> <code>ModuleType</code> <p>Module for the device.</p> <code>setup_entry</code> <code>str</code> <p>Setup entry for the device, if unknown use the device_type base without region</p> <code>model_display</code> <code>str</code> <p>Display name of the model.</p> <code>model_name</code> <code>str</code> <p>Name of the model.</p> <code>device_alias</code> <code>str | None</code> <p>Alias for the device, if any.</p> <code>features</code> <code>list[str]</code> <p>List of features for the device.</p> <code>color_model</code> <code>str | None</code> <p>Color model for the device.</p> <code>color_modes</code> <code>list[str]</code> <p>List of color modes for the device.</p> Source code in <code>src\\pyvesync\\device_map.py</code> <pre><code>@dataclass(kw_only=True)\nclass BulbMap(DeviceMapTemplate):\n    \"\"\"Template for DeviceModules mapping.\n\n    Attributes:\n        dev_types (list[str]): List of device types to match from API.\n        class_name (str): Class name of the device.\n        product_type (str): Product type of the device - ProductTypes.BULB\n        module (ModuleType): Module for the device.\n        setup_entry (str): Setup entry for the device, if unknown use the device_type\n            base without region\n        model_display (str): Display name of the model.\n        model_name (str): Name of the model.\n        device_alias (str | None): Alias for the device, if any.\n        features (list[str]): List of features for the device.\n        color_model (str | None): Color model for the device.\n        color_modes (list[str]): List of color modes for the device.\n    \"\"\"\n\n    product_line: str = ProductLines.WIFI_LIGHT\n    color_model: str | None = None\n    product_type: str = ProductTypes.BULB\n    module: ModuleType = vesyncbulb\n    color_modes: list[str] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.BulbMap.product_line","title":"product_line  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_line: str = WIFI_LIGHT\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.BulbMap.color_model","title":"color_model  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>color_model: str | None = None\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.BulbMap.product_type","title":"product_type  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = BULB\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.BulbMap.module","title":"module  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>module: ModuleType = vesyncbulb\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.BulbMap.color_modes","title":"color_modes  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>color_modes: list[str] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.BulbMap.__init__","title":"__init__ \u21b2","text":"<pre><code>__init__(\n    *,\n    dev_types: list[str],\n    class_name: str,\n    product_type: str = BULB,\n    product_line: str = WIFI_LIGHT,\n    module: ModuleType = vesyncbulb,\n    setup_entry: str,\n    model_display: str,\n    model_name: str,\n    device_alias: str | None = None,\n    features: list[str] = list(),\n    color_model: str | None = None,\n    color_modes: list[str] = list(),\n) -&gt; None\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.FanMap","title":"FanMap  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DeviceMapTemplate</code></p> <p>Template for DeviceModules mapping.</p> <p>Attributes:</p> Name Type Description <code>dev_types</code> <code>list[str]</code> <p>List of device types to match from API.</p> <code>class_name</code> <code>str</code> <p>Class name of the device.</p> <code>product_type</code> <code>str</code> <p>Product type of the device - ProductTypes.FAN</p> <code>module</code> <code>ModuleType</code> <p>Module for the device.</p> <code>setup_entry</code> <code>str</code> <p>Setup entry for the device, if unknown use the device_type base without region</p> <code>model_display</code> <code>str</code> <p>Display name of the model.</p> <code>model_name</code> <code>str</code> <p>Name of the model.</p> <code>device_alias</code> <code>str | None</code> <p>Alias for the device, if any.</p> <code>features</code> <code>list[str]</code> <p>List of features for the device.</p> <code>fan_levels</code> <code>list[int]</code> <p>List of fan levels for the device.</p> <code>modes</code> <code>list[str]</code> <p>List of modes for the device.</p> <code>sleep_preferences</code> <code>list[str]</code> <p>List of sleep preferences for the device.</p> <code>set_mode_method</code> <code>str</code> <p>Method to set the mode for the device.</p> Source code in <code>src\\pyvesync\\device_map.py</code> <pre><code>@dataclass(kw_only=True)\nclass FanMap(DeviceMapTemplate):\n    \"\"\"Template for DeviceModules mapping.\n\n    Attributes:\n        dev_types (list[str]): List of device types to match from API.\n        class_name (str): Class name of the device.\n        product_type (str): Product type of the device - ProductTypes.FAN\n        module (ModuleType): Module for the device.\n        setup_entry (str): Setup entry for the device, if unknown use the device_type\n            base without region\n        model_display (str): Display name of the model.\n        model_name (str): Name of the model.\n        device_alias (str | None): Alias for the device, if any.\n        features (list[str]): List of features for the device.\n        fan_levels (list[int]): List of fan levels for the device.\n        modes (list[str]): List of modes for the device.\n        sleep_preferences (list[str]): List of sleep preferences for the device.\n        set_mode_method (str): Method to set the mode for the device.\n    \"\"\"\n\n    product_line: str = ProductLines.WIFI_AIR\n    product_type: str = ProductTypes.FAN\n    module: ModuleType = vesyncfan\n    fan_levels: list[int] = field(default_factory=list)\n    modes: list[str] = field(default_factory=list)\n    sleep_preferences: list[str] = field(default_factory=list)\n    set_mode_method: str = ''\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.FanMap.product_line","title":"product_line  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_line: str = WIFI_AIR\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.FanMap.product_type","title":"product_type  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = FAN\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.FanMap.module","title":"module  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>module: ModuleType = vesyncfan\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.FanMap.fan_levels","title":"fan_levels  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>fan_levels: list[int] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.FanMap.modes","title":"modes  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>modes: list[str] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.FanMap.sleep_preferences","title":"sleep_preferences  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>sleep_preferences: list[str] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.FanMap.set_mode_method","title":"set_mode_method  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>set_mode_method: str = ''\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.FanMap.__init__","title":"__init__ \u21b2","text":"<pre><code>__init__(\n    *,\n    dev_types: list[str],\n    class_name: str,\n    product_type: str = FAN,\n    product_line: str = WIFI_AIR,\n    module: ModuleType = vesyncfan,\n    setup_entry: str,\n    model_display: str,\n    model_name: str,\n    device_alias: str | None = None,\n    features: list[str] = list(),\n    fan_levels: list[int] = list(),\n    modes: list[str] = list(),\n    sleep_preferences: list[str] = list(),\n    set_mode_method: str = '',\n) -&gt; None\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.HumidifierMap","title":"HumidifierMap  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DeviceMapTemplate</code></p> <p>Template for DeviceModules mapping.</p> <p>Attributes:</p> Name Type Description <code>dev_types</code> <code>list[str]</code> <p>List of device types to match from API.</p> <code>class_name</code> <code>str</code> <p>Class name of the device.</p> <code>product_type</code> <code>str</code> <p>Product type of the device - ProductTypes.HUMIDIFIER</p> <code>module</code> <code>ModuleType</code> <p>Module for the device.</p> <code>setup_entry</code> <code>str</code> <p>Setup entry for the device, if unknown use the device_type base without region</p> <code>model_display</code> <code>str</code> <p>Display name of the model.</p> <code>model_name</code> <code>str</code> <p>Name of the model.</p> <code>device_alias</code> <code>str | None</code> <p>Alias for the device, if any.</p> <code>features</code> <code>list[str]</code> <p>List of features for the device.</p> <code>mist_modes</code> <code>dict[str, str]</code> <p>Dictionary of mist modes for the device.</p> <code>mist_levels</code> <code>list[int | str]</code> <p>List of mist levels for the device.</p> <code>target_minmax</code> <code>tuple[int, int]</code> <p>Minimum and maximum target humidity levels.</p> <code>warm_mist_levels</code> <code>list[int | str]</code> <p>List of warm mist levels for the device.</p> Source code in <code>src\\pyvesync\\device_map.py</code> <pre><code>@dataclass(kw_only=True)\nclass HumidifierMap(DeviceMapTemplate):\n    \"\"\"Template for DeviceModules mapping.\n\n    Attributes:\n        dev_types (list[str]): List of device types to match from API.\n        class_name (str): Class name of the device.\n        product_type (str): Product type of the device - ProductTypes.HUMIDIFIER\n        module (ModuleType): Module for the device.\n        setup_entry (str): Setup entry for the device, if unknown use the device_type\n            base without region\n        model_display (str): Display name of the model.\n        model_name (str): Name of the model.\n        device_alias (str | None): Alias for the device, if any.\n        features (list[str]): List of features for the device.\n        mist_modes (dict[str, str]): Dictionary of mist modes for the device.\n        mist_levels (list[int | str]): List of mist levels for the device.\n        target_minmax (tuple[int, int]): Minimum and maximum target humidity levels.\n        warm_mist_levels (list[int | str]): List of warm mist levels for the device.\n    \"\"\"\n\n    product_line: str = ProductLines.WIFI_AIR\n    mist_modes: dict[str, str] = field(default_factory=dict)\n    mist_levels: list[int | str] = field(default_factory=list)\n    product_type: str = ProductTypes.HUMIDIFIER\n    module: ModuleType = vesynchumidifier\n    target_minmax: tuple[int, int] = (30, 80)\n    warm_mist_levels: list[int | str] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.HumidifierMap.product_line","title":"product_line  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_line: str = WIFI_AIR\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.HumidifierMap.mist_modes","title":"mist_modes  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>mist_modes: dict[str, str] = field(default_factory=dict)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.HumidifierMap.mist_levels","title":"mist_levels  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>mist_levels: list[int | str] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.HumidifierMap.product_type","title":"product_type  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = HUMIDIFIER\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.HumidifierMap.module","title":"module  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>module: ModuleType = vesynchumidifier\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.HumidifierMap.target_minmax","title":"target_minmax  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>target_minmax: tuple[int, int] = (30, 80)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.HumidifierMap.warm_mist_levels","title":"warm_mist_levels  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>warm_mist_levels: list[int | str] = field(\n    default_factory=list\n)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.HumidifierMap.__init__","title":"__init__ \u21b2","text":"<pre><code>__init__(\n    *,\n    dev_types: list[str],\n    class_name: str,\n    product_type: str = HUMIDIFIER,\n    product_line: str = WIFI_AIR,\n    module: ModuleType = vesynchumidifier,\n    setup_entry: str,\n    model_display: str,\n    model_name: str,\n    device_alias: str | None = None,\n    features: list[str] = list(),\n    mist_modes: dict[str, str] = dict(),\n    mist_levels: list[int | str] = list(),\n    target_minmax: tuple[int, int] = (30, 80),\n    warm_mist_levels: list[int | str] = list(),\n) -&gt; None\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.PurifierMap","title":"PurifierMap  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DeviceMapTemplate</code></p> <p>Template for DeviceModules mapping.</p> <p>Attributes:</p> Name Type Description <code>dev_types</code> <code>list[str]</code> <p>List of device types to match from API.</p> <code>class_name</code> <code>str</code> <p>Class name of the device.</p> <code>product_type</code> <code>str</code> <p>Product type of the device - ProductTypes.PURIFIER</p> <code>module</code> <code>ModuleType</code> <p>Module for the device.</p> <code>setup_entry</code> <code>str</code> <p>Setup entry for the device, if unknown use the device_type base without region</p> <code>model_display</code> <code>str</code> <p>Display name of the model.</p> <code>model_name</code> <code>str</code> <p>Name of the model.</p> <code>device_alias</code> <code>str | None</code> <p>Alias for the device, if any.</p> <code>features</code> <code>list[str]</code> <p>List of features for the device.</p> <code>fan_levels</code> <code>list[int]</code> <p>List of fan levels for the device.</p> <code>modes</code> <code>list[str]</code> <p>List of modes for the device.</p> <code>nightlight_modes</code> <code>list[str]</code> <p>List of nightlight modes for the device.</p> <code>auto_preferences</code> <code>list[str]</code> <p>List of auto preferences for the device.</p> Source code in <code>src\\pyvesync\\device_map.py</code> <pre><code>@dataclass(kw_only=True)\nclass PurifierMap(DeviceMapTemplate):\n    \"\"\"Template for DeviceModules mapping.\n\n    Attributes:\n        dev_types (list[str]): List of device types to match from API.\n        class_name (str): Class name of the device.\n        product_type (str): Product type of the device - ProductTypes.PURIFIER\n\n        module (ModuleType): Module for the device.\n        setup_entry (str): Setup entry for the device, if unknown use the device_type\n            base without region\n        model_display (str): Display name of the model.\n        model_name (str): Name of the model.\n        device_alias (str | None): Alias for the device, if any.\n        features (list[str]): List of features for the device.\n        fan_levels (list[int]): List of fan levels for the device.\n        modes (list[str]): List of modes for the device.\n        nightlight_modes (list[str]): List of nightlight modes for the device.\n        auto_preferences (list[str]): List of auto preferences for the device.\n    \"\"\"\n\n    product_line: str = ProductLines.WIFI_AIR\n    product_type: str = ProductTypes.PURIFIER\n    module: ModuleType = vesyncpurifier\n    fan_levels: list[int] = field(default_factory=list)\n    modes: list[str] = field(default_factory=list)\n    nightlight_modes: list[str] = field(default_factory=list)\n    auto_preferences: list[str] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.PurifierMap.product_line","title":"product_line  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_line: str = WIFI_AIR\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.PurifierMap.product_type","title":"product_type  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = PURIFIER\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.PurifierMap.module","title":"module  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>module: ModuleType = vesyncpurifier\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.PurifierMap.fan_levels","title":"fan_levels  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>fan_levels: list[int] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.PurifierMap.modes","title":"modes  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>modes: list[str] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.PurifierMap.nightlight_modes","title":"nightlight_modes  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_modes: list[str] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.PurifierMap.auto_preferences","title":"auto_preferences  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>auto_preferences: list[str] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.PurifierMap.__init__","title":"__init__ \u21b2","text":"<pre><code>__init__(\n    *,\n    dev_types: list[str],\n    class_name: str,\n    product_type: str = PURIFIER,\n    product_line: str = WIFI_AIR,\n    module: ModuleType = vesyncpurifier,\n    setup_entry: str,\n    model_display: str,\n    model_name: str,\n    device_alias: str | None = None,\n    features: list[str] = list(),\n    fan_levels: list[int] = list(),\n    modes: list[str] = list(),\n    nightlight_modes: list[str] = list(),\n    auto_preferences: list[str] = list(),\n) -&gt; None\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.AirFryerMap","title":"AirFryerMap  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DeviceMapTemplate</code></p> <p>Template for DeviceModules mapping.</p> <p>Attributes:</p> Name Type Description <code>dev_types</code> <code>list[str]</code> <p>List of device types to match from API.</p> <code>class_name</code> <code>str</code> <p>Class name of the device.</p> <code>product_type</code> <code>str</code> <p>Product type of the device - ProductTypes.AIR_FRYER</p> <code>module</code> <code>ModuleType</code> <p>Module for the device.</p> <code>setup_entry</code> <code>str</code> <p>Setup entry for the device, if unknown use the device_type base without region</p> <code>model_display</code> <code>str</code> <p>Display name of the model.</p> <code>model_name</code> <code>str</code> <p>Name of the model.</p> <code>device_alias</code> <code>str | None</code> <p>Alias for the device, if any.</p> <code>features</code> <code>list[str]</code> <p>List of features for the device.</p> <code>product_type</code> <code>str</code> <p>Product type of the device.</p> <code>module</code> <code>ModuleType</code> <p>Module for the device.</p> Source code in <code>src\\pyvesync\\device_map.py</code> <pre><code>@dataclass(kw_only=True)\nclass AirFryerMap(DeviceMapTemplate):\n    \"\"\"Template for DeviceModules mapping.\n\n    Attributes:\n        dev_types (list[str]): List of device types to match from API.\n        class_name (str): Class name of the device.\n        product_type (str): Product type of the device - ProductTypes.AIR_FRYER\n        module (ModuleType): Module for the device.\n        setup_entry (str): Setup entry for the device, if unknown use the device_type\n            base without region\n        model_display (str): Display name of the model.\n        model_name (str): Name of the model.\n        device_alias (str | None): Alias for the device, if any.\n        features (list[str]): List of features for the device.\n        product_type (str): Product type of the device.\n        module (ModuleType): Module for the device.\n    \"\"\"\n\n    temperature_range_f: tuple[int, int] = (200, 400)\n    temperature_range_c: tuple[int, int] = (75, 200)\n    product_line: str = ProductLines.WIFI_KITCHEN\n    product_type: str = ProductTypes.AIR_FRYER\n    module: ModuleType = vesynckitchen\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.AirFryerMap.temperature_range_f","title":"temperature_range_f  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>temperature_range_f: tuple[int, int] = (200, 400)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.AirFryerMap.temperature_range_c","title":"temperature_range_c  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>temperature_range_c: tuple[int, int] = (75, 200)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.AirFryerMap.product_line","title":"product_line  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_line: str = WIFI_KITCHEN\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.AirFryerMap.product_type","title":"product_type  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = AIR_FRYER\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.AirFryerMap.module","title":"module  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>module: ModuleType = vesynckitchen\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.AirFryerMap.__init__","title":"__init__ \u21b2","text":"<pre><code>__init__(\n    *,\n    dev_types: list[str],\n    class_name: str,\n    product_type: str = AIR_FRYER,\n    product_line: str = WIFI_KITCHEN,\n    module: ModuleType = vesynckitchen,\n    setup_entry: str,\n    model_display: str,\n    model_name: str,\n    device_alias: str | None = None,\n    features: list[str] = list(),\n    temperature_range_f: tuple[int, int] = (200, 400),\n    temperature_range_c: tuple[int, int] = (75, 200),\n) -&gt; None\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.ThermostatMap","title":"ThermostatMap  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DeviceMapTemplate</code></p> <p>Template for Thermostat device mapping.</p> <p>Attributes:</p> Name Type Description <code>dev_types</code> <code>list[str]</code> <p>List of device types to match from API.</p> <code>class_name</code> <code>str</code> <p>Class name of the device.</p> <code>product_type</code> <code>str</code> <p>Product type of the device.</p> <code>module</code> <code>ModuleType</code> <p>Module for the device.</p> <code>setup_entry</code> <code>str</code> <p>Setup entry for the device, if unknown use the device_type base without region</p> <code>model_display</code> <code>str</code> <p>Display name of the model.</p> <code>model_name</code> <code>str</code> <p>Name of the model.</p> <code>device_alias</code> <code>str | None</code> <p>Alias for the device, if any.</p> <code>features</code> <code>list[str]</code> <p>List of features for the device.</p> <code>modes</code> <code>list[int]</code> <p>List of modes for the device.</p> <code>fan_modes</code> <code>list[int]</code> <p>List of fan modes for the device.</p> <code>eco_types</code> <code>list[int]</code> <p>List of eco types for the device.</p> <code>hold_options</code> <code>list[int]</code> <p>List of hold options for the device.</p> <code>routine_types</code> <code>list[int]</code> <p>List of routine types for the device.</p> Source code in <code>src\\pyvesync\\device_map.py</code> <pre><code>@dataclass(kw_only=True)\nclass ThermostatMap(DeviceMapTemplate):\n    \"\"\"Template for Thermostat device mapping.\n\n    Attributes:\n        dev_types (list[str]): List of device types to match from API.\n        class_name (str): Class name of the device.\n        product_type (str): Product type of the device.\n        module (ModuleType): Module for the device.\n        setup_entry (str): Setup entry for the device, if unknown use the device_type\n            base without region\n        model_display (str): Display name of the model.\n        model_name (str): Name of the model.\n        device_alias (str | None): Alias for the device, if any.\n        features (list[str]): List of features for the device.\n        modes (list[int]): List of modes for the device.\n        fan_modes (list[int]): List of fan modes for the device.\n        eco_types (list[int]): List of eco types for the device.\n        hold_options (list[int]): List of hold options for the device.\n        routine_types (list[int]): List of routine types for the device.\n    \"\"\"\n\n    product_line: str = ProductLines.THERMOSTAT\n    product_type: str = ProductTypes.THERMOSTAT\n    module: ModuleType = vesyncthermostat\n    modes: list[int] = field(default_factory=list)\n    fan_modes: list[int] = field(default_factory=list)\n    eco_types: list[int] = field(default_factory=list)\n    hold_options: list[int] = field(default_factory=list)\n    routine_types: list[int] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.ThermostatMap.product_line","title":"product_line  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_line: str = THERMOSTAT\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.ThermostatMap.product_type","title":"product_type  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = THERMOSTAT\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.ThermostatMap.module","title":"module  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>module: ModuleType = vesyncthermostat\n</code></pre> <p>Inherited From <code>DeviceMapTemplate</code></p>"},{"location":"development/device_map/#pyvesync.device_map.ThermostatMap.modes","title":"modes  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>modes: list[int] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.ThermostatMap.fan_modes","title":"fan_modes  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>fan_modes: list[int] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.ThermostatMap.eco_types","title":"eco_types  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>eco_types: list[int] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.ThermostatMap.hold_options","title":"hold_options  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>hold_options: list[int] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.ThermostatMap.routine_types","title":"routine_types  <code>class-attribute</code> <code>instance-attribute</code>  \u21b2","text":"<pre><code>routine_types: list[int] = field(default_factory=list)\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.ThermostatMap.__init__","title":"__init__ \u21b2","text":"<pre><code>__init__(\n    *,\n    dev_types: list[str],\n    class_name: str,\n    product_type: str = THERMOSTAT,\n    product_line: str = THERMOSTAT,\n    module: ModuleType = vesyncthermostat,\n    setup_entry: str,\n    model_display: str,\n    model_name: str,\n    device_alias: str | None = None,\n    features: list[str] = list(),\n    modes: list[int] = list(),\n    fan_modes: list[int] = list(),\n    eco_types: list[int] = list(),\n    hold_options: list[int] = list(),\n    routine_types: list[int] = list(),\n) -&gt; None\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.get_device_config","title":"get_device_config \u21b2","text":"<pre><code>get_device_config(\n    device_type: str,\n) -&gt; DeviceMapTemplate | None\n</code></pre> <p>Get general device details from device type to create instance.</p> <p>Parameters:</p> Name Type Description Default <code>device_type</code> <code>str</code> <p>Device type to match from device list API call.</p> required <p>Returns:</p> Type Description <code>DeviceMapTemplate | None</code> <p>DeviceMapTemplate | None: DeviceMapTemplate object or None if not found.</p> Source code in <code>src\\pyvesync\\device_map.py</code> <pre><code>def get_device_config(device_type: str) -&gt; DeviceMapTemplate | None:\n    \"\"\"Get general device details from device type to create instance.\n\n    Args:\n        device_type (str): Device type to match from device list API call.\n\n    Returns:\n        DeviceMapTemplate | None: DeviceMapTemplate object or None if not found.\n    \"\"\"\n    all_modules: list[T_MAPS] = [\n        outlet_modules,\n        switch_modules,\n        bulb_modules,\n        fan_modules,\n        purifier_modules,\n        humidifier_modules,\n        air_fryer_modules,\n        thermostat_modules,\n    ]\n    for module in chain(*all_modules):\n        if device_type in module.dev_types:\n            return module\n    if device_type.count('-') &gt; 1:\n        device_type = '-'.join(device_type.split('-')[:-1])\n        for module in chain(*all_modules):\n            if any(device_type.lower() in dev.lower() for dev in module.dev_types):\n                return module\n    return None\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.get_fan","title":"get_fan \u21b2","text":"<pre><code>get_fan(device_type: str) -&gt; FanMap | None\n</code></pre> <p>Get fan device details from device type.</p> <p>Parameters:</p> Name Type Description Default <code>device_type</code> <code>str</code> <p>Device type to match from device list API call.</p> required <p>Returns:</p> Type Description <code>FanMap | None</code> <p>FanMap | None: FanMap object or None if not found.</p> Source code in <code>src\\pyvesync\\device_map.py</code> <pre><code>def get_fan(device_type: str) -&gt; FanMap | None:\n    \"\"\"Get fan device details from device type.\n\n    Args:\n        device_type (str): Device type to match from device list API call.\n\n    Returns:\n        FanMap | None: FanMap object or None if not found.\n    \"\"\"\n    for module in fan_modules:\n        if device_type in module.dev_types:\n            return module\n    # Try to match with a more generic device type\n    if device_type.count('-') &gt; 1:\n        device_type = '-'.join(device_type.split('-')[:-1])\n        for module in fan_modules:\n            if any(device_type.lower() in dev.lower() for dev in module.dev_types):\n                return module\n    return None\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.get_purifier","title":"get_purifier \u21b2","text":"<pre><code>get_purifier(device_type: str) -&gt; PurifierMap | None\n</code></pre> <p>Get purifier device details from device type.</p> <p>Parameters:</p> Name Type Description Default <code>device_type</code> <code>str</code> <p>Device type to match from device list API call.</p> required <p>Returns:</p> Type Description <code>PurifierMap | None</code> <p>PurifierMap | None: PurifierMap object or None if not found.</p> Source code in <code>src\\pyvesync\\device_map.py</code> <pre><code>def get_purifier(device_type: str) -&gt; PurifierMap | None:\n    \"\"\"Get purifier device details from device type.\n\n    Args:\n        device_type (str): Device type to match from device list API call.\n\n    Returns:\n        PurifierMap | None: PurifierMap object or None if not found.\n    \"\"\"\n    for module in purifier_modules:\n        if device_type in module.dev_types:\n            return module\n    if device_type.count('-') &gt; 1:\n        device_type = '-'.join(device_type.split('-')[:-1])\n        for module in purifier_modules:\n            if any(device_type.lower() in dev.lower() for dev in module.dev_types):\n                return module\n    return None\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.get_humidifier","title":"get_humidifier \u21b2","text":"<pre><code>get_humidifier(device_type: str) -&gt; HumidifierMap | None\n</code></pre> <p>Get humidifier device details from device type.</p> <p>Parameters:</p> Name Type Description Default <code>device_type</code> <code>str</code> <p>Device type to match from device list API call.</p> required <p>Returns:</p> Type Description <code>HumidifierMap | None</code> <p>HumidifierMap | None: HumidifierMap object or None if not found.</p> Source code in <code>src\\pyvesync\\device_map.py</code> <pre><code>def get_humidifier(device_type: str) -&gt; HumidifierMap | None:\n    \"\"\"Get humidifier device details from device type.\n\n    Args:\n        device_type (str): Device type to match from device list API call.\n\n    Returns:\n        HumidifierMap | None: HumidifierMap object or None if not found.\n    \"\"\"\n    for module in humidifier_modules:\n        if device_type in module.dev_types:\n            return module\n    if device_type.count('-') &gt; 1:\n        device_type = '-'.join(device_type.split('-')[:-1])\n        for module in humidifier_modules:\n            if any(device_type.lower() in dev.lower() for dev in module.dev_types):\n                return module\n    return None\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.get_outlet","title":"get_outlet \u21b2","text":"<pre><code>get_outlet(device_type: str) -&gt; OutletMap | None\n</code></pre> <p>Get outlet device details from device type.</p> <p>Parameters:</p> Name Type Description Default <code>device_type</code> <code>str</code> <p>Device type to match from device list API call.</p> required <p>Returns:</p> Type Description <code>OutletMap | None</code> <p>OutletMap | None: OutletMap object or None if not found.</p> Source code in <code>src\\pyvesync\\device_map.py</code> <pre><code>def get_outlet(device_type: str) -&gt; OutletMap | None:\n    \"\"\"Get outlet device details from device type.\n\n    Args:\n        device_type (str): Device type to match from device list API call.\n\n    Returns:\n        OutletMap | None: OutletMap object or None if not found.\n    \"\"\"\n    for module in outlet_modules:\n        if device_type in module.dev_types:\n            return module\n    if device_type.count('-') &gt; 1:\n        device_type = '-'.join(device_type.split('-')[:-1])\n        for module in outlet_modules:\n            if any(device_type.lower() in dev.lower() for dev in module.dev_types):\n                return module\n    return None\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.get_switch","title":"get_switch \u21b2","text":"<pre><code>get_switch(device_type: str) -&gt; SwitchMap | None\n</code></pre> <p>Get switch device details from device type.</p> <p>Parameters:</p> Name Type Description Default <code>device_type</code> <code>str</code> <p>Device type to match from device list API call.</p> required <p>Returns:</p> Type Description <code>SwitchMap | None</code> <p>SwitchMap | None: SwitchMap object or None if not found.</p> Source code in <code>src\\pyvesync\\device_map.py</code> <pre><code>def get_switch(device_type: str) -&gt; SwitchMap | None:\n    \"\"\"Get switch device details from device type.\n\n    Args:\n        device_type (str): Device type to match from device list API call.\n\n    Returns:\n        SwitchMap | None: SwitchMap object or None if not found.\n    \"\"\"\n    for module in switch_modules:\n        if device_type in module.dev_types:\n            return module\n    if device_type.count('-') &gt; 1:\n        device_type = '-'.join(device_type.split('-')[:-1])\n        for module in switch_modules:\n            if any(device_type.lower() in dev.lower() for dev in module.dev_types):\n                return module\n    return None\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.get_bulb","title":"get_bulb \u21b2","text":"<pre><code>get_bulb(device_type: str) -&gt; BulbMap | None\n</code></pre> <p>Get bulb device details from device type.</p> <p>Parameters:</p> Name Type Description Default <code>device_type</code> <code>str</code> <p>Device type to match from device list API call.</p> required <p>Returns:</p> Type Description <code>BulbMap | None</code> <p>BulbMap | None: BulbMap object or None if not found.</p> Source code in <code>src\\pyvesync\\device_map.py</code> <pre><code>def get_bulb(device_type: str) -&gt; BulbMap | None:\n    \"\"\"Get bulb device details from device type.\n\n    Args:\n        device_type (str): Device type to match from device list API call.\n\n    Returns:\n        BulbMap | None: BulbMap object or None if not found.\n    \"\"\"\n    for module in bulb_modules:\n        if device_type in module.dev_types:\n            return module\n    if device_type.count('-') &gt; 1:\n        device_type = '-'.join(device_type.split('-')[:-1])\n        for module in bulb_modules:\n            if any(device_type.lower() in dev.lower() for dev in module.dev_types):\n                return module\n    return None\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.get_air_fryer","title":"get_air_fryer \u21b2","text":"<pre><code>get_air_fryer(device_type: str) -&gt; AirFryerMap | None\n</code></pre> <p>Get air fryer device details from device type.</p> <p>Parameters:</p> Name Type Description Default <code>device_type</code> <code>str</code> <p>Device type to match from device list API call.</p> required <p>Returns:</p> Type Description <code>AirFryerMap | None</code> <p>AirFryerMap | None: AirFryerMap object or None if not found.</p> Source code in <code>src\\pyvesync\\device_map.py</code> <pre><code>def get_air_fryer(device_type: str) -&gt; AirFryerMap | None:\n    \"\"\"Get air fryer device details from device type.\n\n    Args:\n        device_type (str): Device type to match from device list API call.\n\n    Returns:\n        AirFryerMap | None: AirFryerMap object or None if not found.\n    \"\"\"\n    for module in air_fryer_modules:\n        if device_type in module.dev_types:\n            return module\n    if device_type.count('-') &gt; 1:\n        device_type = '-'.join(device_type.split('-')[:-1])\n        for module in air_fryer_modules:\n            if any(device_type.lower() in dev.lower() for dev in module.dev_types):\n                return module\n    return None\n</code></pre>"},{"location":"development/device_map/#pyvesync.device_map.get_thermostat","title":"get_thermostat \u21b2","text":"<pre><code>get_thermostat(device_type: str) -&gt; ThermostatMap | None\n</code></pre> <p>Get the device map for a thermostat.</p> <p>Parameters:</p> Name Type Description Default <code>device_type</code> <code>str</code> <p>The device type to match.</p> required <p>Returns:</p> Type Description <code>ThermostatMap | None</code> <p>ThermostatMap | None: The matching thermostat map or None if not found.</p> Source code in <code>src\\pyvesync\\device_map.py</code> <pre><code>def get_thermostat(device_type: str) -&gt; ThermostatMap | None:\n    \"\"\"Get the device map for a thermostat.\n\n    Args:\n        device_type (str): The device type to match.\n\n    Returns:\n        ThermostatMap | None: The matching thermostat map or None if not found.\n    \"\"\"\n    for module in thermostat_modules:\n        if device_type in module.dev_types:\n            return module\n    if device_type.count('-') &gt; 1:\n        device_type = '-'.join(device_type.split('-')[:-1])\n        for module in thermostat_modules:\n            if any(device_type.lower() in dev.lower() for dev in module.dev_types):\n                return module\n    return None\n</code></pre>"},{"location":"development/vesync_api/","title":"Documentation for <code>pyvesync.vesync</code> module\u21b2","text":"<p>This module instantiates the vesync instance that holds the devices and maintains authentication information.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync","title":"pyvesync.vesync.VeSync \u21b2","text":"<pre><code>VeSync(\n    username: str,\n    password: str,\n    country_code: str = DEFAULT_REGION,\n    session: ClientSession | None = None,\n    time_zone: str = DEFAULT_TZ,\n    debug: bool = False,\n    redact: bool = True,\n)\n</code></pre> <p>VeSync Manager Class.</p> <p>Initialize VeSync Manager.</p> <p>This class is used as the manager for all VeSync objects, all methods and API calls are performed from this class. Time zone, debug and redact are optional. Time zone must be a string of an IANA time zone format. Once class is instantiated, call <code>await manager.login()</code> to log in to VeSync servers, which returns <code>True</code> if successful. Once logged in, call <code>await manager.get_devices()</code> to retrieve devices. Then <code>await</code>manager.update()<code>to update all devices or</code>await manager.devices[0].update()` to update a single device.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>VeSync account username (usually email address)</p> required <code>password</code> <code>str</code> <p>VeSync account password</p> required <code>country_code</code> <code>str</code> <p>VeSync account country in ISO 3166 Alpha-2 format. By default, the account region is detected automatically at the login step If your account country is different from the default <code>US</code>, a second login attempt may be necessary - in this case you should specify the country directly to speed up the login process.</p> <code>DEFAULT_REGION</code> <code>session</code> <code>ClientSession</code> <p>aiohttp client session for API calls, by default None</p> <code>None</code> <code>time_zone</code> <code>str</code> <p>Time zone for device from IANA database, by default DEFAULT_TZ. This is automatically set to the time zone of the VeSync account during login.</p> <code>DEFAULT_TZ</code> <code>debug</code> <code>bool</code> <p>Enable debug logging, by default False.</p> <code>False</code> <code>redact</code> <code>bool</code> <p>Enable redaction of sensitive information, by default True.</p> <code>True</code> <p>Attributes:</p> Name Type Description <code>session</code> <code>ClientSession</code> <p>Client session for API calls</p> <code>devices</code> <code>DeviceContainer</code> <p>Container for all VeSync devices, has functionality of a mutable set. See <code>DeviceContainer</code> for more information</p> <code>auth</code> <code>VeSyncAuth</code> <p>Authentication manager</p> <code>time_zone</code> <code>str</code> <p>Time zone for VeSync account pulled from API</p> <code>enabled</code> <code>bool</code> <p>True if logged in to VeSync, False if not</p> Note <p>This class is a context manager, use <code>async with VeSync() as manager:</code> to manage the session context. The session will be closed when exiting if no session is passed in.</p> <p>The <code>manager.devices</code> attribute is a DeviceContainer object that contains all VeSync devices. The <code>manager.devices</code> object has the functionality of a set, and can be iterated over to access devices. See :obj:<code>DeviceContainer</code> for more information.</p> <p>If using a context manager is not convenient, <code>manager.__aenter__()</code> and <code>manager.__aexit__()</code> can be called directly.</p> <p>Either username/password or token/account_id must be provided for authentication.</p> See Also <p>:obj:<code>DeviceContainer</code>     Container object to store VeSync devices :obj:<code>DeviceState</code>     Object to store device state information</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync-attributes","title":"Attributes\u21b2","text":""},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.account_id","title":"account_id  <code>property</code>  \u21b2","text":"<pre><code>account_id: str\n</code></pre> <p>Return account ID.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Account ID.</p> <p>Raises:</p> Type Description <code>AttributeError</code> <p>If account ID is not set.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.auth","title":"auth  <code>property</code>  \u21b2","text":"<pre><code>auth: VeSyncAuth\n</code></pre> <p>Return VeSync authentication manager.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.country_code","title":"country_code  <code>property</code>  \u21b2","text":"<pre><code>country_code: str\n</code></pre> <p>Return country code.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.current_region","title":"current_region  <code>property</code>  \u21b2","text":"<pre><code>current_region: str\n</code></pre> <p>Return current region.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.debug","title":"debug  <code>property</code> <code>writable</code>  \u21b2","text":"<pre><code>debug: bool\n</code></pre> <p>Return debug flag.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.devices","title":"devices  <code>property</code>  \u21b2","text":"<pre><code>devices: DeviceContainer\n</code></pre> <p>Return VeSync device container.</p> See Also <p>The pyvesync.device_container.DeviceContainer object for methods and properties.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.redact","title":"redact  <code>property</code> <code>writable</code>  \u21b2","text":"<pre><code>redact: bool\n</code></pre> <p>Return debug flag.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.token","title":"token  <code>property</code>  \u21b2","text":"<pre><code>token: str\n</code></pre> <p>Return authentication token.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Authentication token.</p> <p>Raises:</p> Type Description <code>AttributeError</code> <p>If token is not set.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.verbose","title":"verbose  <code>property</code> <code>writable</code>  \u21b2","text":"<pre><code>verbose: bool\n</code></pre> <p>Enable verbose logging.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync-functions","title":"Functions\u21b2","text":""},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.__aenter__","title":"__aenter__  <code>async</code>  \u21b2","text":"<pre><code>__aenter__() -&gt; Self\n</code></pre> <p>Asynchronous context manager enter.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.__aexit__","title":"__aexit__  <code>async</code>  \u21b2","text":"<pre><code>__aexit__(*exec_info: object) -&gt; None\n</code></pre> <p>Asynchronous context manager exit.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync._api_base_url_for_current_region","title":"_api_base_url_for_current_region \u21b2","text":"<pre><code>_api_base_url_for_current_region() -&gt; str\n</code></pre> <p>Retrieve the API base url for the current region.</p> <p>At this point, only two different URLs exist: One for <code>EU</code> region (for all EU countries), and one for all others (currently <code>US</code>, <code>CA</code>, <code>MX</code>, <code>JP</code> - also used as a fallback).</p> <p>If <code>API_BASE_URL</code> is set, it will take precedence over the determined URL.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync._update_fw_version","title":"_update_fw_version \u21b2","text":"<pre><code>_update_fw_version(\n    info_list: list[FirmwareDeviceItemModel],\n) -&gt; bool\n</code></pre> <p>Update device firmware versions from API response.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.async_call_api","title":"async_call_api  <code>async</code>  \u21b2","text":"<pre><code>async_call_api(\n    api: str,\n    method: str,\n    json_object: dict | None | DataClassORJSONMixin = None,\n    headers: dict | None = None,\n) -&gt; tuple[dict | None, int | None]\n</code></pre> <p>Make API calls by passing endpoint, header and body.</p> <p>api argument is appended to <code>API_BASE_URL</code>. Raises VeSyncRateLimitError if API returns a rate limit error.</p> <p>Parameters:</p> Name Type Description Default <code>api</code> <code>str</code> <p>Endpoint to call with <code>API_BASE_URL</code>.</p> required <code>method</code> <code>str</code> <p>HTTP method to use.</p> required <code>json_object</code> <code>dict | RequestBaseModel</code> <p>JSON object to send in body.</p> <code>None</code> <code>headers</code> <code>dict</code> <p>Headers to send with request.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[dict | None, int | None]</code> <p>tuple[dict | None, int]: Response and status code. Attempts to parse response as JSON, if not possible returns None.</p> <p>Raises:</p> Type Description <code>VeSyncAPIStatusCodeError</code> <p>If API returns an error status code.</p> <code>VeSyncRateLimitError</code> <p>If API returns a rate limit error.</p> <code>VeSyncServerError</code> <p>If API returns a server error.</p> <code>VeSyncTokenError</code> <p>If API returns an authentication error.</p> <code>ClientResponseError</code> <p>If API returns a client response error.</p> Note <p>Future releases will require the <code>json_object</code> argument to be a dataclass, instead of dictionary.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.check_firmware","title":"check_firmware  <code>async</code>  \u21b2","text":"<pre><code>check_firmware() -&gt; bool\n</code></pre> <p>Check for firmware updates for all devices.</p> <p>This method will check for firmware updates for all devices in the device container. It will call the <code>get_firmware_update()</code> method on each device and log the results.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.get_devices","title":"get_devices  <code>async</code>  \u21b2","text":"<pre><code>get_devices() -&gt; bool\n</code></pre> <p>Return tuple listing outlets, switches, and fans of devices.</p> <p>This is also called by <code>VeSync.update()</code></p> <p>Raises:</p> Type Description <code>VeSyncAPIResponseError</code> <p>If API response is invalid.</p> <code>VeSyncServerError</code> <p>If server returns an error.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.load_credentials_from_file","title":"load_credentials_from_file  <code>async</code>  \u21b2","text":"<pre><code>load_credentials_from_file(\n    filename: str | Path | None = None,\n) -&gt; bool\n</code></pre> <p>Load authentication credentials from a file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str | Path | None</code> <p>The name of the file to load credentials from. If None, no action is taken.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if credentials were loaded successfully, False otherwise.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.log_to_file","title":"log_to_file \u21b2","text":"<pre><code>log_to_file(\n    filename: str | Path, std_out: bool = True\n) -&gt; None\n</code></pre> <p>Log to file and enable debug logging.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str | Path</code> <p>The name of the file to log to.</p> required <code>std_out</code> <code>bool</code> <p>If False, logs will not print to std out.</p> <code>True</code>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.login","title":"login  <code>async</code>  \u21b2","text":"<pre><code>login() -&gt; bool\n</code></pre> <p>Log into VeSync server.</p> <p>Username and password are provided when class is instantiated.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if login successful, False otherwise</p> <p>Raises:</p> Type Description <code>VeSyncLoginError</code> <p>If login fails, for example due to invalid username or password.</p> <code>VeSyncAPIResponseError</code> <p>If API response is invalid.</p> <code>VeSyncServerError</code> <p>If server returns an error.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.output_credentials","title":"output_credentials \u21b2","text":"<pre><code>output_credentials() -&gt; str | None\n</code></pre> <p>Output current authentication credentials as a JSON string.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.save_credentials","title":"save_credentials  <code>async</code>  \u21b2","text":"<pre><code>save_credentials(filename: str | Path | None) -&gt; None\n</code></pre> <p>Save authentication credentials to a file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str | Path | None</code> <p>The name of the file to save credentials to. If None, no action is taken.</p> required"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.set_credentials","title":"set_credentials \u21b2","text":"<pre><code>set_credentials(\n    token: str,\n    account_id: str,\n    country_code: str,\n    region: str,\n) -&gt; None\n</code></pre> <p>Set authentication credentials.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Authentication token.</p> required <code>account_id</code> <code>str</code> <p>Account ID.</p> required <code>country_code</code> <code>str</code> <p>Country code in ISO 3166 Alpha-2 format.</p> required <code>region</code> <code>str</code> <p>Current region code.</p> required"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Fetch updated information about devices and new device list.</p> <p>Pulls devices list from VeSync and instantiates any new devices. Devices are stored in the instance attributes <code>outlets</code>, <code>switches</code>, <code>fans</code>, and <code>bulbs</code>. The <code>_device_list</code> attribute is a dictionary of these attributes.</p>"},{"location":"development/vesync_api/#pyvesync.vesync.VeSync.update_all_devices","title":"update_all_devices  <code>async</code>  \u21b2","text":"<pre><code>update_all_devices() -&gt; None\n</code></pre> <p>Run <code>get_details()</code> for each device and update state.</p>"},{"location":"development/vesync_device_base/","title":"Documentation for Base Devices\u21b2","text":"<p>This is the base device inherited by all device classes. This should NOT be instantiated directly.</p> <p>All methods and attributes are available on all devices.</p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice","title":"VeSyncBaseToggleDevice \u21b2","text":"<pre><code>VeSyncBaseToggleDevice(\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: DeviceMapTemplate,\n)\n</code></pre> <p>               Bases: <code>VeSyncBaseDevice</code>, <code>Generic[VS_STATE_T]</code></p> <p>Base class for VeSync devices that can be toggled on and off.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>Device details from API call.</p> required <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> required <code>feature_map</code> <code>DeviceMapTemplate</code> <p>Device configuration map, will be specific subclass of DeviceMapTemplate based on device type.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>DeviceState</code> <p>Device state object Each device has a separate state base class in the base_devices module.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <p>Methods:</p> Name Description <code>set_timer</code> <p>Set timer for device.</p> <code>get_timer</code> <p>Get timer for device from API.</p> <code>clear_timer</code> <p>Clear timer for device from API.</p> <code>set_state</code> <p>Set device state attribute.</p> <code>get_state</code> <p>Get device state attribute.</p> <code>update</code> <p>Update device details.</p> <code>display</code> <p>Print formatted static device info to stdout.</p> <code>to_json</code> <p>Print JSON API string</p> <code>to_jsonb</code> <p>JSON API bytes device details</p> <code>to_dict</code> <p>Return device information as a dictionary.</p> <code>toggle_switch</code> <p>Toggle device power on or off.</p> <code>turn_on</code> <p>Turn device on.</p> <code>turn_off</code> <p>Turn device off.</p> Note <p>Device states are found in the <code>state</code> attribute in a subclass of DeviceState based on the device type. The <code>DeviceState</code> subclass is located in device the base_devices module.</p> <p>The <code>last_response</code> attribute is used to store the last response and error information from the API call. See the <code>pyvesync.errors</code> module for more information.</p> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Initialize VeSync device base class.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def __init__(\n    self,\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: DeviceMapTemplate,\n) -&gt; None:\n    \"\"\"Initialize VeSync device base class.\"\"\"\n    self._exclude_serialization: list[str] = []\n    self.enabled: bool = True\n    self.last_response: ResponseInfo | None = None\n    self.manager = manager\n    self.device_name: str = details.deviceName\n    self.device_image: str | None = details.deviceImg\n    self.cid: str = details.cid\n    self.connection_type: str | None = details.connectionType\n    self.device_type: str = details.deviceType\n    self.type: str | None = details.type\n    self.uuid: str | None = details.uuid\n    self.config_module: str = details.configModule\n    self.mac_id: str | None = details.macID\n    self.current_firm_version = details.currentFirmVersion\n    self.latest_firm_version: str | None = None\n    self.device_region: str | None = details.deviceRegion\n    self.pid: str | None = None\n    self.sub_device_no: int | None = details.subDeviceNo\n    # From feature_map\n    self.product_type: str = feature_map.product_type\n    self.features: list[str] = feature_map.features\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice-attributes","title":"Attributes\u21b2","text":""},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager = manager\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: VS_STATE_T\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice-functions","title":"Functions\u21b2","text":""},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    \"\"\"Clear timer for device from API.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    logger.debug('Not implemented - clear_timer')\n    return False\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.get_details","title":"get_details  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>@abstractmethod\nasync def get_details(self) -&gt; None:\n    \"\"\"Get device details.\n\n    This method is defined in each device class to contain\n    the logic to pull the device state from the API and update\n    the device's `state` attribute. The `update()` method should\n    be called to update the device state.\n    \"\"\"\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    \"\"\"Get timer for device from API and set the `state.Timer` attribute.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Note:\n        This method may not be implemented for all devices. Please\n        open an issue if there is an error.\n    \"\"\"\n    logger.debug('Not implemented - get_timer')\n    return None\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    \"\"\"Set timer for device.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Args:\n        duration (int): Duration in seconds.\n        action (str | None): Action to take when timer expires.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del duration\n    del action\n    logger.debug('Not implemented - set_timer')\n    return False\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.toggle_switch","title":"toggle_switch  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>@abstractmethod\nasync def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Toggle device power on or off.\n\n    Args:\n        toggle (bool | None): True to turn on, False to turn off, None to toggle.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice","title":"VeSyncBaseDevice \u21b2","text":"<pre><code>VeSyncBaseDevice(\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: DeviceMapTemplate,\n)\n</code></pre> <p>               Bases: <code>ABC</code>, <code>Generic[VS_STATE_T]</code></p> <p>Properties shared across all VeSync devices.</p> <p>Abstract Base Class for all VeSync devices. The device class is used solely for operational methods and static device properties.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>Device details from API call.</p> required <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> required <code>feature_map</code> <code>DeviceMapTemplate</code> <p>Device configuration map, will be specific subclass of DeviceMapTemplate based on device type.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>DeviceState</code> <p>Device state object Each device has a separate state base class in the base_devices module.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>latest_firm_version</code> <code>str | None</code> <p>Latest firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <p>Methods:</p> Name Description <code>set_timer</code> <p>Set timer for device.</p> <code>get_timer</code> <p>Get timer for device from API.</p> <code>clear_timer</code> <p>Clear timer for device from API.</p> <code>set_state</code> <p>Set device state attribute.</p> <code>get_state</code> <p>Get device state attribute.</p> <code>update</code> <p>Update device details.</p> <code>display</code> <p>Print formatted static device info to stdout.</p> <code>to_json</code> <p>Print JSON API string</p> <code>to_jsonb</code> <p>JSON API bytes device details</p> <code>to_dict</code> <p>Return device information as a dictionary.</p> Note <p>Device states are found in the <code>state</code> attribute in a subclass of DeviceState based on the device type. The <code>DeviceState</code> subclass is located in device the base_devices module.</p> <p>The <code>last_response</code> attribute is used to store the last response and error information from the API call. See the <code>pyvesync.errors</code> module for more information.</p> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Initialize VeSync device base class.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def __init__(\n    self,\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: DeviceMapTemplate,\n) -&gt; None:\n    \"\"\"Initialize VeSync device base class.\"\"\"\n    self._exclude_serialization: list[str] = []\n    self.enabled: bool = True\n    self.last_response: ResponseInfo | None = None\n    self.manager = manager\n    self.device_name: str = details.deviceName\n    self.device_image: str | None = details.deviceImg\n    self.cid: str = details.cid\n    self.connection_type: str | None = details.connectionType\n    self.device_type: str = details.deviceType\n    self.type: str | None = details.type\n    self.uuid: str | None = details.uuid\n    self.config_module: str = details.configModule\n    self.mac_id: str | None = details.macID\n    self.current_firm_version = details.currentFirmVersion\n    self.latest_firm_version: str | None = None\n    self.device_region: str | None = details.deviceRegion\n    self.pid: str | None = None\n    self.sub_device_no: int | None = details.subDeviceNo\n    # From feature_map\n    self.product_type: str = feature_map.product_type\n    self.features: list[str] = feature_map.features\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice-attributes","title":"Attributes\u21b2","text":""},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager = manager\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: VS_STATE_T\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice-functions","title":"Functions\u21b2","text":""},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    \"\"\"Clear timer for device from API.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    logger.debug('Not implemented - clear_timer')\n    return False\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.get_details","title":"get_details  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>@abstractmethod\nasync def get_details(self) -&gt; None:\n    \"\"\"Get device details.\n\n    This method is defined in each device class to contain\n    the logic to pull the device state from the API and update\n    the device's `state` attribute. The `update()` method should\n    be called to update the device state.\n    \"\"\"\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    \"\"\"Get timer for device from API and set the `state.Timer` attribute.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Note:\n        This method may not be implemented for all devices. Please\n        open an issue if there is an error.\n    \"\"\"\n    logger.debug('Not implemented - get_timer')\n    return None\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    \"\"\"Set timer for device.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Args:\n        duration (int): Duration in seconds.\n        action (str | None): Action to take when timer expires.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del duration\n    del action\n    logger.debug('Not implemented - set_timer')\n    return False\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.DeviceState","title":"DeviceState \u21b2","text":"<pre><code>DeviceState(\n    device: VeSyncBaseDevice,\n    details: ResponseDeviceDetailsModel,\n    feature_map: DeviceMapTemplate,\n)\n</code></pre> <p>Base dataclass to hold device state.</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>VeSyncBaseDevice</code> <p>Device object.</p> required <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>Device details from API call.</p> required <code>feature_map</code> <code>DeviceMapTemplate</code> <p>Device configuration map, will be specific subclass of DeviceMapTemplate based on device type.</p> required <p>Attributes:</p> Name Type Description <code>active_time</code> <code>int</code> <p>Active time of device, defaults to None.</p> <code>connection_status</code> <code>str</code> <p>Connection status of device.</p> <code>device</code> <code>VeSyncBaseDevice</code> <p>Device object.</p> <code>device_status</code> <code>str</code> <p>Device status.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <code>last_update_ts</code> <code>int</code> <p>Last update timestamp in UTC, defaults to None.</p> <p>Methods:</p> Name Description <code>update_ts</code> <p>Update last update timestamp.</p> <code>to_dict</code> <p>Dump state to JSON.</p> <code>to_json</code> <p>Dump state to JSON string.</p> <code>to_jsonb</code> <p>Dump state to JSON bytes.</p> <code>as_tuple</code> <p>Convert state to tuple of (name, value) tuples.</p> Note <p>This cannot be instantiated directly. It should be inherited by the state class of a specific product type.</p> <p>Initialize device state.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def __init__(\n    self,\n    device: VeSyncBaseDevice,\n    details: ResponseDeviceDetailsModel,\n    feature_map: DeviceMapTemplate,\n) -&gt; None:\n    \"\"\"Initialize device state.\"\"\"\n    self.__base_exclusions: list[str] = ['manager', 'device', 'state']\n    self._exclude_serialization: list[str] = []\n    self.device = device\n    self.device_status: str = details.deviceStatus or DeviceStatus.UNKNOWN\n    self.connection_status: str = details.connectionStatus or ConnectionStatus.UNKNOWN\n    self.features = feature_map.features\n    self.last_update_ts: int | None = None\n    self.active_time: int | None = None\n    self.timer: Timer | None = None\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.DeviceState-attributes","title":"Attributes\u21b2","text":""},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.DeviceState.active_time","title":"active_time  <code>instance-attribute</code>  \u21b2","text":"<pre><code>active_time: int | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.DeviceState.connection_status","title":"connection_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_status: str = connectionStatus or UNKNOWN\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.DeviceState.device","title":"device  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device = device\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.DeviceState.device_status","title":"device_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_status: str = deviceStatus or UNKNOWN\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.DeviceState.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features = features\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.DeviceState.last_update_ts","title":"last_update_ts  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_update_ts: int | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.DeviceState.timer","title":"timer  <code>instance-attribute</code>  \u21b2","text":"<pre><code>timer: Timer | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.DeviceState-functions","title":"Functions\u21b2","text":""},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.DeviceState.as_tuple","title":"as_tuple \u21b2","text":"<pre><code>as_tuple() -&gt; tuple[tuple[str, Any], ...]\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to tuple of (name, value) tuples.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def as_tuple(self) -&gt; tuple[tuple[str, Any], ...]:\n    \"\"\"Convert state to tuple of (name, value) tuples.\"\"\"\n    return tuple((k, v) for k, v in self._serialize().items())\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.DeviceState.display","title":"display \u21b2","text":"<pre><code>display() -&gt; None\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Print formatted state to stdout.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self) -&gt; None:\n    \"\"\"Print formatted state to stdout.\"\"\"\n    for name, val in self._serialize().items():\n        print(f'{name:.&lt;30} {val}')  # noqa: T201\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.DeviceState.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to dictionary.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Convert state to dictionary.\"\"\"\n    return self._serialize()\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.DeviceState.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(indent: bool = False) -&gt; str\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Dump state to JSON string.</p> <p>Parameters:</p> Name Type Description Default <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device state.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, indent: bool = False) -&gt; str:\n    \"\"\"Dump state to JSON string.\n\n    Args:\n        indent (bool): If True, indent JSON output, defaults to False.\n\n    Returns:\n        str: JSON formatted string of device state.\n    \"\"\"\n    return self.to_jsonb(indent=indent).decode()\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.DeviceState.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(indent: bool = False) -&gt; bytes\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to JSON bytes.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, indent: bool = False) -&gt; bytes:\n    \"\"\"Convert state to JSON bytes.\"\"\"\n    if indent:\n        return orjson.dumps(\n            self._serialize(), option=orjson.OPT_NON_STR_KEYS | orjson.OPT_INDENT_2\n        )\n    return orjson.dumps(self._serialize(), option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"development/vesync_device_base/#pyvesync.base_devices.vesyncbasedevice.DeviceState.update_ts","title":"update_ts \u21b2","text":"<pre><code>update_ts() -&gt; None\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Update last update timestamp as UTC timestamp.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def update_ts(self) -&gt; None:\n    \"\"\"Update last update timestamp as UTC timestamp.\"\"\"\n    self.last_update_ts = int(dt.now(tz=UTC).timestamp())\n</code></pre>"},{"location":"development/utils/colors/","title":"Color Handlers\u21b2","text":"<p>The <code>pyvesync.utils.colors</code> module provides classes and functions for handling color conversions and representations. It includes the <code>Color</code> class, which serves as a base for color manipulation, and the <code>HSV</code> and <code>RGB</code> classes for specific color models. The module is designed for internal use within the library and is not intended for public use.</p>"},{"location":"development/utils/colors/#color-class","title":"Color class\u21b2","text":"<p>This is the primary class that holds the color data and provides methods for conversion between different color models (RGB, HSV). It also includes methods for validating color values and generating color strings in various formats.</p>"},{"location":"development/utils/colors/#pyvesync.utils.colors.Color","title":"pyvesync.utils.colors.Color  <code>dataclass</code>  \u21b2","text":"<p>Dataclass for color values.</p> <p>This class should be instantiated through the <code>from_rgb</code> or <code>from_hsv</code> classmethods. It will return a <code>Color</code> object with the appropriate color values in RGB and HSV.</p> <p>Parameters:</p> Name Type Description Default <code>color_object</code> <code>HSV | RGB</code> <p>Named tuple with color values.</p> required <p>Attributes:</p> Name Type Description <code>hsv</code> <code>namedtuple</code> <p>hue (0-360), saturation (0-100), value (0-100) see <code>HSV dataclass</code></p> <code>rgb</code> <code>namedtuple</code> <p>red (0-255), green (0-255), blue (0-255) see <code>RGB dataclass</code></p> Source code in <code>src\\pyvesync\\utils\\colors.py</code> <pre><code>@dataclass\nclass Color:\n    \"\"\"Dataclass for color values.\n\n    This class should be instantiated through the `from_rgb` or `from_hsv`\n    classmethods. It will return a `Color` object with the appropriate color\n    values in RGB and HSV.\n\n    Args:\n        color_object (HSV | RGB): Named tuple with color values.\n\n    Attributes:\n        hsv (namedtuple): hue (0-360), saturation (0-100), value (0-100)\n            see [`HSV dataclass`][pyvesync.utils.colors.HSV]\n        rgb (namedtuple): red (0-255), green (0-255), blue (0-255)\n            see [`RGB dataclass`][pyvesync.utils.colors.RGB]\n    \"\"\"\n\n    color_object: InitVar[HSV | RGB]\n\n    def __post_init__(\n        self,\n        color_object: HSV | RGB,\n    ) -&gt; None:\n        \"\"\"Check HSV or RGB Values and create named tuples.\"\"\"\n        if isinstance(color_object, HSV):\n            self.hsv = color_object\n            self.rgb = self.hsv_to_rgb(*self.hsv.to_tuple())\n        elif isinstance(color_object, RGB):\n            self.rgb = color_object\n            self.hsv = self.rgb_to_hsv(*self.rgb.to_tuple())\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return string representation.\"\"\"\n        return f'Color(hsv={self.hsv}, rgb={self.rgb})'\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Return string representation.\"\"\"\n        return f'Color(hsv={self.hsv}, rgb={self.rgb})'\n\n    def as_dict(self) -&gt; dict[str, dict]:\n        \"\"\"Return color values as dict.\"\"\"\n        return {\n            'hsv': {\n                'hue': self.hsv.hue,\n                'saturation': self.hsv.saturation,\n                'value': self.hsv.value,\n            },\n            'rgb': {\n                'red': self.rgb.red,\n                'green': self.rgb.green,\n                'blue': self.rgb.blue,\n            },\n        }\n\n    @classmethod\n    def from_rgb(\n        cls, red: float | None, green: float | None, blue: float | None\n    ) -&gt; Color | None:\n        \"\"\"Create Color instance from RGB values.\n\n        Args:\n            red (NUMERIC_STRICT): The red component of the color,\n                typically in the range [0, 255].\n            green (NUMERIC_STRICT): The green component of the color,\n                typically in the range [0, 255].\n            blue (NUMERIC_STRICT): The blue component of the color,\n                typically in the range [0, 255].\n\n        Returns:\n            Color | None: A Color object with the appropriate color values in RGB and HSV,\n                or None if the input values are invalid.\n        \"\"\"\n        if not Validators.validate_rgb(red, green, blue):\n            _LOGGER.debug('Invalid RGB values')\n            return None\n        return cls(RGB(float(red), float(green), float(blue)))  # type: ignore[arg-type]\n\n    @classmethod\n    def from_hsv(\n        cls, hue: float | None, saturation: float | None, value: float | None\n    ) -&gt; Color | None:\n        \"\"\"Create Color instance from HSV values.\n\n        Args:\n            hue (float): The hue component of the color,\n                in the range [0, 360).\n            saturation (float): The saturation component of the color,\n                typically in the range [0, 1].\n            value (float): The value (brightness) component of the color,\n                typically in the range [0, 1].\n\n        Returns:\n            Color | None: A Color object with the appropriate color values in RGB and HSV,\n                or None if the input values are invalid.\n        \"\"\"\n        if not Validators.validate_hsv(hue, saturation, value):\n            _LOGGER.debug('Invalid HSV values')\n            return None\n        return cls(\n            HSV(float(hue), float(saturation), float(value))  # type: ignore[arg-type]\n        )\n\n    @staticmethod\n    def hsv_to_rgb(hue: float, saturation: float, value: float) -&gt; RGB:\n        \"\"\"Convert HSV to RGB.\n\n        Args:\n            hue (float): The hue component of the color, in the range [0, 360).\n            saturation (float): The saturation component of the color,\n                in the range [0, 1].\n            value (float): The value (brightness) component of the color,\n                in the range [0, 1].\n\n        Returns:\n            RGB: An RGB dataclass with red, green, and blue components.\n        \"\"\"\n        return RGB(\n            *tuple(\n                round(i * 255, 0)\n                for i in colorsys.hsv_to_rgb(hue / 360, saturation / 100, value / 100)\n            )\n        )\n\n    @staticmethod\n    def rgb_to_hsv(red: float, green: float, blue: float) -&gt; HSV:\n        \"\"\"Convert RGB to HSV.\n\n        Args:\n            red (float): The red component of the color, in the range [0, 255].\n            green (float): The green component of the color, in the range [0, 255].\n            blue (float): The blue component of the color, in the range [0, 255].\n\n        Returns:\n            HSV: An HSV dataclass with hue, saturation, and value components.\n        \"\"\"\n        hsv_tuple = colorsys.rgb_to_hsv(red / 255, green / 255, blue / 255)\n        hsv_factors = [360, 100, 100]\n\n        return HSV(\n            float(round(hsv_tuple[0] * hsv_factors[0], 2)),\n            float(round(hsv_tuple[1] * hsv_factors[1], 2)),\n            float(round(hsv_tuple[2] * hsv_factors[2], 0)),\n        )\n</code></pre>"},{"location":"development/utils/colors/#pyvesync.utils.colors.Color.__repr__","title":"__repr__ \u21b2","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return string representation.</p> Source code in <code>src\\pyvesync\\utils\\colors.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return string representation.\"\"\"\n    return f'Color(hsv={self.hsv}, rgb={self.rgb})'\n</code></pre>"},{"location":"development/utils/colors/#pyvesync.utils.colors.Color.as_dict","title":"as_dict \u21b2","text":"<pre><code>as_dict() -&gt; dict[str, dict]\n</code></pre> <p>Return color values as dict.</p> Source code in <code>src\\pyvesync\\utils\\colors.py</code> <pre><code>def as_dict(self) -&gt; dict[str, dict]:\n    \"\"\"Return color values as dict.\"\"\"\n    return {\n        'hsv': {\n            'hue': self.hsv.hue,\n            'saturation': self.hsv.saturation,\n            'value': self.hsv.value,\n        },\n        'rgb': {\n            'red': self.rgb.red,\n            'green': self.rgb.green,\n            'blue': self.rgb.blue,\n        },\n    }\n</code></pre>"},{"location":"development/utils/colors/#pyvesync.utils.colors.Color.from_hsv","title":"from_hsv  <code>classmethod</code>  \u21b2","text":"<pre><code>from_hsv(\n    hue: float | None,\n    saturation: float | None,\n    value: float | None,\n) -&gt; Color | None\n</code></pre> <p>Create Color instance from HSV values.</p> <p>Parameters:</p> Name Type Description Default <code>hue</code> <code>float</code> <p>The hue component of the color, in the range [0, 360).</p> required <code>saturation</code> <code>float</code> <p>The saturation component of the color, typically in the range [0, 1].</p> required <code>value</code> <code>float</code> <p>The value (brightness) component of the color, typically in the range [0, 1].</p> required <p>Returns:</p> Type Description <code>Color | None</code> <p>Color | None: A Color object with the appropriate color values in RGB and HSV, or None if the input values are invalid.</p> Source code in <code>src\\pyvesync\\utils\\colors.py</code> <pre><code>@classmethod\ndef from_hsv(\n    cls, hue: float | None, saturation: float | None, value: float | None\n) -&gt; Color | None:\n    \"\"\"Create Color instance from HSV values.\n\n    Args:\n        hue (float): The hue component of the color,\n            in the range [0, 360).\n        saturation (float): The saturation component of the color,\n            typically in the range [0, 1].\n        value (float): The value (brightness) component of the color,\n            typically in the range [0, 1].\n\n    Returns:\n        Color | None: A Color object with the appropriate color values in RGB and HSV,\n            or None if the input values are invalid.\n    \"\"\"\n    if not Validators.validate_hsv(hue, saturation, value):\n        _LOGGER.debug('Invalid HSV values')\n        return None\n    return cls(\n        HSV(float(hue), float(saturation), float(value))  # type: ignore[arg-type]\n    )\n</code></pre>"},{"location":"development/utils/colors/#pyvesync.utils.colors.Color.from_rgb","title":"from_rgb  <code>classmethod</code>  \u21b2","text":"<pre><code>from_rgb(\n    red: float | None,\n    green: float | None,\n    blue: float | None,\n) -&gt; Color | None\n</code></pre> <p>Create Color instance from RGB values.</p> <p>Parameters:</p> Name Type Description Default <code>red</code> <code>NUMERIC_STRICT</code> <p>The red component of the color, typically in the range [0, 255].</p> required <code>green</code> <code>NUMERIC_STRICT</code> <p>The green component of the color, typically in the range [0, 255].</p> required <code>blue</code> <code>NUMERIC_STRICT</code> <p>The blue component of the color, typically in the range [0, 255].</p> required <p>Returns:</p> Type Description <code>Color | None</code> <p>Color | None: A Color object with the appropriate color values in RGB and HSV, or None if the input values are invalid.</p> Source code in <code>src\\pyvesync\\utils\\colors.py</code> <pre><code>@classmethod\ndef from_rgb(\n    cls, red: float | None, green: float | None, blue: float | None\n) -&gt; Color | None:\n    \"\"\"Create Color instance from RGB values.\n\n    Args:\n        red (NUMERIC_STRICT): The red component of the color,\n            typically in the range [0, 255].\n        green (NUMERIC_STRICT): The green component of the color,\n            typically in the range [0, 255].\n        blue (NUMERIC_STRICT): The blue component of the color,\n            typically in the range [0, 255].\n\n    Returns:\n        Color | None: A Color object with the appropriate color values in RGB and HSV,\n            or None if the input values are invalid.\n    \"\"\"\n    if not Validators.validate_rgb(red, green, blue):\n        _LOGGER.debug('Invalid RGB values')\n        return None\n    return cls(RGB(float(red), float(green), float(blue)))  # type: ignore[arg-type]\n</code></pre>"},{"location":"development/utils/colors/#pyvesync.utils.colors.Color.hsv_to_rgb","title":"hsv_to_rgb  <code>staticmethod</code>  \u21b2","text":"<pre><code>hsv_to_rgb(\n    hue: float, saturation: float, value: float\n) -&gt; RGB\n</code></pre> <p>Convert HSV to RGB.</p> <p>Parameters:</p> Name Type Description Default <code>hue</code> <code>float</code> <p>The hue component of the color, in the range [0, 360).</p> required <code>saturation</code> <code>float</code> <p>The saturation component of the color, in the range [0, 1].</p> required <code>value</code> <code>float</code> <p>The value (brightness) component of the color, in the range [0, 1].</p> required <p>Returns:</p> Name Type Description <code>RGB</code> <code>RGB</code> <p>An RGB dataclass with red, green, and blue components.</p> Source code in <code>src\\pyvesync\\utils\\colors.py</code> <pre><code>@staticmethod\ndef hsv_to_rgb(hue: float, saturation: float, value: float) -&gt; RGB:\n    \"\"\"Convert HSV to RGB.\n\n    Args:\n        hue (float): The hue component of the color, in the range [0, 360).\n        saturation (float): The saturation component of the color,\n            in the range [0, 1].\n        value (float): The value (brightness) component of the color,\n            in the range [0, 1].\n\n    Returns:\n        RGB: An RGB dataclass with red, green, and blue components.\n    \"\"\"\n    return RGB(\n        *tuple(\n            round(i * 255, 0)\n            for i in colorsys.hsv_to_rgb(hue / 360, saturation / 100, value / 100)\n        )\n    )\n</code></pre>"},{"location":"development/utils/colors/#pyvesync.utils.colors.Color.rgb_to_hsv","title":"rgb_to_hsv  <code>staticmethod</code>  \u21b2","text":"<pre><code>rgb_to_hsv(red: float, green: float, blue: float) -&gt; HSV\n</code></pre> <p>Convert RGB to HSV.</p> <p>Parameters:</p> Name Type Description Default <code>red</code> <code>float</code> <p>The red component of the color, in the range [0, 255].</p> required <code>green</code> <code>float</code> <p>The green component of the color, in the range [0, 255].</p> required <code>blue</code> <code>float</code> <p>The blue component of the color, in the range [0, 255].</p> required <p>Returns:</p> Name Type Description <code>HSV</code> <code>HSV</code> <p>An HSV dataclass with hue, saturation, and value components.</p> Source code in <code>src\\pyvesync\\utils\\colors.py</code> <pre><code>@staticmethod\ndef rgb_to_hsv(red: float, green: float, blue: float) -&gt; HSV:\n    \"\"\"Convert RGB to HSV.\n\n    Args:\n        red (float): The red component of the color, in the range [0, 255].\n        green (float): The green component of the color, in the range [0, 255].\n        blue (float): The blue component of the color, in the range [0, 255].\n\n    Returns:\n        HSV: An HSV dataclass with hue, saturation, and value components.\n    \"\"\"\n    hsv_tuple = colorsys.rgb_to_hsv(red / 255, green / 255, blue / 255)\n    hsv_factors = [360, 100, 100]\n\n    return HSV(\n        float(round(hsv_tuple[0] * hsv_factors[0], 2)),\n        float(round(hsv_tuple[1] * hsv_factors[1], 2)),\n        float(round(hsv_tuple[2] * hsv_factors[2], 0)),\n    )\n</code></pre>"},{"location":"development/utils/colors/#pyvesync.utils.colors.HSV","title":"pyvesync.utils.colors.HSV  <code>dataclass</code>  \u21b2","text":"<p>HSV color space dataclass, for internal use in <code>utils.colors.Color</code> dataclass.</p> <p>Does not perform any validation and should not be used directly, only by the <code>Color</code> dataclass through the Color.from_hsv(hue, saturation, value) classmethod or Color.rgb_to_hsv(red, green, blue) method.</p> <p>Attributes:</p> Name Type Description <code>hue</code> <code>float</code> <p>The hue component of the color, typically in the range [0, 360).</p> <code>saturation</code> <code>float</code> <p>The saturation component of the color, typically in the range [0, 1].</p> <code>value</code> <code>float</code> <p>The value (brightness) component of the color, typically in the range [0, 1].</p> Source code in <code>src\\pyvesync\\utils\\colors.py</code> <pre><code>@dataclass\nclass HSV:\n    \"\"\"HSV color space dataclass, for internal use in `utils.colors.Color` dataclass.\n\n    Does not perform any validation and should not be used directly, only\n    by the `Color` dataclass through the Color.from_hsv(hue, saturation, value)\n    classmethod or Color.rgb_to_hsv(red, green, blue) method.\n\n    Attributes:\n        hue (float): The hue component of the color, typically in the range [0, 360).\n        saturation (float): The saturation component of the color,\n            typically in the range [0, 1].\n        value (float): The value (brightness) component of the color,\n            typically in the range [0, 1].\n    \"\"\"\n\n    hue: float\n    saturation: float\n    value: float\n\n    def __post_init__(self) -&gt; None:\n        \"\"\"Convert to int.\"\"\"\n        self.hue = int(self.hue)\n        self.saturation = int(self.saturation)\n        self.value = int(self.value)\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return string representation.\"\"\"\n        return f'HSV({self.hue}, {self.saturation}, {self.value})'\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Return string representation.\"\"\"\n        return f'HSV(hue={self.hue}, saturation={self.saturation}, value={self.value})'\n\n    def to_tuple(self) -&gt; tuple[float, float, float]:\n        \"\"\"Return HSV values as tuple.\"\"\"\n        return self.hue, self.saturation, self.value\n\n    def to_dict(self) -&gt; dict[str, float]:\n        \"\"\"Return HSV values as dict.\"\"\"\n        return {\n            'hue': self.hue,\n            'saturation': self.saturation,\n            'value': self.value,\n        }\n</code></pre>"},{"location":"development/utils/colors/#pyvesync.utils.colors.HSV.__repr__","title":"__repr__ \u21b2","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return string representation.</p> Source code in <code>src\\pyvesync\\utils\\colors.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return string representation.\"\"\"\n    return f'HSV(hue={self.hue}, saturation={self.saturation}, value={self.value})'\n</code></pre>"},{"location":"development/utils/colors/#pyvesync.utils.colors.HSV.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict() -&gt; dict[str, float]\n</code></pre> <p>Return HSV values as dict.</p> Source code in <code>src\\pyvesync\\utils\\colors.py</code> <pre><code>def to_dict(self) -&gt; dict[str, float]:\n    \"\"\"Return HSV values as dict.\"\"\"\n    return {\n        'hue': self.hue,\n        'saturation': self.saturation,\n        'value': self.value,\n    }\n</code></pre>"},{"location":"development/utils/colors/#pyvesync.utils.colors.HSV.to_tuple","title":"to_tuple \u21b2","text":"<pre><code>to_tuple() -&gt; tuple[float, float, float]\n</code></pre> <p>Return HSV values as tuple.</p> Source code in <code>src\\pyvesync\\utils\\colors.py</code> <pre><code>def to_tuple(self) -&gt; tuple[float, float, float]:\n    \"\"\"Return HSV values as tuple.\"\"\"\n    return self.hue, self.saturation, self.value\n</code></pre>"},{"location":"development/utils/colors/#pyvesync.utils.colors.RGB","title":"pyvesync.utils.colors.RGB  <code>dataclass</code>  \u21b2","text":"<p>RGB color space dataclass, for internal use in <code>utils.colors.Color</code> dataclass.</p> <p>Does not perform any validation, it should not be used directly. Used as an attribute in the :obj:<code>pyvesync.helpers.Color</code> dataclass. This should only be used through the :obj:<code>Color</code> dataclass with the Color.from_rgb(red, green, blue) classmethod.</p> <p>Attributes:</p> Name Type Description <code>red</code> <code>float</code> <p>The red component of the RGB color.</p> <code>green</code> <code>float</code> <p>The green component of the RGB color.</p> <code>blue</code> <code>float</code> <p>The blue component of the RGB color.</p> Source code in <code>src\\pyvesync\\utils\\colors.py</code> <pre><code>@dataclass\nclass RGB:\n    \"\"\"RGB color space dataclass, for internal use in `utils.colors.Color` dataclass.\n\n    Does not perform any validation, it should not be used directly. Used as an\n    attribute in the :obj:`pyvesync.helpers.Color` dataclass. This should only be\n    used through the :obj:`Color` dataclass with the Color.from_rgb(red, green, blue)\n    classmethod.\n\n    Attributes:\n        red (float): The red component of the RGB color.\n        green (float): The green component of the RGB color.\n        blue (float): The blue component of the RGB color.\n    \"\"\"\n\n    red: float\n    green: float\n    blue: float\n\n    def __post_init__(self) -&gt; None:\n        \"\"\"Convert to int.\"\"\"\n        self.red = int(self.red)\n        self.green = int(self.green)\n        self.blue = int(self.blue)\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return string representation.\"\"\"\n        return f'RGB({self.red}, {self.green}, {self.blue})'\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Return string representation.\"\"\"\n        return f'RGB(red={self.red}, green={self.green}, blue={self.blue})'\n\n    def to_tuple(self) -&gt; tuple[float, float, float]:\n        \"\"\"Return RGB values as tuple.\"\"\"\n        return self.red, self.green, self.blue\n\n    def to_dict(self) -&gt; dict[str, float]:\n        \"\"\"Return RGB values as dict.\"\"\"\n        return {\n            'red': self.red,\n            'green': self.green,\n            'blue': self.blue,\n        }\n</code></pre>"},{"location":"development/utils/colors/#pyvesync.utils.colors.RGB.__repr__","title":"__repr__ \u21b2","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return string representation.</p> Source code in <code>src\\pyvesync\\utils\\colors.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return string representation.\"\"\"\n    return f'RGB(red={self.red}, green={self.green}, blue={self.blue})'\n</code></pre>"},{"location":"development/utils/colors/#pyvesync.utils.colors.RGB.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict() -&gt; dict[str, float]\n</code></pre> <p>Return RGB values as dict.</p> Source code in <code>src\\pyvesync\\utils\\colors.py</code> <pre><code>def to_dict(self) -&gt; dict[str, float]:\n    \"\"\"Return RGB values as dict.\"\"\"\n    return {\n        'red': self.red,\n        'green': self.green,\n        'blue': self.blue,\n    }\n</code></pre>"},{"location":"development/utils/colors/#pyvesync.utils.colors.RGB.to_tuple","title":"to_tuple \u21b2","text":"<pre><code>to_tuple() -&gt; tuple[float, float, float]\n</code></pre> <p>Return RGB values as tuple.</p> Source code in <code>src\\pyvesync\\utils\\colors.py</code> <pre><code>def to_tuple(self) -&gt; tuple[float, float, float]:\n    \"\"\"Return RGB values as tuple.\"\"\"\n    return self.red, self.green, self.blue\n</code></pre>"},{"location":"development/utils/device_mixins/","title":"Device Mixins\u21b2","text":"<p>The <code>pyvesync.utils.device_mixins</code> modules are used to add boilerplate code for the common API requests that are used by different devices.</p> <p>Please reference Development for more information on how to use the device mixins.</p>"},{"location":"development/utils/device_mixins/#bypass-v1-mixins-and-functions","title":"Bypass V1 Mixins and functions\u21b2","text":""},{"location":"development/utils/device_mixins/#pyvesync.utils.device_mixins.BypassV1Mixin","title":"pyvesync.utils.device_mixins.BypassV1Mixin \u21b2","text":"<p>Mixin for bypass V1 API.</p> <p>Overrides the <code>_build_request</code> method and <code>request_keys</code> attribute for devices that use the Bypass V1 API- /cloud/v1/deviceManaged/bypass. The primary method to call is <code>call_bypassv1_api</code>, which is a wrapper for setting up the request body and calling the API. The <code>bypass</code> endpoint can also be overridden for specific API calls.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>class BypassV1Mixin:\n    \"\"\"Mixin for bypass V1 API.\n\n    Overrides the `_build_request` method and `request_keys` attribute for devices\n    that use the Bypass V1 API- /cloud/v1/deviceManaged/bypass. The primary method to\n    call is `call_bypassv1_api`, which is a wrapper for setting up the request body and\n    calling the API. The `bypass` endpoint can also be overridden for specific API calls.\n    \"\"\"\n\n    if TYPE_CHECKING:\n        manager: VeSync\n\n    __slots__ = ()\n    request_keys: ClassVar[list[str]] = [\n        'acceptLanguage',\n        'appVersion',\n        'phoneBrand',\n        'phoneOS',\n        'accountID',\n        'cid',\n        'configModule',\n        'debugMode',\n        'traceId',\n        'timeZone',\n        'token',\n        'userCountryCode',\n        'uuid',\n        'configModel',\n        'deviceId',\n    ]\n\n    def _build_request(\n        self,\n        request_model: type[RequestBypassV1],\n        update_dict: dict | None = None,\n        method: str = 'bypass',\n    ) -&gt; RequestBypassV1:\n        \"\"\"Build API request body for the Bypass V1 endpoint.\n\n        Args:\n            request_model (type[RequestBypassV1]): The request model to use.\n            update_dict (dict | None): Additional keys to add on.\n            method (str): The method to use in the outer body, defaults to bypass.\n\n        Returns:\n            RequestBypassV1: The request body for the Bypass V1 endpoint, the correct\n            model is determined from the RequestBypassV1 discriminator.\n        \"\"\"\n        body = Helpers.get_class_attributes(DefaultValues, self.request_keys)\n        body.update(Helpers.get_class_attributes(self.manager, self.request_keys))\n        body.update(Helpers.get_class_attributes(self, self.request_keys))\n        body['method'] = method\n        body.update(update_dict or {})\n        return request_model.from_dict(body)\n\n    async def call_bypassv1_api(\n        self,\n        request_model: type[RequestBypassV1],\n        update_dict: dict | None = None,\n        method: str = 'bypass',\n        endpoint: str = 'bypass',\n    ) -&gt; dict | None:\n        \"\"\"Send ByPass V1 API request.\n\n        This uses the `_build_request` method to send API requests to the Bypass V1 API.\n        The endpoint can be overridden with the `endpoint` argument.\n\n        Args:\n            request_model (type[RequestBypassV1]): The request model to use.\n            update_dict (dict): Additional keys to add on.\n            method (str): The method to use in the outer body.\n            endpoint (str | None): The last part of the url path, defaults to\n                `bypass`, e.g. `/cloud/v1/deviceManaged/bypass`.\n\n        Returns:\n            bytes: The response from the API request.\n        \"\"\"\n        request = self._build_request(request_model, update_dict, method)\n        url_path = BYPASS_V1_PATH + endpoint\n        resp_dict, _ = await self.manager.async_call_api(\n            url_path, 'post', request, Helpers.req_header_bypass()\n        )\n\n        return resp_dict\n</code></pre>"},{"location":"development/utils/device_mixins/#pyvesync.utils.device_mixins.BypassV1Mixin.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p>"},{"location":"development/utils/device_mixins/#pyvesync.utils.device_mixins.BypassV1Mixin.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'uuid',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p>"},{"location":"development/utils/device_mixins/#pyvesync.utils.device_mixins.BypassV1Mixin.call_bypassv1_api","title":"call_bypassv1_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv1_api(\n    request_model: type[RequestBypassV1],\n    update_dict: dict | None = None,\n    method: str = 'bypass',\n    endpoint: str = 'bypass',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p> <p>Send ByPass V1 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V1 API. The endpoint can be overridden with the <code>endpoint</code> argument.</p> <p>Parameters:</p> Name Type Description Default <code>request_model</code> <code>type[RequestBypassV1]</code> <p>The request model to use.</p> required <code>update_dict</code> <code>dict</code> <p>Additional keys to add on.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypass'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the url path, defaults to <code>bypass</code>, e.g. <code>/cloud/v1/deviceManaged/bypass</code>.</p> <code>'bypass'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv1_api(\n    self,\n    request_model: type[RequestBypassV1],\n    update_dict: dict | None = None,\n    method: str = 'bypass',\n    endpoint: str = 'bypass',\n) -&gt; dict | None:\n    \"\"\"Send ByPass V1 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V1 API.\n    The endpoint can be overridden with the `endpoint` argument.\n\n    Args:\n        request_model (type[RequestBypassV1]): The request model to use.\n        update_dict (dict): Additional keys to add on.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the url path, defaults to\n            `bypass`, e.g. `/cloud/v1/deviceManaged/bypass`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(request_model, update_dict, method)\n    url_path = BYPASS_V1_PATH + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        url_path, 'post', request, Helpers.req_header_bypass()\n    )\n\n    return resp_dict\n</code></pre>"},{"location":"development/utils/device_mixins/#pyvesync.utils.device_mixins.process_bypassv1_result","title":"pyvesync.utils.device_mixins.process_bypassv1_result \u21b2","text":"<pre><code>process_bypassv1_result(\n    device: VeSyncBaseDevice,\n    logger: Logger,\n    method: str,\n    resp_dict: dict | None,\n    model: type[T_MODEL],\n) -&gt; T_MODEL | None\n</code></pre> <p>Process the Bypass V1 API response.</p> <p>This will gracefully handle errors in the response and error codes, logging them as needed. The return value is the built model.</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>VeSyncBaseDevice</code> <p>The device object.</p> required <code>logger</code> <code>Logger</code> <p>The logger to use for logging.</p> required <code>method</code> <code>str</code> <p>The method used in the payload.</p> required <code>resp_dict</code> <code>dict | str</code> <p>The api response.</p> required <code>model</code> <code>type[T_MODEL]</code> <p>The model to use for the response.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>T_MODEL | None</code> <p>The response data</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>def process_bypassv1_result(\n    device: VeSyncBaseDevice,\n    logger: Logger,\n    method: str,\n    resp_dict: dict | None,\n    model: type[T_MODEL],\n) -&gt; T_MODEL | None:\n    \"\"\"Process the Bypass V1 API response.\n\n    This will gracefully handle errors in the response and error codes,\n    logging them as needed. The return value is the built model.\n\n    Args:\n        device (VeSyncBaseDevice): The device object.\n        logger (Logger): The logger to use for logging.\n        method (str): The method used in the payload.\n        resp_dict (dict | str): The api response.\n        model (type[T_MODEL]): The model to use for the response.\n\n    Returns:\n        dict: The response data\n    \"\"\"\n    if not isinstance(resp_dict, dict) or 'code' not in resp_dict:\n        LibraryLogger.log_device_api_response_error(\n            logger,\n            device.device_name,\n            device.device_type,\n            method,\n            'Error decoding JSON response',\n        )\n        return None\n\n    error_info = ErrorCodes.get_error_info(resp_dict['code'])\n    device.last_response = error_info\n    device.last_response.response_data = resp_dict\n    if error_info.error_type != ErrorTypes.SUCCESS:\n        _handle_bypass_error(logger, device, method, error_info, resp_dict['code'])\n        return None\n    result = resp_dict.get('result')\n    if not isinstance(result, dict):\n        return None\n    return Helpers.model_maker(logger, model, method, result, device)\n</code></pre>"},{"location":"development/utils/device_mixins/#bypass-v2-mixins-and-functions","title":"Bypass V2 Mixins and functions\u21b2","text":""},{"location":"development/utils/device_mixins/#pyvesync.utils.device_mixins.BypassV2Mixin","title":"pyvesync.utils.device_mixins.BypassV2Mixin \u21b2","text":"<p>Mixin for bypass V2 API.</p> <p>Overrides the <code>_build_request</code> method and <code>request_keys</code> attribute for devices that use the Bypass V2 API- /cloud/v2/deviceManaged/bypassV2.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>class BypassV2Mixin:\n    \"\"\"Mixin for bypass V2 API.\n\n    Overrides the `_build_request` method and `request_keys` attribute for devices\n    that use the Bypass V2 API- /cloud/v2/deviceManaged/bypassV2.\n    \"\"\"\n\n    if TYPE_CHECKING:\n        manager: VeSync\n\n    __slots__ = ()\n    request_keys: ClassVar[list[str]] = [\n        'acceptLanguage',\n        'appVersion',\n        'phoneBrand',\n        'phoneOS',\n        'accountID',\n        'cid',\n        'configModule',\n        'debugMode',\n        'traceId',\n        'timeZone',\n        'token',\n        'userCountryCode',\n        'configModel',\n        'deviceId',\n    ]\n\n    def _build_request(\n        self,\n        payload_method: str,\n        data: dict | None = None,\n        method: str = 'bypassV2',\n    ) -&gt; RequestBypassV2:\n        \"\"\"Build API request body Bypass V2 endpoint.\n\n        Args:\n            payload_method (str): The method to use in the payload dict.\n            data (dict | None): The data dict inside the payload value.\n            method (str): The method to use in the outer body, defaults to bypassV2.\n        \"\"\"\n        body = Helpers.get_class_attributes(DefaultValues, self.request_keys)\n        body.update(Helpers.get_class_attributes(self.manager, self.request_keys))\n        body.update(Helpers.get_class_attributes(self, self.request_keys))\n        body['method'] = method\n        body['payload'] = {'method': payload_method, 'source': 'APP', 'data': data or {}}\n        return RequestBypassV2.from_dict(body)\n\n    async def call_bypassv2_api(\n        self,\n        payload_method: str,\n        data: dict | None = None,\n        method: str = 'bypassV2',\n        endpoint: str = 'bypassV2',\n    ) -&gt; dict | None:\n        \"\"\"Send Bypass V2 API request.\n\n        This uses the `_build_request` method to send API requests to the Bypass V2 API.\n\n        Args:\n            payload_method (str): The method to use in the payload dict.\n            data (dict | None): The data to send in the request.\n            method (str): The method to use in the outer body.\n            endpoint (str | None): The last part of the API url, defaults to\n                `bypassV2`, e.g. `/cloud/v2/deviceManaged/bypassV2`.\n\n        Returns:\n            bytes: The response from the API request.\n        \"\"\"\n        request = self._build_request(payload_method, data, method)\n        endpoint = BYPASS_V2_BASE + endpoint\n        resp_dict, _ = await self.manager.async_call_api(\n            endpoint, 'post', request, Helpers.req_header_bypass()\n        )\n        return resp_dict\n</code></pre>"},{"location":"development/utils/device_mixins/#pyvesync.utils.device_mixins.BypassV2Mixin.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"development/utils/device_mixins/#pyvesync.utils.device_mixins.BypassV2Mixin.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"development/utils/device_mixins/#pyvesync.utils.device_mixins.BypassV2Mixin.call_bypassv2_api","title":"call_bypassv2_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv2_api(\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p> <p>Send Bypass V2 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V2 API.</p> <p>Parameters:</p> Name Type Description Default <code>payload_method</code> <code>str</code> <p>The method to use in the payload dict.</p> required <code>data</code> <code>dict | None</code> <p>The data to send in the request.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypassV2'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the API url, defaults to <code>bypassV2</code>, e.g. <code>/cloud/v2/deviceManaged/bypassV2</code>.</p> <code>'bypassV2'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv2_api(\n    self,\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None:\n    \"\"\"Send Bypass V2 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V2 API.\n\n    Args:\n        payload_method (str): The method to use in the payload dict.\n        data (dict | None): The data to send in the request.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the API url, defaults to\n            `bypassV2`, e.g. `/cloud/v2/deviceManaged/bypassV2`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(payload_method, data, method)\n    endpoint = BYPASS_V2_BASE + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        endpoint, 'post', request, Helpers.req_header_bypass()\n    )\n    return resp_dict\n</code></pre>"},{"location":"development/utils/device_mixins/#pyvesync.utils.device_mixins.process_bypassv2_result","title":"pyvesync.utils.device_mixins.process_bypassv2_result \u21b2","text":"<pre><code>process_bypassv2_result(\n    device: VeSyncBaseDevice,\n    logger: Logger,\n    method: str,\n    resp_dict: dict | None,\n    model: type[T_MODEL],\n) -&gt; T_MODEL | None\n</code></pre> <p>Process the Bypass V1 API response.</p> <p>This will gracefully handle errors in the response and error codes, logging them as needed. The return dictionary is the inner result value of the API response.</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>VeSyncBaseDevice</code> <p>The device object.</p> required <code>logger</code> <code>Logger</code> <p>The logger to use for logging.</p> required <code>method</code> <code>str</code> <p>The method used in the payload.</p> required <code>resp_dict</code> <code>dict | str</code> <p>The api response.</p> required <code>model</code> <code>type[T_MODEL]</code> <p>The model to use for the response.</p> required <p>Returns:</p> Name Type Description <code>T_MODEL</code> <code>T_MODEL | None</code> <p>An instance of the inner result model.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>def process_bypassv2_result(\n    device: VeSyncBaseDevice,\n    logger: Logger,\n    method: str,\n    resp_dict: dict | None,\n    model: type[T_MODEL],\n) -&gt; T_MODEL | None:\n    \"\"\"Process the Bypass V1 API response.\n\n    This will gracefully handle errors in the response and error codes,\n    logging them as needed. The return dictionary is the **inner** result value of\n    the API response.\n\n    Args:\n        device (VeSyncBaseDevice): The device object.\n        logger (Logger): The logger to use for logging.\n        method (str): The method used in the payload.\n        resp_dict (dict | str): The api response.\n        model (type[T_MODEL]): The model to use for the response.\n\n    Returns:\n        T_MODEL: An instance of the inner result model.\n    \"\"\"\n    if not isinstance(resp_dict, dict) or 'code' not in resp_dict:\n        LibraryLogger.log_device_api_response_error(\n            logger,\n            device.device_name,\n            device.device_type,\n            method,\n            'Error decoding JSON response',\n        )\n        return None\n\n    error_info = ErrorCodes.get_error_info(resp_dict['code'])\n    device.last_response = error_info\n    device.last_response.response_data = resp_dict\n    if error_info.error_type != ErrorTypes.SUCCESS:\n        _handle_bypass_error(logger, device, method, error_info, resp_dict['code'])\n        return None\n    result = _get_inner_result(device, logger, method, resp_dict)\n    if not isinstance(result, dict):\n        return None\n    return Helpers.model_maker(logger, model, method, result, device)\n</code></pre>"},{"location":"development/utils/errors/","title":"Errors and Exceptions\u21b2","text":"<p>The <code>pyvesync</code> library parses the code provided in the API response to determine if the request was successful and a possible reason for failure.</p> <p>Module holding VeSync API Error Codes and Response statuses.</p> <p>Error codes are pulled from the VeSync app source code. If there are unknown errors that are not found, please open an issue on GitHub.</p> <p>Errors are integers divided by 1000 and then multiplied by 1000 to get the base error code. It also tries to check if the absolute value matches as well.</p> <p>This is used by the <code>pyvesync.utils.helpers.Helpers.process_dev_response</code> method to retrieve response code information and store in the <code>last_response</code> device instance.</p> <p>The \"check_device\" key of the error dictionary is used to determine if the logger should emit a warning to the user for critical device errors, such as a short or voltage error.</p> <p>The ResponseInfo class is used to define information regarding the error code or indicate the request was successful. The ErrorTypes class is used to categorize the error types. This is a WIP and subject to change. Should not be used for anything other than the ErrorCodes error configuration.</p> Example <p>Example of the error dictionary structure: <pre><code>pyvesync.errors.ErrorCodes.get_error_info(\"-11201022\")\nResponseInfo(\n    name=\"PASSWORD_ERROR\",\n    error_type=ErrorTypes.AUTHENTICATION,\n    msg=\"Invalid password\"\n    critical_error=False,\n    operational_error=False,\n    device_online=None\n)\n\ndevice.last_response\n# Returns the ResponseInfo object.\n</code></pre></p>"},{"location":"development/utils/errors/#pyvesync.utils.errors.ResponseInfo","title":"pyvesync.utils.errors.ResponseInfo  <code>dataclass</code>  \u21b2","text":"<p>               Bases: <code>DataClassORJSONMixin</code></p> <p>Class holding response information and error code definitions and lookup methods.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the error</p> <code>error_type</code> <code>ErrorTypes</code> <p>Type of the error see <code>ErrorTypes</code></p> <code>message</code> <code>str</code> <p>Message for the error</p> <code>critical_error</code> <code>bool</code> <p>A major error, such as a short or voltage error</p> <code>operational_error</code> <code>bool</code> <p>Device connected but API error</p> <code>device_online</code> <code>bool | None</code> <p>Device online status</p> <code>response_data</code> <code>dict | None</code> <p>Response data from API - populated by the process_dev_response method in the Helpers class and bypass mixin methods.</p> Source code in <code>src\\pyvesync\\utils\\errors.py</code> <pre><code>@dataclass\nclass ResponseInfo(DataClassORJSONMixin):\n    \"\"\"Class holding response information and error code definitions and lookup methods.\n\n    Attributes:\n        name (str): Name of the error\n        error_type (ErrorTypes): Type of the error see `ErrorTypes`\n        message (str): Message for the error\n        critical_error (bool): A major error, such as a short or voltage error\n        operational_error (bool): Device connected but API error\n        device_online (bool | None): Device online status\n        response_data (dict | None): Response data from API - populated by the\n            process_dev_response method in the Helpers class and bypass mixin\n            methods.\n    \"\"\"\n\n    name: str\n    error_type: str\n    message: str\n    critical_error: bool = False\n    operational_error: bool = False  # Device connected but API error\n    device_online: bool | None = None  # Defaults to connected\n    response_data: dict | None = None  # Response data from API\n</code></pre>"},{"location":"development/utils/errors/#pyvesync.utils.errors.ErrorTypes","title":"pyvesync.utils.errors.ErrorTypes \u21b2","text":"<p>               Bases: <code>StrEnum</code></p> <p>Error types for API return codes.</p> <p>Attributes:</p> Name Type Description <code>SUCCESS</code> <p>Successful request</p> <code>AUTHENTICATION</code> <p>Authentication error</p> <code>RATE_LIMIT</code> <p>Rate limiting error</p> <code>SERVER_ERROR</code> <p>Server and connection error</p> <code>REQUEST_ERROR</code> <p>Error in Request parameters or method</p> <code>DEVICE_ERROR</code> <p>Device operational error, device connected but cannot perform requested action</p> <code>CONFIG_ERROR</code> <p>Configuration error in user profie</p> <code>DEVICE_OFFLINE</code> <p>Device is offline, not connected</p> <code>UNKNOWN_ERROR</code> <p>Unknown error</p> <code>BAD_RESPONSE</code> <p>Bad response from API</p> Source code in <code>src\\pyvesync\\utils\\errors.py</code> <pre><code>class ErrorTypes(StrEnum):\n    \"\"\"Error types for API return codes.\n\n    Attributes:\n        SUCCESS: Successful request\n        AUTHENTICATION: Authentication error\n        RATE_LIMIT: Rate limiting error\n        SERVER_ERROR: Server and connection error\n        REQUEST_ERROR: Error in Request parameters or method\n        DEVICE_ERROR: Device operational error, device\n            connected but cannot perform requested action\n        CONFIG_ERROR: Configuration error in user profie\n        DEVICE_OFFLINE: Device is offline, not connected\n        UNKNOWN_ERROR: Unknown error\n        BAD_RESPONSE: Bad response from API\n    \"\"\"\n\n    SUCCESS = 'success'\n    AUTHENTICATION = 'auth_error'\n    RATE_LIMIT = 'rate_limit_error'\n    SERVER_ERROR = 'server_error'\n    REQUEST_ERROR = 'request_error'\n    DEVICE_ERROR = 'device_error'\n    CONFIG_ERROR = 'config_error'\n    DEVICE_OFFLINE = 'device_offline'\n    UNKNOWN_ERROR = 'unknown_error'\n    TOKEN_ERROR = 'token_error'\n    BAD_RESPONSE = 'bad_response'\n    CROSS_REGION = 'cross_region'\n</code></pre>"},{"location":"development/utils/errors/#pyvesync.utils.errors.ErrorCodes","title":"pyvesync.utils.errors.ErrorCodes \u21b2","text":"<p>Class holding error code definitions and lookup methods.</p> <p>Taken from VeSync app source code. Values are <code>ErrorInfo</code> dataclasses.</p> <p>Attributes:</p> Name Type Description <code>errors</code> <code>MappingProxyType[str, ErrorInfo]</code> <p>Dictionary of error codes and their meanings.</p> Example <p>Error codes are taken from VeSync app source code, if there are unknown errors that are not found, please open an issue on GitHub. The \"critical_error\" key of the error dictionary is used to determine if the logger should emit a warning. Used for device issues that are critical, such as a short or voltage error.</p> <p>Each error dictionary is structured as follows: <pre><code>ErrorInfo(\n    name: str,\n    error_type: ErrorType,\n    message: str,\n    critical_error: bool,\n    operational_error: bool,\n    device_online: bool\n    )\n</code></pre></p> <p>The <code>cls.critical_error(error_code)</code> method is used to determine if the error is a critical device error that should emit a warning.</p> <p><code>cls.get_error_info(error_code)</code> method is used to return the error dictionary for a given error code.</p> Source code in <code>src\\pyvesync\\utils\\errors.py</code> <pre><code>class ErrorCodes:\n    \"\"\"Class holding error code definitions and lookup methods.\n\n    Taken from VeSync app source code. Values are `ErrorInfo` dataclasses.\n\n    Attributes:\n        errors (MappingProxyType[str, ErrorInfo]): Dictionary of error codes and\n            their meanings.\n\n    Example:\n        Error codes are taken from VeSync app source code, if there are unknown errors\n        that are not found, please open an issue on GitHub. The \"critical_error\" key of\n        the error dictionary is used to determine if the logger should emit a warning.\n        Used for device issues that are critical, such as a short or voltage error.\n\n        Each error dictionary is structured as follows:\n        ```\n        ErrorInfo(\n            name: str,\n            error_type: ErrorType,\n            message: str,\n            critical_error: bool,\n            operational_error: bool,\n            device_online: bool\n            )\n        ```\n\n        The `cls.critical_error(error_code)` method is used to determine if the error\n        is a critical device error that should emit a warning.\n\n        `cls.get_error_info(error_code)` method is used to return the error dictionary\n        for a given error code.\n    \"\"\"\n\n    errors: MappingProxyType[str, ResponseInfo] = MappingProxyType(\n        {\n            '-11260022': ResponseInfo(\n                'CROSS_REGION_ERROR',\n                ErrorTypes.CROSS_REGION,\n                'Cross region error',\n            ),\n            '11': ResponseInfo(\n                'DEVICE_OFFLINE',\n                ErrorTypes.DEVICE_OFFLINE,\n                'Device offline',\n                device_online=False,\n            ),\n            '4041004': ResponseInfo(\n                'DEVICE_OFFLINE',\n                ErrorTypes.DEVICE_OFFLINE,\n                'Device offline',\n                device_online=False,\n            ),\n            '-11203000': ResponseInfo(\n                'ACCOUNT_EXIST', ErrorTypes.AUTHENTICATION, 'Account already exists'\n            ),\n            '-11200000': ResponseInfo(\n                'ACCOUNT_FORMAT_ERROR', ErrorTypes.CONFIG_ERROR, 'Account format error'\n            ),\n            '-11202000': ResponseInfo(\n                'ACCOUNT_NOT_EXIST', ErrorTypes.AUTHENTICATION, 'Account does not exist'\n            ),\n            '-11300027': ResponseInfo(\n                'AIRPURGE_OFFLINE',\n                ErrorTypes.DEVICE_OFFLINE,\n                'Device offline',\n                device_online=False,\n            ),\n            '-16906000': ResponseInfo(\n                'REQUEST_TOO_FREQUENT',\n                ErrorTypes.RATE_LIMIT,\n                'Request too frequent',\n                operational_error=True,\n            ),\n            '-11902000': ResponseInfo(\n                'AUTHKEY_NOT_EXIST', ErrorTypes.CONFIG_ERROR, 'Authkey does not exist'\n            ),\n            '-11900000': ResponseInfo(\n                'AUTHKEY_PID_NOT_MATCH', ErrorTypes.DEVICE_ERROR, 'Authkey PID mismatch'\n            ),\n            '-11504000': ResponseInfo(\n                'AWAY_MAX', ErrorTypes.CONFIG_ERROR, 'Away maximum reached'\n            ),\n            '11014000': ResponseInfo(\n                'BYPASS_AIRPURIFIER_E2',\n                ErrorTypes.DEVICE_ERROR,\n                'Air Purifier E2 error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11802000': ResponseInfo(\n                'BYPASS_AIRPURIFIER_MOTOR_ABNORMAL',\n                ErrorTypes.DEVICE_ERROR,\n                'Air Purifier motor error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11504000': ResponseInfo(\n                'BYPASS_AWAY_MAX', ErrorTypes.CONFIG_ERROR, 'Away maximum reached'\n            ),\n            '11509000': ResponseInfo(\n                'BYPASS_AWAY_NOT_EXIST',\n                ErrorTypes.CONFIG_ERROR,\n                'Away does not exist',\n            ),\n            '11908000': ResponseInfo(\n                'BYPASS_COOK_TIMEOUT', ErrorTypes.DEVICE_ERROR, 'Cook timeout error'\n            ),\n            '11909000': ResponseInfo(\n                'BYPASS_SMART_STOP',\n                ErrorTypes.DEVICE_ERROR,\n                'Smart stop error',\n                device_online=True,\n            ),\n            '11910000': ResponseInfo(\n                'BYPASS_LEFT_ZONE_COOKING',\n                ErrorTypes.DEVICE_ERROR,\n                'Left zone cooking error',\n                device_online=True,\n            ),\n            '11911000': ResponseInfo(\n                'BYPASS_RIGHT_ZONE_COOKING',\n                ErrorTypes.DEVICE_ERROR,\n                'Right zone cooking error',\n                device_online=True,\n            ),\n            '11912000': ResponseInfo(\n                'BYPASS_ALL_ZONE_COOKING',\n                ErrorTypes.DEVICE_ERROR,\n                'All zone cooking error',\n                device_online=True,\n            ),\n            '11916000': ResponseInfo(\n                'BYPASS_NTC_RIGHT_TOP_SHORT',\n                ErrorTypes.DEVICE_ERROR,\n                'Right top short error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11917000': ResponseInfo(\n                'BYPASS_NTC_RIGHT_TOP_OPEN',\n                ErrorTypes.DEVICE_ERROR,\n                'Right top open error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11918000': ResponseInfo(\n                'BYPASS_NTC_BOTTOM_SHORT',\n                ErrorTypes.DEVICE_ERROR,\n                'Bottom short error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11919000': ResponseInfo(\n                'BYPASS_NTC_BOTTOM_OPEN',\n                ErrorTypes.DEVICE_ERROR,\n                'Bottom open error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11924000': ResponseInfo(\n                'BYPASS_RIGHT_TEMP_FAULT',\n                ErrorTypes.DEVICE_ERROR,\n                'Right temperature fault',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11925000': ResponseInfo(\n                'BYPASS_ZONE_2_MOTOR_ABNORMAL',\n                ErrorTypes.DEVICE_ERROR,\n                'Zone 2 motor error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11021000': ResponseInfo(\n                'BYPASS_DEVICE_END',\n                ErrorTypes.DEVICE_ERROR,\n                'Device end error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11012000': ResponseInfo(\n                'BYPASS_DEVICE_RUNNING',\n                ErrorTypes.DEVICE_ERROR,\n                'Device running error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11020000': ResponseInfo(\n                'BYPASS_DEVICE_STOP',\n                ErrorTypes.DEVICE_ERROR,\n                'Device stop error',\n                device_online=True,\n                critical_error=True,\n            ),\n            '11901000': ResponseInfo(\n                'BYPASS_DOOR_OPEN',\n                ErrorTypes.DEVICE_ERROR,\n                'Door open error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11006000': ResponseInfo(\n                'BYPASS_E1_OPEN',\n                ErrorTypes.DEVICE_ERROR,\n                'Open circuit error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11007000': ResponseInfo(\n                'BYPASS_E2_SHORT',\n                ErrorTypes.DEVICE_ERROR,\n                'Short circuit error',\n                device_online=True,\n                critical_error=True,\n            ),\n            '11015000': ResponseInfo(\n                'BYPASS_E3_WARM',\n                ErrorTypes.DEVICE_ERROR,\n                'Warm error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11018000': ResponseInfo(\n                'BYPASS_SET_MIST_LEVEL',\n                ErrorTypes.DEVICE_ERROR,\n                'Cannot set mist level error',\n                device_online=True,\n            ),\n            '11019000': ResponseInfo(\n                'BYPASS_E6_VOLTAGE_LOW',\n                ErrorTypes.DEVICE_ERROR,\n                'Low voltage error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11013000': ResponseInfo(\n                'BYPASS_E7_VOLTAGE',\n                ErrorTypes.DEVICE_ERROR,\n                'Voltage error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11607000': ResponseInfo(\n                'BYPASS_HUMIDIFIER_ERROR_CONNECT_MSG',\n                ErrorTypes.DEVICE_ERROR,\n                'Humidifier connect message error',\n            ),\n            '11317000': ResponseInfo(\n                'BYPASS_DIMMER_NCT',\n                ErrorTypes.DEVICE_ERROR,\n                'Dimmer NCT error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11608000': ResponseInfo(\n                'BYPASS_HUMIDIFIER_ERROR_WATER_PUMP',\n                ErrorTypes.DEVICE_ERROR,\n                'Humidifier water pump error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11609000': ResponseInfo(\n                'BYPASS_HUMIDIFIER_ERROR_FAN_MOTOR',\n                ErrorTypes.DEVICE_ERROR,\n                'Humidifier fan motor error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11601000': ResponseInfo(\n                'BYPASS_HUMIDIFIER_ERROR_DRY_BURNING',\n                ErrorTypes.DEVICE_ERROR,\n                'Dry burning error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11602000': ResponseInfo(\n                'BYPASS_HUMIDIFIER_ERROR_PTC',\n                ErrorTypes.DEVICE_ERROR,\n                'Humidifier PTC error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11603000': ResponseInfo(\n                'BYPASS_HUMIDIFIER_ERROR_WARM_HIGH',\n                ErrorTypes.DEVICE_ERROR,\n                'Humidifier warm high error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11604000': ResponseInfo(\n                'BYPASS_HUMIDIFIER_ERROR_WATER',\n                ErrorTypes.DEVICE_ERROR,\n                'Humidifier water error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11907000': ResponseInfo(\n                'BYPASS_LOW_WATER',\n                ErrorTypes.DEVICE_ERROR,\n                'Low water error',\n                device_online=True,\n                critical_error=True,\n            ),\n            '11028000': ResponseInfo(\n                'BYPASS_MOTOR_OPEN',\n                ErrorTypes.DEVICE_ERROR,\n                'Motor open error',\n                device_online=True,\n                critical_error=True,\n            ),\n            '11017000': ResponseInfo(\n                'BYPASS_NOT_SUPPORTED', ErrorTypes.REQUEST_ERROR, 'Not supported error'\n            ),\n            '11905000': ResponseInfo(\n                'BYPASS_NO_POT',\n                ErrorTypes.DEVICE_ERROR,\n                'No pot error',\n                device_online=True,\n                critical_error=True,\n            ),\n            '12001000': ResponseInfo(\n                'BYPASS_LACK_FOOD',\n                ErrorTypes.DEVICE_ERROR,\n                'Lack of food error',\n                device_online=True,\n                critical_error=True,\n            ),\n            '12002000': ResponseInfo(\n                'BYPASS_JAM_FOOD',\n                ErrorTypes.DEVICE_ERROR,\n                'Jam food error',\n                device_online=True,\n                critical_error=True,\n            ),\n            '12003000': ResponseInfo(\n                'BYPASS_BLOCK_FOOD',\n                ErrorTypes.DEVICE_ERROR,\n                'Block food error',\n                device_online=True,\n                critical_error=True,\n            ),\n            '12004000': ResponseInfo(\n                'BYPASS_PUMP_FAIL',\n                ErrorTypes.DEVICE_ERROR,\n                'Pump failure error',\n                device_online=True,\n                critical_error=True,\n            ),\n            '12005000': ResponseInfo(\n                'BYPASS_CALI_FAIL',\n                ErrorTypes.DEVICE_ERROR,\n                'Calibration failure error',\n                device_online=True,\n                critical_error=True,\n            ),\n            '11611000': ResponseInfo(\n                'BYPASS_FILTER_TRAY_ERROR',\n                ErrorTypes.DEVICE_ERROR,\n                'Filter tray error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11610000': ResponseInfo(\n                'BYPASS_VALUE_ERROR',\n                ErrorTypes.DEVICE_ERROR,\n                'Value error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11022000': ResponseInfo(\n                'BYPASS_CANNOT_SET_LEVEL',\n                ErrorTypes.DEVICE_ERROR,\n                'Cannot set level error',\n                critical_error=False,\n                device_online=True,\n            ),\n            '11023000': ResponseInfo(\n                'BYPASS_NTC_BOTTOM_OPEN',\n                ErrorTypes.DEVICE_ERROR,\n                'NTC bottom open error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11024000': ResponseInfo(\n                'BYPASS_NTC_BOTTOM_SHORT',\n                ErrorTypes.DEVICE_ERROR,\n                'NTC bottom short error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11026000': ResponseInfo(\n                'BYPASS_NTC_TOP_OPEN',\n                ErrorTypes.DEVICE_ERROR,\n                'NTC top open error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11025000': ResponseInfo(\n                'BYPASS_NTC_TOP_SHORT',\n                ErrorTypes.DEVICE_ERROR,\n                'NTC top short error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11027000': ResponseInfo(\n                'BYPASS_OPEN_HEAT_PIPE_OR_OPEN_FUSE',\n                ErrorTypes.DEVICE_ERROR,\n                'Open heat pipe or fuse error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11906000': ResponseInfo(\n                'BYPASS_OVER_HEATED',\n                ErrorTypes.DEVICE_ERROR,\n                'Overheated error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11000000': ResponseInfo(\n                'BYPASS_PARAMETER_INVALID',\n                ErrorTypes.REQUEST_ERROR,\n                'Invalid bypass parameter',\n            ),\n            '11510000': ResponseInfo(\n                'BYPASS_SCHEDULE_CONFLICT', ErrorTypes.CONFIG_ERROR, 'Schedule conflict'\n            ),\n            '11502000': ResponseInfo(\n                'BYPASS_SCHEDULE_MAX',\n                ErrorTypes.CONFIG_ERROR,\n                'Maximum number of schedules reached',\n            ),\n            '11507000': ResponseInfo(\n                'BYPASS_SCHEDULE_NOT_EXIST',\n                ErrorTypes.CONFIG_ERROR,\n                'Schedule does not exist',\n            ),\n            '11503000': ResponseInfo(\n                'TIMER_MAX',\n                ErrorTypes.CONFIG_ERROR,\n                'Maximum number of timers reached',\n            ),\n            '11508000': ResponseInfo(\n                'TIMER_NOT_EXIST',\n                ErrorTypes.CONFIG_ERROR,\n                'Timer does not exist',\n            ),\n            '11605000': ResponseInfo(\n                'BYPASS_WATER_LOCK',\n                ErrorTypes.DEVICE_ERROR,\n                'Water lock error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11029000': ResponseInfo(\n                'BYPASS_WIFI_ERROR', ErrorTypes.DEVICE_ERROR, 'WiFi error'\n            ),\n            '11902000': ResponseInfo(\n                'BY_PASS_ERROR_COOKING_158',\n                ErrorTypes.DEVICE_ERROR,\n                'Error setting cook mode, air fryer is already cooking',\n                device_online=True,\n            ),\n            '11035000': ResponseInfo(\n                'BYPASS_MOTOR_ABNORMAL_ERROR',\n                ErrorTypes.DEVICE_ERROR,\n                'Motor abnormal error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11903000': ResponseInfo(\n                'BY_PASS_ERROR_NOT_COOK_158',\n                ErrorTypes.DEVICE_ERROR,\n                'Error pausing, air fryer is not cooking',\n                device_online=True,\n            ),\n            '-12001000': ResponseInfo(\n                'CONFIGKEY_EXPIRED', ErrorTypes.CONFIG_ERROR, 'Configkey expired'\n            ),\n            '-12000000': ResponseInfo(\n                'CONFIGKEY_NOT_EXIST',\n                ErrorTypes.CONFIG_ERROR,\n                'Configkey does not exist',\n            ),\n            '-11305000': ResponseInfo(\n                'CONFIG_MODULE_NOT_EXIST',\n                ErrorTypes.REQUEST_ERROR,\n                'Config module does not exist',\n            ),\n            '-11100000': ResponseInfo(\n                'DATABASE_FAILED', ErrorTypes.SERVER_ERROR, 'Database error'\n            ),\n            '-11101000': ResponseInfo(\n                'DATABASE_FAILED_ERROR', ErrorTypes.SERVER_ERROR, 'Database error'\n            ),\n            '-11306000': ResponseInfo(\n                'DEVICE_BOUND',\n                ErrorTypes.CONFIG_ERROR,\n                'Device already associated with another account',\n            ),\n            '-11301000': ResponseInfo(\n                'DEVICE_NOT_EXIST',\n                ErrorTypes.CONFIG_ERROR,\n                'Device does not exist',\n                device_online=False,\n            ),\n            '-11300000': ResponseInfo(\n                'DEVICE_OFFLINE',\n                ErrorTypes.DEVICE_OFFLINE,\n                'Device offline',\n                device_online=False,\n            ),\n            '-11302000': ResponseInfo(\n                'DEVICE_TIMEOUT',\n                ErrorTypes.DEVICE_ERROR,\n                'Device timeout',\n                device_online=False,\n            ),\n            '-11304000': ResponseInfo(\n                'DEVICE_TIMEZONE_DIFF',\n                ErrorTypes.CONFIG_ERROR,\n                'Device timezone difference',\n            ),\n            '-11303000': ResponseInfo(\n                'FIRMWARE_LATEST',\n                ErrorTypes.CONFIG_ERROR,\n                'No firmware update available',\n            ),\n            '-11102000': ResponseInfo(\n                'INTERNAL_ERROR', ErrorTypes.SERVER_ERROR, 'Internal server error'\n            ),\n            '-11004000': ResponseInfo(\n                'METHOD_NOT_FOUND', ErrorTypes.REQUEST_ERROR, 'Method not found'\n            ),\n            '-11107000': ResponseInfo(\n                'MONGODB_ERROR', ErrorTypes.SERVER_ERROR, 'MongoDB error'\n            ),\n            '-11105000': ResponseInfo(\n                'MYSQL_ERROR', ErrorTypes.SERVER_ERROR, 'MySQL error'\n            ),\n            '88888888': ResponseInfo(\n                'NETWORK_DISABLE', ErrorTypes.SERVER_ERROR, 'Network disabled'\n            ),\n            '77777777': ResponseInfo(\n                'NETWORK_TIMEOUT', ErrorTypes.SERVER_ERROR, 'Network timeout'\n            ),\n            '4031005': ResponseInfo(\n                'NO_PERMISSION_7A', ErrorTypes.DEVICE_ERROR, 'No 7A Permissions'\n            ),\n            '-11201000': ResponseInfo(\n                'PASSWORD_ERROR', ErrorTypes.AUTHENTICATION, 'Invalid password'\n            ),\n            '-11901000': ResponseInfo(\n                'PID_NOT_EXIST', ErrorTypes.DEVICE_ERROR, 'PID does not exist'\n            ),\n            '-11106000': ResponseInfo(\n                'REDIS_ERROR', ErrorTypes.SERVER_ERROR, 'Redis error'\n            ),\n            '-11003000': ResponseInfo(\n                'REQUEST_HIGH', ErrorTypes.RATE_LIMIT, 'Rate limiting error'\n            ),\n            '-11005000': ResponseInfo(\n                'RESOURCE_NOT_EXIST',\n                ErrorTypes.REQUEST_ERROR,\n                'No device with ID found',\n                device_online=False,\n            ),\n            '-11108000': ResponseInfo('S3_ERROR', ErrorTypes.SERVER_ERROR, 'S3 error'),\n            '-11502000': ResponseInfo(\n                'SCHEDULE_MAX',\n                ErrorTypes.CONFIG_ERROR,\n                'Maximum number of schedules reached',\n            ),\n            '-11103000': ResponseInfo(\n                'SERVER_BUSY', ErrorTypes.SERVER_ERROR, 'Server busy'\n            ),\n            '-11104000': ResponseInfo(\n                'SERVER_TIMEOUT', ErrorTypes.SERVER_ERROR, 'Server timeout'\n            ),\n            '-11501000': ResponseInfo(\n                'TIMER_CONFLICT', ErrorTypes.DEVICE_ERROR, 'Timer conflict'\n            ),\n            '-11503000': ResponseInfo(\n                'TIMER_MAX', ErrorTypes.DEVICE_ERROR, 'Maximum number of timers reached'\n            ),\n            '-11500000': ResponseInfo(\n                'TIMER_NOT_EXIST', ErrorTypes.DEVICE_ERROR, 'Timer does not exist'\n            ),\n            '-11001000': ResponseInfo(\n                'TOKEN_EXPIRED', ErrorTypes.TOKEN_ERROR, 'Invalid token'\n            ),\n            '-999999999': ResponseInfo(\n                'UNKNOWN', ErrorTypes.SERVER_ERROR, 'Unknown error'\n            ),\n            '-11307000': ResponseInfo(\n                'UUID_NOT_EXIST',\n                ErrorTypes.DEVICE_ERROR,\n                'Device UUID not found',\n                device_online=False,\n            ),\n            '12102000': ResponseInfo(\n                'TEM_SENOR_ERROR',\n                ErrorTypes.DEVICE_ERROR,\n                'Temperature sensor error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '12103000': ResponseInfo(\n                'HUM_SENOR_ERROR',\n                ErrorTypes.DEVICE_ERROR,\n                'Humidity sensor error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '12101000': ResponseInfo(\n                'SENSOR_ERROR',\n                ErrorTypes.DEVICE_ERROR,\n                'Sensor error',\n                critical_error=True,\n                device_online=True,\n            ),\n            '11005000': ResponseInfo(\n                'BYPASS_DEVICE_IS_OFF',\n                ErrorTypes.DEVICE_ERROR,\n                'Device is offDevice is off',\n                critical_error=True,\n                device_online=True,\n            ),\n        }\n    )\n\n    @classmethod\n    def get_error_info(cls, error_code: str | int | None) -&gt; ResponseInfo:\n        \"\"\"Return error dictionary for the given error code.\n\n        Args:\n            error_code (str | int): Error code to lookup.\n\n        Returns:\n            dict: Error dictionary for the given error code.\n\n        Example:\n            ```python\n            ErrorCodes.get_error_info(\"-11201022\")\n            ErrorInfo(\n                \"PASSWORD_ERROR\", ErrorTypes.AUTHENTICATION, \"Invalid password\"\n            )\n            ```\n        \"\"\"\n        try:\n            if error_code is None:\n                return ResponseInfo('UNKNOWN', ErrorTypes.UNKNOWN_ERROR, 'Unknown error')\n            error_str = str(error_code)\n            error_int = int(error_code)\n            if error_str == '0':\n                return ResponseInfo('SUCCESS', ErrorTypes.SUCCESS, 'Success')\n            if error_str in cls.errors:\n                return cls.errors[error_str]\n            error_code = int(error_int / 1000) * 1000\n            return cls.errors[str(error_code)]\n        except (ValueError, TypeError, KeyError):\n            return ResponseInfo('UNKNOWN', ErrorTypes.UNKNOWN_ERROR, 'Unknown error')\n\n    @classmethod\n    def is_critical(cls, error_code: str | int) -&gt; bool:\n        \"\"\"Check if error code is a device error.\n\n        Args:\n            error_code (str | int): Error code to check.\n\n        Returns:\n            bool: True if error code is a device error, False otherwise.\n        \"\"\"\n        error_info = cls.get_error_info(error_code)\n        return bool(error_info.critical_error)\n</code></pre>"},{"location":"development/utils/errors/#pyvesync.utils.errors.ErrorCodes.get_error_info","title":"get_error_info  <code>classmethod</code>  \u21b2","text":"<pre><code>get_error_info(\n    error_code: str | int | None,\n) -&gt; ResponseInfo\n</code></pre> <p>Return error dictionary for the given error code.</p> <p>Parameters:</p> Name Type Description Default <code>str | int</code> <p>Error code to lookup.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>ResponseInfo</code> <p>Error dictionary for the given error code.</p> Example <pre><code>ErrorCodes.get_error_info(\"-11201022\")\nErrorInfo(\n    \"PASSWORD_ERROR\", ErrorTypes.AUTHENTICATION, \"Invalid password\"\n)\n</code></pre> Source code in <code>src\\pyvesync\\utils\\errors.py</code> <pre><code>@classmethod\ndef get_error_info(cls, error_code: str | int | None) -&gt; ResponseInfo:\n    \"\"\"Return error dictionary for the given error code.\n\n    Args:\n        error_code (str | int): Error code to lookup.\n\n    Returns:\n        dict: Error dictionary for the given error code.\n\n    Example:\n        ```python\n        ErrorCodes.get_error_info(\"-11201022\")\n        ErrorInfo(\n            \"PASSWORD_ERROR\", ErrorTypes.AUTHENTICATION, \"Invalid password\"\n        )\n        ```\n    \"\"\"\n    try:\n        if error_code is None:\n            return ResponseInfo('UNKNOWN', ErrorTypes.UNKNOWN_ERROR, 'Unknown error')\n        error_str = str(error_code)\n        error_int = int(error_code)\n        if error_str == '0':\n            return ResponseInfo('SUCCESS', ErrorTypes.SUCCESS, 'Success')\n        if error_str in cls.errors:\n            return cls.errors[error_str]\n        error_code = int(error_int / 1000) * 1000\n        return cls.errors[str(error_code)]\n    except (ValueError, TypeError, KeyError):\n        return ResponseInfo('UNKNOWN', ErrorTypes.UNKNOWN_ERROR, 'Unknown error')\n</code></pre>"},{"location":"development/utils/errors/#pyvesync.utils.errors.ErrorCodes.get_error_info(error_code)","title":"<code>error_code</code> \u21b2","text":""},{"location":"development/utils/errors/#pyvesync.utils.errors.ErrorCodes.is_critical","title":"is_critical  <code>classmethod</code>  \u21b2","text":"<pre><code>is_critical(error_code: str | int) -&gt; bool\n</code></pre> <p>Check if error code is a device error.</p> <p>Parameters:</p> Name Type Description Default <code>str | int</code> <p>Error code to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if error code is a device error, False otherwise.</p> Source code in <code>src\\pyvesync\\utils\\errors.py</code> <pre><code>@classmethod\ndef is_critical(cls, error_code: str | int) -&gt; bool:\n    \"\"\"Check if error code is a device error.\n\n    Args:\n        error_code (str | int): Error code to check.\n\n    Returns:\n        bool: True if error code is a device error, False otherwise.\n    \"\"\"\n    error_info = cls.get_error_info(error_code)\n    return bool(error_info.critical_error)\n</code></pre>"},{"location":"development/utils/errors/#pyvesync.utils.errors.ErrorCodes.is_critical(error_code)","title":"<code>error_code</code> \u21b2","text":""},{"location":"development/utils/errors/#pyvesync.utils.errors.raise_api_errors","title":"pyvesync.utils.errors.raise_api_errors \u21b2","text":"<pre><code>raise_api_errors(error_info: ResponseInfo) -&gt; None\n</code></pre> <p>Raise the appropriate exception for API error code.</p> <p>Called by <code>VeSync.async_call_api</code> method.</p> <p>Raises:</p> Type Description <code>VeSyncRateLimitError</code> <p>Rate limit error</p> <code>VeSyncLoginError</code> <p>Authentication error</p> <code>VeSyncTokenError</code> <p>Token error</p> <code>VeSyncServerError</code> <p>Server error</p> Source code in <code>src\\pyvesync\\utils\\errors.py</code> <pre><code>def raise_api_errors(error_info: ResponseInfo) -&gt; None:\n    \"\"\"Raise the appropriate exception for API error code.\n\n    Called by `VeSync.async_call_api` method.\n\n    Raises:\n        VeSyncRateLimitError: Rate limit error\n        VeSyncLoginError: Authentication error\n        VeSyncTokenError: Token error\n        VeSyncServerError: Server error\n    \"\"\"\n    match error_info.error_type:\n        case ErrorTypes.RATE_LIMIT:\n            raise VeSyncRateLimitError\n        case ErrorTypes.AUTHENTICATION:\n            raise VeSyncLoginError(error_info.message)\n        case ErrorTypes.TOKEN_ERROR:\n            raise VeSyncTokenError\n        case ErrorTypes.SERVER_ERROR:\n            msg = (\n                f'{error_info.message} - '\n                'Please report error to github.com/webdjoe/pyvesync/issues'\n            )\n            raise VeSyncServerError(msg)\n</code></pre>"},{"location":"development/utils/errors/#vesync-exceptions","title":"VeSync Exceptions\u21b2","text":""},{"location":"development/utils/errors/#pyvesync.utils.errors.VeSyncError","title":"pyvesync.utils.errors.VeSyncError \u21b2","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for VeSync errors.</p> <p>These are raised based on API response codes and exceptions that may be raised by the different handlers.</p> Source code in <code>src\\pyvesync\\utils\\errors.py</code> <pre><code>class VeSyncError(Exception):\n    \"\"\"Base exception for VeSync errors.\n\n    These are raised based on API response codes and exceptions\n    that may be raised by the different handlers.\n    \"\"\"\n</code></pre>"},{"location":"development/utils/errors/#pyvesync.utils.errors.VeSyncLoginError","title":"pyvesync.utils.errors.VeSyncLoginError \u21b2","text":"<p>               Bases: <code>VeSyncError</code></p> <p>Exception raised for login authentication errors.</p> Source code in <code>src\\pyvesync\\utils\\errors.py</code> <pre><code>class VeSyncLoginError(VeSyncError):\n    \"\"\"Exception raised for login authentication errors.\"\"\"\n\n    def __init__(self, msg: str) -&gt; None:\n        \"\"\"Initialize the exception with a message.\"\"\"\n        super().__init__(msg)\n</code></pre>"},{"location":"development/utils/errors/#pyvesync.utils.errors.VeSyncTokenError","title":"pyvesync.utils.errors.VeSyncTokenError \u21b2","text":"<p>               Bases: <code>VeSyncError</code></p> <p>Exception raised for VeSync API authentication errors.</p> Source code in <code>src\\pyvesync\\utils\\errors.py</code> <pre><code>class VeSyncTokenError(VeSyncError):\n    \"\"\"Exception raised for VeSync API authentication errors.\"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize the exception with a message.\"\"\"\n        super().__init__('Token expired or invalid - please re-authenticate with login()')\n</code></pre>"},{"location":"development/utils/errors/#pyvesync.utils.errors.VeSyncServerError","title":"pyvesync.utils.errors.VeSyncServerError \u21b2","text":"<p>               Bases: <code>VeSyncError</code></p> <p>Exception raised for VeSync API server errors.</p> Source code in <code>src\\pyvesync\\utils\\errors.py</code> <pre><code>class VeSyncServerError(VeSyncError):\n    \"\"\"Exception raised for VeSync API server errors.\"\"\"\n\n    def __init__(self, msg: str) -&gt; None:\n        \"\"\"Initialize the exception with a message.\"\"\"\n        super().__init__(msg)\n</code></pre>"},{"location":"development/utils/errors/#pyvesync.utils.errors.VeSyncRateLimitError","title":"pyvesync.utils.errors.VeSyncRateLimitError \u21b2","text":"<p>               Bases: <code>VeSyncError</code></p> <p>Exception raised for VeSync API rate limit errors.</p> Source code in <code>src\\pyvesync\\utils\\errors.py</code> <pre><code>class VeSyncRateLimitError(VeSyncError):\n    \"\"\"Exception raised for VeSync API rate limit errors.\"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize the exception with a message.\"\"\"\n        super().__init__('VeSync API rate limit exceeded')\n</code></pre>"},{"location":"development/utils/errors/#pyvesync.utils.errors.VeSyncAPIResponseError","title":"pyvesync.utils.errors.VeSyncAPIResponseError \u21b2","text":"<p>               Bases: <code>VeSyncError</code></p> <p>Exception raised for malformed VeSync API responses.</p> Source code in <code>src\\pyvesync\\utils\\errors.py</code> <pre><code>class VeSyncAPIResponseError(VeSyncError):\n    \"\"\"Exception raised for malformed VeSync API responses.\"\"\"\n\n    def __init__(self, msg: None | str = None) -&gt; None:\n        \"\"\"Initialize the exception with a message.\"\"\"\n        if msg is None:\n            msg = 'Unexpected VeSync API response.'\n        super().__init__(msg)\n</code></pre>"},{"location":"development/utils/errors/#pyvesync.utils.errors.VeSyncAPIStatusCodeError","title":"pyvesync.utils.errors.VeSyncAPIStatusCodeError \u21b2","text":"<p>               Bases: <code>VeSyncError</code></p> <p>Exception raised for malformed VeSync API responses.</p> Source code in <code>src\\pyvesync\\utils\\errors.py</code> <pre><code>class VeSyncAPIStatusCodeError(VeSyncError):\n    \"\"\"Exception raised for malformed VeSync API responses.\"\"\"\n\n    def __init__(self, status_code: str | None = None) -&gt; None:\n        \"\"\"Initialize the exception with a message.\"\"\"\n        message = 'VeSync API returned an unknown status code'\n        if status_code is not None:\n            message = f'VeSync API returned status code {status_code}'\n        super().__init__(message)\n</code></pre>"},{"location":"development/utils/helpers/","title":"helpers module\u21b2","text":"<p>The <code>pyvesync.utils.helpers</code> module contains utility functions and classes that assist with various tasks within the library. These include converting values, processing states, and managing timers. The module is designed for internal use within the library and is not intended for public use.</p>"},{"location":"development/utils/helpers/#timer-class","title":"Timer class\u21b2","text":""},{"location":"development/utils/helpers/#pyvesync.utils.helpers.Timer","title":"pyvesync.utils.helpers.Timer  <code>dataclass</code>  \u21b2","text":"<p>Dataclass to hold state of timers.</p> Note <p>This should be used by VeSync device instances to manage internal status, does not interact with the VeSync API.</p> <p>Parameters:</p> Name Type Description Default <code>timer_duration</code> <code>int</code> <p>Length of timer in seconds</p> required <code>action</code> <code>str</code> <p>Action to perform when timer is done</p> required <code>id</code> <code>int</code> <p>ID of timer, defaults to 1</p> <code>1</code> <code>remaining</code> <code>int</code> <p>Time remaining on timer in seconds, defaults to None</p> <code>None</code> <code>_update_time</code> <code>int</code> <p>Last updated unix timestamp in seconds, defaults to None</p> <code>int(time())</code> <p>Attributes:</p> Name Type Description <code>update_time</code> <code>str</code> <p>Timestamp of last update</p> <code>status</code> <code>str</code> <p>Status of timer, one of 'active', 'paused', 'done'</p> <code>time_remaining</code> <code>int</code> <p>Time remaining on timer in seconds</p> <code>running</code> <code>bool</code> <p>True if timer is running</p> <code>paused</code> <code>bool</code> <p>True if timer is paused</p> <code>done</code> <code>bool</code> <p>True if timer is done</p> Source code in <code>src\\pyvesync\\utils\\helpers.py</code> <pre><code>@dataclass(repr=False)\nclass Timer:\n    \"\"\"Dataclass to hold state of timers.\n\n    Note:\n        This should be used by VeSync device instances to manage internal status,\n        does not interact with the VeSync API.\n\n    Args:\n        timer_duration (int): Length of timer in seconds\n        action (str): Action to perform when timer is done\n        id (int): ID of timer, defaults to 1\n        remaining (int): Time remaining on timer in seconds, defaults to None\n        _update_time (int): Last updated unix timestamp in seconds, defaults to None\n\n    Attributes:\n        update_time (str): Timestamp of last update\n        status (str): Status of timer, one of 'active', 'paused', 'done'\n        time_remaining (int): Time remaining on timer in seconds\n        running (bool): True if timer is running\n        paused (bool): True if timer is paused\n        done (bool): True if timer is done\n    \"\"\"\n\n    timer_duration: int\n    action: str\n    id: int = 1\n    remaining: InitVar[int | None] = None\n    _status: str = field(default='active', init=False, repr=False)\n    _remain: int = field(default=0, init=False, repr=False)\n    _update_time: int = int(time.time())\n\n    def __post_init__(self, remaining: int | None) -&gt; None:\n        \"\"\"Set remaining time if provided.\"\"\"\n        if remaining is not None:\n            self._remain = remaining\n        else:\n            self._remain = self.timer_duration\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Return string representation of the Timer object.\n\n        Returns:\n            str: String representation of the Timer object.\n        \"\"\"\n        return (\n            f'Timer(id={self.id}, duration={self.timer_duration}, '\n            f'status={self.status}, remaining={self.time_remaining})'\n        )\n\n    def update_ts(self) -&gt; None:\n        \"\"\"Update timestamp.\"\"\"\n        self._update_time = int(time.time())\n\n    @property\n    def status(self) -&gt; str:\n        \"\"\"Return status of timer.\"\"\"\n        if self._status in ('paused', 'done'):\n            return self._status\n        if self.time_remaining &lt;= 0:\n            self._status = 'done'\n            return 'done'\n        return 'active'\n\n    @property\n    def time_remaining(self) -&gt; int:\n        \"\"\"Return remaining seconds.\"\"\"\n        if self._status == 'paused':\n            return self._remain\n        if self._status == 'done':\n            return 0\n\n        # 'active' state - compute how much time has ticked away\n        elapsed = time.time() - self._update_time\n        current_remaining = self._remain - elapsed\n\n        # If we've run out of time, mark it done\n        if current_remaining &lt;= 0:\n            return 0\n        return int(current_remaining)\n\n    @property\n    def running(self) -&gt; bool:\n        \"\"\"Check if timer is active.\"\"\"\n        return self.time_remaining &gt; 0 and self.status == 'active'\n\n    @property\n    def paused(self) -&gt; bool:\n        \"\"\"Check if timer is paused.\"\"\"\n        return bool(self.status == 'paused')\n\n    @property\n    def done(self) -&gt; bool:\n        \"\"\"Check if timer is complete.\"\"\"\n        return bool(self.time_remaining &lt;= 0 or self._status == 'done')\n\n    def end(self) -&gt; None:\n        \"\"\"Change status of timer to done.\"\"\"\n        self._status = 'done'\n        self._remain = 0\n\n    def start(self) -&gt; None:\n        \"\"\"Restart paused timer.\"\"\"\n        if self._status != 'paused':\n            return\n        self._update_time = int(time.time())\n        self._status = 'active'\n\n    def pause(self) -&gt; None:\n        \"\"\"Pauses the timer if it's active.\n\n        Performs the following steps:\n            - Calculate the up-to-date remaining time,\n            - Update internal counters,\n            - Set _status to 'paused'.\n        \"\"\"\n        if self._status == 'active':\n            # Update the time_remaining based on elapsed\n            current_remaining = self.time_remaining\n            if current_remaining &lt;= 0:\n                self._status = 'done'\n                self._remain = 0\n            else:\n                self._status = 'paused'\n                self._remain = current_remaining\n            self._update_time = int(time.time())\n</code></pre>"},{"location":"development/utils/helpers/#helper-class","title":"Helper class\u21b2","text":"<p>Contains common methods and attributes used by other pyvesync modules.</p>"},{"location":"development/utils/helpers/#pyvesync.utils.helpers.Helpers","title":"pyvesync.utils.helpers.Helpers \u21b2","text":"<p>VeSync Helper Functions.</p> Source code in <code>src\\pyvesync\\utils\\helpers.py</code> <pre><code>class Helpers:\n    \"\"\"VeSync Helper Functions.\"\"\"\n\n    @staticmethod\n    def model_maker(\n        logger: logging.Logger,\n        model: type[T_MODEL],\n        method_name: str,\n        data: dict[str, Any],\n        device: VeSyncBaseDevice | None = None,\n    ) -&gt; T_MODEL | None:\n        \"\"\"Create a model instance from a dictionary.\n\n        This method catches common errors that occur when parsing the\n        API response and returns None if the data is invalid. Enable debug\n        or verbose logging to see more information.\n\n\n        Args:\n            logger (logging.Logger): Logger instance.\n            model (type[T_MODEL]): Model class to create an instance of.\n            method_name (str): Name of the method used in API call.\n            device (VeSyncBaseDevice): Instance of VeSyncBaseDevice.\n            data (dict[str, Any] | None): Dictionary to create the model from.\n\n        Returns:\n            T_MODEL: Instance of the model class.\n        \"\"\"\n        try:\n            model_instance = model.from_dict(data)\n        except (MissingField, UnserializableField, InvalidFieldValue) as err:\n            LibraryLogger.log_mashumaro_response_error(\n                logger,\n                method_name,\n                data,\n                err,\n                device,\n            )\n            return None\n        return model_instance\n\n    @staticmethod\n    def bump_level(level: T | None, levels: list[T]) -&gt; T:\n        \"\"\"Increment level by one returning to first level if at last.\n\n        Args:\n            level (T | None): Current level.\n            levels (list[T]): List of levels.\n        \"\"\"\n        if level in levels:\n            idx = levels.index(level)\n            if idx &lt; len(levels) - 1:\n                return levels[idx + 1]\n        return levels[0]\n\n    @staticmethod\n    def try_json_loads(data: str | bytes | None) -&gt; dict | None:\n        \"\"\"Try to load JSON data.\n\n        Gracefully handle errors and return None if loading fails.\n\n        Args:\n            data (str | bytes | None): JSON data to load.\n\n        Returns:\n            dict | None: Parsed JSON data or None if loading fails.\n        \"\"\"\n        if data is None:\n            return None\n        try:\n            return orjson.loads(data)\n        except (orjson.JSONDecodeError, TypeError):\n            return None\n\n    @classmethod\n    def process_dev_response(  # noqa: C901,PLR0912\n        cls,\n        logger: logging.Logger,\n        method_name: str,\n        device: VeSyncBaseDevice,\n        r_dict: dict | None,\n    ) -&gt; dict | None:\n        \"\"\"Process JSON response from Bytes.\n\n        Parses bytes and checks for errors common to all JSON\n        responses, included checking the \"code\" key for non-zero\n        values. Outputs error to passed logger with formatted string\n        if an error is found. This also saves the response code information\n        to the `device.last_response` attribute.\n\n        Args:\n            logger (logging.Logger): Logger instance.\n            method_name (str): Method used in API call.\n            r_dict (dict | None): JSON response from API.\n            device (VeSyncBaseDevice): Instance of VeSyncBaseDevice.\n\n        Returns:\n            dict | None: Parsed JSON response or None if there was an error.\n        \"\"\"\n        device.state.update_ts()\n        if r_dict is None:\n            logger.error('No response from API for %s', method_name)\n            device.last_response = ResponseInfo(\n                name='INVALID_RESPONSE',\n                error_type=ErrorTypes.BAD_RESPONSE,\n                message=f'No response from API for {method_name}',\n            )\n            return None\n\n        error_code = (\n            r_dict.get('error', {}).get('code')\n            if 'error' in r_dict\n            else r_dict.get('code')\n        )\n\n        new_msg = None\n        # Get error codes from nested dictionaries.\n        if error_code == 0:\n            internal_codes = cls._get_internal_codes(r_dict)\n            for code_tuple in internal_codes:\n                if code_tuple[0] != 0:\n                    error_code = code_tuple[0]\n                    new_msg = code_tuple[1]\n                    break\n\n        if isinstance(error_code, int):\n            error_int = error_code\n        elif isinstance(error_code, str):\n            try:\n                error_int = int(error_code)\n            except ValueError:\n                error_int = -999999999\n        else:\n            error_int = -999999999\n        error_info = ErrorCodes.get_error_info(error_int)\n        if new_msg is not None:\n            if error_info.error_type == ErrorTypes.UNKNOWN_ERROR:\n                error_info.message = new_msg\n            else:\n                error_info.message = f'{error_info.message} - {new_msg}'\n        if error_info.device_online is False:\n            device.state.connection_status = ConnectionStatus.OFFLINE\n        LibraryLogger.log_device_return_code(\n            logger,\n            method_name,\n            device.device_name,\n            device.device_type,\n            error_int,\n            f'{error_info.error_type} - {error_info.name} {error_info.message}',\n        )\n        device.last_response = error_info\n        if error_int != 0:\n            return None\n        return r_dict\n\n    @staticmethod\n    def get_class_attributes(target_class: object, keys: list[str]) -&gt; dict[str, Any]:\n        \"\"\"Find matching attributes, static methods, and class methods from list of keys.\n\n        This function is case insensitive and will remove underscores from the keys before\n        comparing them to the class attributes. The provided keys will be returned in the\n        same format if found\n\n        Args:\n            target_class (object): Class to search for attributes\n            keys (list[str]): List of keys to search for\n\n        Returns:\n            dict[str, Any]: Dictionary of keys and their values from the class\n        \"\"\"\n        alias_map = {\n            'userCountryCode': 'countrycode',\n            'deviceId': 'cid',\n            'homeTimeZone': 'timezone',\n            'configModel': 'configmodule',\n            'region': 'countrycode',\n        }\n\n        def normalize_name(name: str) -&gt; str:\n            \"\"\"Normalize a string by removing underscores and making it lowercase.\"\"\"\n            return re.sub(r'_', '', name).lower()\n\n        def get_value(attr_name: str) -&gt; str | float | None:\n            \"\"\"Get value from attribute.\"\"\"\n            attr = getattr(target_class, attr_name)\n            try:\n                return attr() if callable(attr) else attr  # type: ignore[no-any-return]\n            except TypeError:\n                return None\n\n        result = {}\n        normalized_keys = {normalize_name(key): key for key in keys}\n        normalized_aliases = [normalize_name(key) for key in alias_map.values()]\n\n        for attr_name in dir(target_class):\n            normalized_attr = normalize_name(attr_name)\n            if normalized_attr in normalized_keys:\n                attr_val = get_value(attr_name)\n                if attr_val is not None:\n                    result[normalized_keys[normalized_attr]] = attr_val\n            if normalized_attr in normalized_aliases:\n                attr_val = get_value(attr_name)\n                if attr_val is not None:\n                    key_index = normalized_aliases.index(normalized_attr)\n                    key_val = list(alias_map.keys())[key_index]\n                    if key_val in keys:\n                        result[key_val] = attr_val\n\n        return result\n\n    @staticmethod\n    def req_legacy_headers(manager: VeSync) -&gt; dict[str, str]:\n        \"\"\"Build header for legacy api GET requests.\n\n        Args:\n            manager (VeSyncManager): Instance of VeSyncManager.\n\n        Returns:\n            dict: Header dictionary for api requests.\n\n        Examples:\n            &gt;&gt;&gt; req_headers(manager)\n            {\n                'accept-language': 'en',\n                'accountId': manager.account_id,\n                'appVersion': APP_VERSION,\n                'content-type': 'application/json',\n                'tk': manager.token,\n                'tz': manager.time_zone,\n            }\n\n        \"\"\"\n        return {\n            'accept-language': 'en',\n            'accountId': manager.account_id,  # type: ignore[dict-item]\n            'appVersion': APP_VERSION,\n            'content-type': 'application/json',\n            'tk': manager.token,  # type: ignore[dict-item]\n            'tz': manager.time_zone,\n        }\n\n    @staticmethod\n    def req_header_bypass() -&gt; dict[str, str]:\n        \"\"\"Build header for api requests on 'bypass' endpoint.\n\n        Returns:\n            dict: Header dictionary for api requests.\n\n        Examples:\n            &gt;&gt;&gt; req_header_bypass()\n            {\n                'Content-Type': 'application/json; charset=UTF-8',\n                'User-Agent': BYPASS_HEADER_UA,\n            }\n        \"\"\"\n        return {\n            'Content-Type': 'application/json; charset=UTF-8',\n            'User-Agent': BYPASS_HEADER_UA,\n        }\n\n    @staticmethod\n    def _req_body_base(manager: VeSync) -&gt; dict[str, str]:\n        \"\"\"Return universal keys for body of api requests.\n\n        Args:\n            manager (VeSyncManager): Instance of VeSyncManager.\n\n        Returns:\n            dict: Body dictionary for api requests.\n\n        Examples:\n            &gt;&gt;&gt; req_body_base(manager)\n            {\n                'timeZone': manager.time_zone,\n                'acceptLanguage': 'en',\n            }\n        \"\"\"\n        return {'timeZone': manager.time_zone, 'acceptLanguage': 'en'}\n\n    @staticmethod\n    def _req_body_auth(manager: VeSync) -&gt; REQUEST_T:\n        \"\"\"Keys for authenticating api requests.\n\n        Args:\n            manager (VeSyncManager): Instance of VeSyncManager.\n\n        Returns:\n            dict: Authentication keys for api requests.\n\n        Examples:\n            &gt;&gt;&gt; req_body_auth(manager)\n            {\n                'accountID': manager.account_id,\n                'token': manager.token,\n            }\n        \"\"\"\n        return {'accountID': manager.account_id, 'token': manager.token}\n\n    @staticmethod\n    @deprecated('This is a legacy function and will be removed in a future release.')\n    def _req_body_details() -&gt; REQUEST_T:\n        \"\"\"Detail keys for api requests.\n\n        This method is deprecated, use `get_class_attributes` instead.\n\n        Returns:\n            dict: Detail keys for api requests.\n\n        Examples:\n            &gt;&gt;&gt; req_body_details()\n            {\n                'appVersion': APP_VERSION,\n                'phoneBrand': PHONE_BRAND,\n                'phoneOS': PHONE_OS,\n                'traceId': str(int(time.time())),\n            }\n        \"\"\"\n        return {\n            'appVersion': APP_VERSION,\n            'phoneBrand': PHONE_BRAND,\n            'phoneOS': PHONE_OS,\n            'traceId': str(int(time.time())),\n        }\n\n    @classmethod\n    @deprecated('This is a legacy function and will be removed in a future release.')\n    def req_body(cls, manager: VeSync, type_: str) -&gt; REQUEST_T:  # noqa: C901\n        \"\"\"Builder for body of api requests.\n\n        This method is deprecated, use `get_class_attributes` instead.\n\n        Args:\n            manager (VeSyncManager): Instance of VeSyncManager.\n            type_ (str): Type of request to build body for.\n\n        Returns:\n            dict: Body dictionary for api requests.\n\n        Note:\n            The body dictionary will be built based on the type of request.\n            The type of requests include:\n            - login\n            - devicestatus\n            - devicelist\n            - devicedetail\n            - energy_week\n            - energy_month\n            - energy_year\n            - bypass\n            - bypassV2\n            - bypass_config\n        \"\"\"\n        body: REQUEST_T = cls._req_body_base(manager)\n\n        if type_ == 'login':\n            body |= cls._req_body_details()\n            # pylint: disable=protected-access\n            body |= {\n                'email': manager.auth._username,  # noqa: SLF001\n                'password': cls.hash_password(\n                    manager.auth._password  # noqa: SLF001\n                ),\n                'devToken': '',\n                'userType': USER_TYPE,\n                'method': 'login',\n            }\n            return body\n\n        body |= cls._req_body_auth(manager)\n\n        if type_ == 'devicestatus':\n            return body\n\n        body |= cls._req_body_details()\n\n        if type_ == 'devicelist':\n            body['method'] = 'devices'\n            body['pageNo'] = '1'\n            body['pageSize'] = '100'\n\n        elif type_ == 'devicedetail':\n            body['method'] = 'devicedetail'\n            body['mobileId'] = MOBILE_ID\n\n        elif type_ == 'energy_week':\n            body['method'] = 'energyweek'\n            body['mobileId'] = MOBILE_ID\n\n        elif type_ == 'energy_month':\n            body['method'] = 'energymonth'\n            body['mobileId'] = MOBILE_ID\n\n        elif type_ == 'energy_year':\n            body['method'] = 'energyyear'\n            body['mobileId'] = MOBILE_ID\n\n        elif type_ == 'bypass':\n            body['method'] = 'bypass'\n\n        elif type_ == 'bypassV2':\n            body['deviceRegion'] = DEFAULT_REGION\n            body['method'] = 'bypassV2'\n\n        elif type_ == 'bypass_config':\n            body['method'] = 'firmwareUpdateInfo'\n\n        return body\n\n    @staticmethod\n    def calculate_hex(hex_string: str) -&gt; float:\n        \"\"\"Credit for conversion to itsnotlupus/vesync_wsproxy.\n\n        Hex conversion for legacy outlet power and voltage.\n        \"\"\"\n        hex_conv = hex_string.split(':')\n        return (int(hex_conv[0], 16) + int(hex_conv[1], 16)) / 8192\n\n    @staticmethod\n    def hash_password(string: str) -&gt; str:\n        \"\"\"Encode password.\"\"\"\n        return hashlib.md5(string.encode('utf-8')).hexdigest()  # noqa: S324\n\n    @staticmethod\n    def _get_internal_codes(response: dict) -&gt; list[tuple[int, str | None]]:\n        \"\"\"Get all error codes from nested dictionary.\n\n        Args:\n            response (dict): API response.\n\n        Returns:\n            list[int]: List of error codes.\n        \"\"\"\n        error_keys = ['error', 'code', 'device_error_code', 'errorCode']\n\n        def extract_all_error_codes(\n            key: str, var: dict\n        ) -&gt; Iterator[tuple[int, str | None]]:\n            \"\"\"Find all error code keys in nested dictionary.\"\"\"\n            if hasattr(var, 'items'):\n                for k, v in var.items():\n                    if k == key and int(v) != 0:\n                        msg = var.get('msg') or var.get('result', {}).get('msg')\n                        yield v, msg\n                    if isinstance(v, dict):\n                        yield from extract_all_error_codes(key, v)\n                    elif isinstance(v, list):\n                        for item in v:\n                            yield from extract_all_error_codes(key, item)\n\n        errors = []\n        for error_key in error_keys:\n            errors.extend(list(extract_all_error_codes(error_key, response)))\n        return errors\n</code></pre>"},{"location":"development/utils/helpers/#pyvesync.utils.helpers.Helpers-functions","title":"Functions\u21b2","text":""},{"location":"development/utils/helpers/#pyvesync.utils.helpers.Helpers.model_maker","title":"model_maker  <code>staticmethod</code>  \u21b2","text":"<pre><code>model_maker(\n    logger: Logger,\n    model: type[T_MODEL],\n    method_name: str,\n    data: dict[str, Any],\n    device: VeSyncBaseDevice | None = None,\n) -&gt; T_MODEL | None\n</code></pre> <p>Create a model instance from a dictionary.</p> <p>This method catches common errors that occur when parsing the API response and returns None if the data is invalid. Enable debug or verbose logging to see more information.</p> <p>Parameters:</p> Name Type Description Default <code>logger</code> <code>Logger</code> <p>Logger instance.</p> required <code>model</code> <code>type[T_MODEL]</code> <p>Model class to create an instance of.</p> required <code>method_name</code> <code>str</code> <p>Name of the method used in API call.</p> required <code>device</code> <code>VeSyncBaseDevice</code> <p>Instance of VeSyncBaseDevice.</p> <code>None</code> <code>data</code> <code>dict[str, Any] | None</code> <p>Dictionary to create the model from.</p> required <p>Returns:</p> Name Type Description <code>T_MODEL</code> <code>T_MODEL | None</code> <p>Instance of the model class.</p> Source code in <code>src\\pyvesync\\utils\\helpers.py</code> <pre><code>@staticmethod\ndef model_maker(\n    logger: logging.Logger,\n    model: type[T_MODEL],\n    method_name: str,\n    data: dict[str, Any],\n    device: VeSyncBaseDevice | None = None,\n) -&gt; T_MODEL | None:\n    \"\"\"Create a model instance from a dictionary.\n\n    This method catches common errors that occur when parsing the\n    API response and returns None if the data is invalid. Enable debug\n    or verbose logging to see more information.\n\n\n    Args:\n        logger (logging.Logger): Logger instance.\n        model (type[T_MODEL]): Model class to create an instance of.\n        method_name (str): Name of the method used in API call.\n        device (VeSyncBaseDevice): Instance of VeSyncBaseDevice.\n        data (dict[str, Any] | None): Dictionary to create the model from.\n\n    Returns:\n        T_MODEL: Instance of the model class.\n    \"\"\"\n    try:\n        model_instance = model.from_dict(data)\n    except (MissingField, UnserializableField, InvalidFieldValue) as err:\n        LibraryLogger.log_mashumaro_response_error(\n            logger,\n            method_name,\n            data,\n            err,\n            device,\n        )\n        return None\n    return model_instance\n</code></pre>"},{"location":"development/utils/helpers/#pyvesync.utils.helpers.Helpers.bump_level","title":"bump_level  <code>staticmethod</code>  \u21b2","text":"<pre><code>bump_level(level: T | None, levels: list[T]) -&gt; T\n</code></pre> <p>Increment level by one returning to first level if at last.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>T | None</code> <p>Current level.</p> required <code>levels</code> <code>list[T]</code> <p>List of levels.</p> required Source code in <code>src\\pyvesync\\utils\\helpers.py</code> <pre><code>@staticmethod\ndef bump_level(level: T | None, levels: list[T]) -&gt; T:\n    \"\"\"Increment level by one returning to first level if at last.\n\n    Args:\n        level (T | None): Current level.\n        levels (list[T]): List of levels.\n    \"\"\"\n    if level in levels:\n        idx = levels.index(level)\n        if idx &lt; len(levels) - 1:\n            return levels[idx + 1]\n    return levels[0]\n</code></pre>"},{"location":"development/utils/helpers/#pyvesync.utils.helpers.Helpers.try_json_loads","title":"try_json_loads  <code>staticmethod</code>  \u21b2","text":"<pre><code>try_json_loads(data: str | bytes | None) -&gt; dict | None\n</code></pre> <p>Try to load JSON data.</p> <p>Gracefully handle errors and return None if loading fails.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | bytes | None</code> <p>JSON data to load.</p> required <p>Returns:</p> Type Description <code>dict | None</code> <p>dict | None: Parsed JSON data or None if loading fails.</p> Source code in <code>src\\pyvesync\\utils\\helpers.py</code> <pre><code>@staticmethod\ndef try_json_loads(data: str | bytes | None) -&gt; dict | None:\n    \"\"\"Try to load JSON data.\n\n    Gracefully handle errors and return None if loading fails.\n\n    Args:\n        data (str | bytes | None): JSON data to load.\n\n    Returns:\n        dict | None: Parsed JSON data or None if loading fails.\n    \"\"\"\n    if data is None:\n        return None\n    try:\n        return orjson.loads(data)\n    except (orjson.JSONDecodeError, TypeError):\n        return None\n</code></pre>"},{"location":"development/utils/helpers/#pyvesync.utils.helpers.Helpers.process_dev_response","title":"process_dev_response  <code>classmethod</code>  \u21b2","text":"<pre><code>process_dev_response(\n    logger: Logger,\n    method_name: str,\n    device: VeSyncBaseDevice,\n    r_dict: dict | None,\n) -&gt; dict | None\n</code></pre> <p>Process JSON response from Bytes.</p> <p>Parses bytes and checks for errors common to all JSON responses, included checking the \"code\" key for non-zero values. Outputs error to passed logger with formatted string if an error is found. This also saves the response code information to the <code>device.last_response</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>logger</code> <code>Logger</code> <p>Logger instance.</p> required <code>method_name</code> <code>str</code> <p>Method used in API call.</p> required <code>r_dict</code> <code>dict | None</code> <p>JSON response from API.</p> required <code>device</code> <code>VeSyncBaseDevice</code> <p>Instance of VeSyncBaseDevice.</p> required <p>Returns:</p> Type Description <code>dict | None</code> <p>dict | None: Parsed JSON response or None if there was an error.</p> Source code in <code>src\\pyvesync\\utils\\helpers.py</code> <pre><code>@classmethod\ndef process_dev_response(  # noqa: C901,PLR0912\n    cls,\n    logger: logging.Logger,\n    method_name: str,\n    device: VeSyncBaseDevice,\n    r_dict: dict | None,\n) -&gt; dict | None:\n    \"\"\"Process JSON response from Bytes.\n\n    Parses bytes and checks for errors common to all JSON\n    responses, included checking the \"code\" key for non-zero\n    values. Outputs error to passed logger with formatted string\n    if an error is found. This also saves the response code information\n    to the `device.last_response` attribute.\n\n    Args:\n        logger (logging.Logger): Logger instance.\n        method_name (str): Method used in API call.\n        r_dict (dict | None): JSON response from API.\n        device (VeSyncBaseDevice): Instance of VeSyncBaseDevice.\n\n    Returns:\n        dict | None: Parsed JSON response or None if there was an error.\n    \"\"\"\n    device.state.update_ts()\n    if r_dict is None:\n        logger.error('No response from API for %s', method_name)\n        device.last_response = ResponseInfo(\n            name='INVALID_RESPONSE',\n            error_type=ErrorTypes.BAD_RESPONSE,\n            message=f'No response from API for {method_name}',\n        )\n        return None\n\n    error_code = (\n        r_dict.get('error', {}).get('code')\n        if 'error' in r_dict\n        else r_dict.get('code')\n    )\n\n    new_msg = None\n    # Get error codes from nested dictionaries.\n    if error_code == 0:\n        internal_codes = cls._get_internal_codes(r_dict)\n        for code_tuple in internal_codes:\n            if code_tuple[0] != 0:\n                error_code = code_tuple[0]\n                new_msg = code_tuple[1]\n                break\n\n    if isinstance(error_code, int):\n        error_int = error_code\n    elif isinstance(error_code, str):\n        try:\n            error_int = int(error_code)\n        except ValueError:\n            error_int = -999999999\n    else:\n        error_int = -999999999\n    error_info = ErrorCodes.get_error_info(error_int)\n    if new_msg is not None:\n        if error_info.error_type == ErrorTypes.UNKNOWN_ERROR:\n            error_info.message = new_msg\n        else:\n            error_info.message = f'{error_info.message} - {new_msg}'\n    if error_info.device_online is False:\n        device.state.connection_status = ConnectionStatus.OFFLINE\n    LibraryLogger.log_device_return_code(\n        logger,\n        method_name,\n        device.device_name,\n        device.device_type,\n        error_int,\n        f'{error_info.error_type} - {error_info.name} {error_info.message}',\n    )\n    device.last_response = error_info\n    if error_int != 0:\n        return None\n    return r_dict\n</code></pre>"},{"location":"development/utils/helpers/#pyvesync.utils.helpers.Helpers.get_class_attributes","title":"get_class_attributes  <code>staticmethod</code>  \u21b2","text":"<pre><code>get_class_attributes(\n    target_class: object, keys: list[str]\n) -&gt; dict[str, Any]\n</code></pre> <p>Find matching attributes, static methods, and class methods from list of keys.</p> <p>This function is case insensitive and will remove underscores from the keys before comparing them to the class attributes. The provided keys will be returned in the same format if found</p> <p>Parameters:</p> Name Type Description Default <code>target_class</code> <code>object</code> <p>Class to search for attributes</p> required <code>keys</code> <code>list[str]</code> <p>List of keys to search for</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary of keys and their values from the class</p> Source code in <code>src\\pyvesync\\utils\\helpers.py</code> <pre><code>@staticmethod\ndef get_class_attributes(target_class: object, keys: list[str]) -&gt; dict[str, Any]:\n    \"\"\"Find matching attributes, static methods, and class methods from list of keys.\n\n    This function is case insensitive and will remove underscores from the keys before\n    comparing them to the class attributes. The provided keys will be returned in the\n    same format if found\n\n    Args:\n        target_class (object): Class to search for attributes\n        keys (list[str]): List of keys to search for\n\n    Returns:\n        dict[str, Any]: Dictionary of keys and their values from the class\n    \"\"\"\n    alias_map = {\n        'userCountryCode': 'countrycode',\n        'deviceId': 'cid',\n        'homeTimeZone': 'timezone',\n        'configModel': 'configmodule',\n        'region': 'countrycode',\n    }\n\n    def normalize_name(name: str) -&gt; str:\n        \"\"\"Normalize a string by removing underscores and making it lowercase.\"\"\"\n        return re.sub(r'_', '', name).lower()\n\n    def get_value(attr_name: str) -&gt; str | float | None:\n        \"\"\"Get value from attribute.\"\"\"\n        attr = getattr(target_class, attr_name)\n        try:\n            return attr() if callable(attr) else attr  # type: ignore[no-any-return]\n        except TypeError:\n            return None\n\n    result = {}\n    normalized_keys = {normalize_name(key): key for key in keys}\n    normalized_aliases = [normalize_name(key) for key in alias_map.values()]\n\n    for attr_name in dir(target_class):\n        normalized_attr = normalize_name(attr_name)\n        if normalized_attr in normalized_keys:\n            attr_val = get_value(attr_name)\n            if attr_val is not None:\n                result[normalized_keys[normalized_attr]] = attr_val\n        if normalized_attr in normalized_aliases:\n            attr_val = get_value(attr_name)\n            if attr_val is not None:\n                key_index = normalized_aliases.index(normalized_attr)\n                key_val = list(alias_map.keys())[key_index]\n                if key_val in keys:\n                    result[key_val] = attr_val\n\n    return result\n</code></pre>"},{"location":"development/utils/helpers/#pyvesync.utils.helpers.Helpers.req_legacy_headers","title":"req_legacy_headers  <code>staticmethod</code>  \u21b2","text":"<pre><code>req_legacy_headers(manager: VeSync) -&gt; dict[str, str]\n</code></pre> <p>Build header for legacy api GET requests.</p> <p>Parameters:</p> Name Type Description Default <code>manager</code> <code>VeSyncManager</code> <p>Instance of VeSyncManager.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, str]</code> <p>Header dictionary for api requests.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; req_headers(manager)\n{\n    'accept-language': 'en',\n    'accountId': manager.account_id,\n    'appVersion': APP_VERSION,\n    'content-type': 'application/json',\n    'tk': manager.token,\n    'tz': manager.time_zone,\n}\n</code></pre> Source code in <code>src\\pyvesync\\utils\\helpers.py</code> <pre><code>@staticmethod\ndef req_legacy_headers(manager: VeSync) -&gt; dict[str, str]:\n    \"\"\"Build header for legacy api GET requests.\n\n    Args:\n        manager (VeSyncManager): Instance of VeSyncManager.\n\n    Returns:\n        dict: Header dictionary for api requests.\n\n    Examples:\n        &gt;&gt;&gt; req_headers(manager)\n        {\n            'accept-language': 'en',\n            'accountId': manager.account_id,\n            'appVersion': APP_VERSION,\n            'content-type': 'application/json',\n            'tk': manager.token,\n            'tz': manager.time_zone,\n        }\n\n    \"\"\"\n    return {\n        'accept-language': 'en',\n        'accountId': manager.account_id,  # type: ignore[dict-item]\n        'appVersion': APP_VERSION,\n        'content-type': 'application/json',\n        'tk': manager.token,  # type: ignore[dict-item]\n        'tz': manager.time_zone,\n    }\n</code></pre>"},{"location":"development/utils/helpers/#pyvesync.utils.helpers.Helpers.req_header_bypass","title":"req_header_bypass  <code>staticmethod</code>  \u21b2","text":"<pre><code>req_header_bypass() -&gt; dict[str, str]\n</code></pre> <p>Build header for api requests on 'bypass' endpoint.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, str]</code> <p>Header dictionary for api requests.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; req_header_bypass()\n{\n    'Content-Type': 'application/json; charset=UTF-8',\n    'User-Agent': BYPASS_HEADER_UA,\n}\n</code></pre> Source code in <code>src\\pyvesync\\utils\\helpers.py</code> <pre><code>@staticmethod\ndef req_header_bypass() -&gt; dict[str, str]:\n    \"\"\"Build header for api requests on 'bypass' endpoint.\n\n    Returns:\n        dict: Header dictionary for api requests.\n\n    Examples:\n        &gt;&gt;&gt; req_header_bypass()\n        {\n            'Content-Type': 'application/json; charset=UTF-8',\n            'User-Agent': BYPASS_HEADER_UA,\n        }\n    \"\"\"\n    return {\n        'Content-Type': 'application/json; charset=UTF-8',\n        'User-Agent': BYPASS_HEADER_UA,\n    }\n</code></pre>"},{"location":"development/utils/helpers/#pyvesync.utils.helpers.Helpers.calculate_hex","title":"calculate_hex  <code>staticmethod</code>  \u21b2","text":"<pre><code>calculate_hex(hex_string: str) -&gt; float\n</code></pre> <p>Credit for conversion to itsnotlupus/vesync_wsproxy.</p> <p>Hex conversion for legacy outlet power and voltage.</p> Source code in <code>src\\pyvesync\\utils\\helpers.py</code> <pre><code>@staticmethod\ndef calculate_hex(hex_string: str) -&gt; float:\n    \"\"\"Credit for conversion to itsnotlupus/vesync_wsproxy.\n\n    Hex conversion for legacy outlet power and voltage.\n    \"\"\"\n    hex_conv = hex_string.split(':')\n    return (int(hex_conv[0], 16) + int(hex_conv[1], 16)) / 8192\n</code></pre>"},{"location":"development/utils/helpers/#pyvesync.utils.helpers.Helpers.hash_password","title":"hash_password  <code>staticmethod</code>  \u21b2","text":"<pre><code>hash_password(string: str) -&gt; str\n</code></pre> <p>Encode password.</p> Source code in <code>src\\pyvesync\\utils\\helpers.py</code> <pre><code>@staticmethod\ndef hash_password(string: str) -&gt; str:\n    \"\"\"Encode password.\"\"\"\n    return hashlib.md5(string.encode('utf-8')).hexdigest()  # noqa: S324\n</code></pre>"},{"location":"development/utils/helpers/#validators-class","title":"Validators Class\u21b2","text":"<p>Contains common method to validate numerical values.</p>"},{"location":"development/utils/helpers/#pyvesync.utils.helpers.Validators","title":"pyvesync.utils.helpers.Validators \u21b2","text":"<p>Methods to validate input.</p> Source code in <code>src\\pyvesync\\utils\\helpers.py</code> <pre><code>class Validators:\n    \"\"\"Methods to validate input.\"\"\"\n\n    @staticmethod\n    def validate_range(\n        value: NUMERIC_OPT, minimum: NUMERIC_STRICT, maximum: NUMERIC_STRICT\n    ) -&gt; bool:\n        \"\"\"Validate number is within range.\"\"\"\n        if value is None:\n            return False\n        try:\n            return float(minimum) &lt;= float(value) &lt;= float(maximum)\n        except (ValueError, TypeError):\n            return False\n\n    @classmethod\n    def validate_zero_to_hundred(cls, value: NUMERIC_OPT) -&gt; bool:\n        \"\"\"Validate number is a percentage.\"\"\"\n        return Validators.validate_range(value, 0, 100)\n\n    @classmethod\n    def validate_hsv(\n        cls, hue: NUMERIC_OPT, saturation: NUMERIC_OPT, value: NUMERIC_OPT\n    ) -&gt; bool:\n        \"\"\"Validate HSV values.\"\"\"\n        return (\n            cls.validate_range(hue, 0, 360)\n            and cls.validate_zero_to_hundred(saturation)\n            and cls.validate_zero_to_hundred(value)\n        )\n\n    @classmethod\n    def validate_rgb(\n        cls, red: NUMERIC_OPT, green: NUMERIC_OPT, blue: NUMERIC_OPT\n    ) -&gt; bool:\n        \"\"\"Validate RGB values.\"\"\"\n        return all(cls.validate_range(val, 0, 255) for val in (red, green, blue))\n</code></pre>"},{"location":"development/utils/helpers/#pyvesync.utils.helpers.Validators-functions","title":"Functions\u21b2","text":""},{"location":"development/utils/helpers/#pyvesync.utils.helpers.Validators.validate_hsv","title":"validate_hsv  <code>classmethod</code>  \u21b2","text":"<pre><code>validate_hsv(\n    hue: NUMERIC_OPT,\n    saturation: NUMERIC_OPT,\n    value: NUMERIC_OPT,\n) -&gt; bool\n</code></pre> <p>Validate HSV values.</p> Source code in <code>src\\pyvesync\\utils\\helpers.py</code> <pre><code>@classmethod\ndef validate_hsv(\n    cls, hue: NUMERIC_OPT, saturation: NUMERIC_OPT, value: NUMERIC_OPT\n) -&gt; bool:\n    \"\"\"Validate HSV values.\"\"\"\n    return (\n        cls.validate_range(hue, 0, 360)\n        and cls.validate_zero_to_hundred(saturation)\n        and cls.validate_zero_to_hundred(value)\n    )\n</code></pre>"},{"location":"development/utils/helpers/#pyvesync.utils.helpers.Validators.validate_range","title":"validate_range  <code>staticmethod</code>  \u21b2","text":"<pre><code>validate_range(\n    value: NUMERIC_OPT,\n    minimum: NUMERIC_STRICT,\n    maximum: NUMERIC_STRICT,\n) -&gt; bool\n</code></pre> <p>Validate number is within range.</p> Source code in <code>src\\pyvesync\\utils\\helpers.py</code> <pre><code>@staticmethod\ndef validate_range(\n    value: NUMERIC_OPT, minimum: NUMERIC_STRICT, maximum: NUMERIC_STRICT\n) -&gt; bool:\n    \"\"\"Validate number is within range.\"\"\"\n    if value is None:\n        return False\n    try:\n        return float(minimum) &lt;= float(value) &lt;= float(maximum)\n    except (ValueError, TypeError):\n        return False\n</code></pre>"},{"location":"development/utils/helpers/#pyvesync.utils.helpers.Validators.validate_rgb","title":"validate_rgb  <code>classmethod</code>  \u21b2","text":"<pre><code>validate_rgb(\n    red: NUMERIC_OPT, green: NUMERIC_OPT, blue: NUMERIC_OPT\n) -&gt; bool\n</code></pre> <p>Validate RGB values.</p> Source code in <code>src\\pyvesync\\utils\\helpers.py</code> <pre><code>@classmethod\ndef validate_rgb(\n    cls, red: NUMERIC_OPT, green: NUMERIC_OPT, blue: NUMERIC_OPT\n) -&gt; bool:\n    \"\"\"Validate RGB values.\"\"\"\n    return all(cls.validate_range(val, 0, 255) for val in (red, green, blue))\n</code></pre>"},{"location":"development/utils/helpers/#pyvesync.utils.helpers.Validators.validate_zero_to_hundred","title":"validate_zero_to_hundred  <code>classmethod</code>  \u21b2","text":"<pre><code>validate_zero_to_hundred(value: NUMERIC_OPT) -&gt; bool\n</code></pre> <p>Validate number is a percentage.</p> Source code in <code>src\\pyvesync\\utils\\helpers.py</code> <pre><code>@classmethod\ndef validate_zero_to_hundred(cls, value: NUMERIC_OPT) -&gt; bool:\n    \"\"\"Validate number is a percentage.\"\"\"\n    return Validators.validate_range(value, 0, 100)\n</code></pre>"},{"location":"devices/","title":"Device Classes and States\u21b2","text":"<p>Devices are organized into modules by product type. Each page shows the methods and state attributes of each device class.</p> <ol> <li>Bulbs</li> <li>Fans</li> <li>Humidifiers</li> <li>Outlets</li> <li>Purifiers</li> <li>Switches</li> <li>Thermostats</li> <li>Air Fryers</li> </ol> <p>For a list of supported devices and their corresponding device classes, see the Supported Devices page.</p>"},{"location":"devices/air_purifiers/","title":"VeSync Air Purifiers\u21b2","text":""},{"location":"devices/air_purifiers/#contents","title":"Contents:\u21b2","text":"<ul> <li>PurifierState Class</li> <li>VeSyncAirBypass Purifiers - Most common model</li> <li>VeSyncAirBaseV2 Purifiers - Newer models</li> <li>VeSyncAirSprout Purifiers - Sprout models</li> <li>VeSyncAir131 Purifiers - PUR-LV131S Purifiers</li> <li>VeSyncPurifier Base Device - Abstract base class</li> </ul>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState","title":"pyvesync.base_devices.purifier_base.PurifierState \u21b2","text":"<p>               Bases: <code>DeviceState</code></p> <p>Base state class for Purifiers.</p> <p>Attributes:</p> Name Type Description <code>active_time</code> <code>int</code> <p>Active time of device, defaults to None.</p> <code>connection_status</code> <code>str</code> <p>Connection status of device.</p> <code>device</code> <code>VeSyncOutlet</code> <p>Device object.</p> <code>device_status</code> <code>str</code> <p>Device status.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <code>last_update_ts</code> <code>int</code> <p>Last update timestamp of device, defaults to None.</p> <code>mode</code> <code>str</code> <p>Current mode of the purifier.</p> <code>fan_level</code> <code>int</code> <p>Current fan level of the purifier.</p> <code>fan_set_level</code> <code>int</code> <p>Set fan level of the purifier.</p> <code>filter_life</code> <code>int</code> <p>Filter life percentage of the purifier.</p> <code>auto_preference_type</code> <code>str</code> <p>Auto preference type of the purifier.</p> <code>auto_room_size</code> <code>int</code> <p>Auto room size of the purifier.</p> <code>air_quality_level</code> <code>AirQualityLevel</code> <p>Air quality level of the purifier.</p> <code>child_lock</code> <code>bool</code> <p>Child lock status of the purifier.</p> <code>display_status</code> <code>str</code> <p>Display status of the purifier.</p> <code>display_set_status</code> <code>str</code> <p>Display set status of the purifier.</p> <code>display_forever</code> <code>bool</code> <p>Display forever status of the purifier.</p> <code>timer</code> <code>Timer</code> <p>Timer object for the purifier.</p> <code>pm25</code> <code>int</code> <p>PM2.5 value of the purifier.</p> <code>pm1</code> <code>int</code> <p>PM1 value of the purifier.</p> <code>pm10</code> <code>int</code> <p>PM10 value of the purifier.</p> <code>aq_percent</code> <code>int</code> <p>Air quality percentage of the purifier.</p> <code>light_detection_switch</code> <code>str</code> <p>Light detection switch status of the purifier.</p> <code>light_detection_status</code> <code>str</code> <p>Light detection status of the purifier.</p> <code>nightlight_status</code> <code>str</code> <p>Nightlight status of the purifier.</p> <code>fan_rotate_angle</code> <code>int</code> <p>Fan rotate angle of the purifier.</p> <code>temperature</code> <code>int</code> <p>Temperature value of the purifier.</p> <code>humidity</code> <code>int</code> <p>Humidity value of the purifier.</p> <code>voc</code> <code>int</code> <p>VOC value of the purifier.</p> <code>co2</code> <code>int</code> <p>CO2 value of the purifier.</p> <code>nightlight_brightness</code> <code>int</code> <p>Nightlight brightness level of the purifier.</p> Note <p>Not all attributes are supported by all models.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>class PurifierState(DeviceState):\n    \"\"\"Base state class for Purifiers.\n\n    Attributes:\n        active_time (int): Active time of device, defaults to None.\n        connection_status (str): Connection status of device.\n        device (VeSyncOutlet): Device object.\n        device_status (str): Device status.\n        features (dict): Features of device.\n        last_update_ts (int): Last update timestamp of device, defaults to None.\n        mode (str): Current mode of the purifier.\n        fan_level (int): Current fan level of the purifier.\n        fan_set_level (int): Set fan level of the purifier.\n        filter_life (int): Filter life percentage of the purifier.\n        auto_preference_type (str): Auto preference type of the purifier.\n        auto_room_size (int): Auto room size of the purifier.\n        air_quality_level (AirQualityLevel): Air quality level of the purifier.\n        child_lock (bool): Child lock status of the purifier.\n        display_status (str): Display status of the purifier.\n        display_set_status (str): Display set status of the purifier.\n        display_forever (bool): Display forever status of the purifier.\n        timer (Timer): Timer object for the purifier.\n        pm25 (int): PM2.5 value of the purifier.\n        pm1 (int): PM1 value of the purifier.\n        pm10 (int): PM10 value of the purifier.\n        aq_percent (int): Air quality percentage of the purifier.\n        light_detection_switch (str): Light detection switch status of the purifier.\n        light_detection_status (str): Light detection status of the purifier.\n        nightlight_status (str): Nightlight status of the purifier.\n        fan_rotate_angle (int): Fan rotate angle of the purifier.\n        temperature (int): Temperature value of the purifier.\n        humidity (int): Humidity value of the purifier.\n        voc (int): VOC value of the purifier.\n        co2 (int): CO2 value of the purifier.\n        nightlight_brightness (int): Nightlight brightness level of the purifier.\n\n    Note:\n        Not all attributes are supported by all models.\n    \"\"\"\n\n    __slots__ = (\n        '_air_quality_level',\n        'aq_percent',\n        'auto_preference_type',\n        'auto_room_size',\n        'child_lock',\n        'co2',\n        'display_forever',\n        'display_set_status',\n        'display_status',\n        'fan_level',\n        'fan_rotate_angle',\n        'fan_set_level',\n        'filter_life',\n        'filter_open_state',\n        'humidity',\n        'light_detection_status',\n        'light_detection_switch',\n        'mode',\n        'nightlight_brightness',\n        'nightlight_status',\n        'pm1',\n        'pm10',\n        'pm25',\n        'temperature',\n        'voc',\n    )\n\n    def __init__(\n        self,\n        device: VeSyncPurifier,\n        details: ResponseDeviceDetailsModel,\n        feature_map: PurifierMap,\n    ) -&gt; None:\n        \"\"\"Initialize Purifier State.\"\"\"\n        super().__init__(device, details, feature_map)\n        self.mode: str = PurifierModes.UNKNOWN\n        self.fan_level: int | None = None\n        self.fan_set_level: int | None = None\n        self.filter_life: int | None = None\n        self.auto_preference_type: str | None = None\n        self.auto_room_size: int | None = None\n        self._air_quality_level: AirQualityLevel | None = None\n        self.child_lock: bool = False\n        self.filter_open_state: bool = False\n        self.display_status: str | None = None\n        self.display_set_status: str | None = None\n        self.display_forever: bool = False\n        self.humidity: int | None = None\n        self.temperature: int | None = None\n        # Attributes not supported by all purifiers\n        self.pm25: int | None = None\n        self.pm1: int | None = None\n        self.pm10: int | None = None\n        self.aq_percent: int | None = None\n        self.voc: int | None = None\n        self.co2: int | None = None\n        self.light_detection_switch: str | None = None\n        self.light_detection_status: str | None = None\n        self.nightlight_brightness: int | None = None\n        self.nightlight_status: str | None = None\n        self.fan_rotate_angle: int | None = None\n\n    @property\n    def air_quality_level(self) -&gt; int:\n        \"\"\"Return air quality level in integer from 1-4.\n\n        Returns -1 if unknown.\n        \"\"\"\n        if self._air_quality_level is None:\n            return -1\n        return int(self._air_quality_level)\n\n    @air_quality_level.setter\n    def air_quality_level(self, value: int | None) -&gt; None:\n        \"\"\"Set air quality level.\"\"\"\n        if isinstance(value, int):\n            self._air_quality_level = AirQualityLevel.from_int(value)\n\n    def set_air_quality_level(self, value: int | str | None) -&gt; None:\n        \"\"\"Set air quality level.\"\"\"\n        if isinstance(value, str):\n            self._air_quality_level = AirQualityLevel.from_string(value)\n        elif isinstance(value, int):\n            self._air_quality_level = AirQualityLevel.from_int(value)\n\n    @property\n    def air_quality_string(self) -&gt; str:\n        \"\"\"Return air quality level as string.\"\"\"\n        return str(self._air_quality_level)\n\n    @property\n    @deprecated('Use state.air_quality_level instead.')\n    def air_quality(self) -&gt; int | str | None:\n        \"\"\"Return air quality level.\"\"\"\n        return self.air_quality_level\n\n    @property\n    @deprecated('Use light_detection_switch instead.')\n    def light_detection(self) -&gt; bool:\n        \"\"\"Return light detection status.\"\"\"\n        return self.light_detection_switch == DeviceStatus.ON\n\n    @property\n    @deprecated('Use state.pm25 instead.')\n    def air_quality_value(self) -&gt; int | None:\n        \"\"\"Return air quality value.\"\"\"\n        return self.pm25\n\n    @property\n    @deprecated('Use PurifierState.fan_level instead.')\n    def speed(self) -&gt; int | None:\n        \"\"\"Return fan speed.\"\"\"\n        return self.fan_level\n\n    @property\n    @deprecated('Use PurifierState.nightlight_status instead.')\n    def night_light(self) -&gt; str | None:\n        \"\"\"Return night light status.\"\"\"\n        return self.nightlight_status\n\n    @property\n    @deprecated('Use display_status instead.')\n    def display_state(self) -&gt; str | None:\n        \"\"\"Return display status.\"\"\"\n        return self.display_status\n\n    @property\n    @deprecated('Use display_set_status instead.')\n    def display_switch(self) -&gt; str | None:\n        \"\"\"Return display switch status.\"\"\"\n        return self.display_set_status\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.active_time","title":"active_time  <code>instance-attribute</code>  \u21b2","text":"<pre><code>active_time: int | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.air_quality","title":"air_quality  <code>property</code>  \u21b2","text":"<pre><code>air_quality: int | str | None\n</code></pre> <p>Return air quality level.</p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.air_quality_level","title":"air_quality_level  <code>property</code> <code>writable</code>  \u21b2","text":"<pre><code>air_quality_level: int\n</code></pre> <p>Return air quality level in integer from 1-4.</p> <p>Returns -1 if unknown.</p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.air_quality_string","title":"air_quality_string  <code>property</code>  \u21b2","text":"<pre><code>air_quality_string: str\n</code></pre> <p>Return air quality level as string.</p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.air_quality_value","title":"air_quality_value  <code>property</code>  \u21b2","text":"<pre><code>air_quality_value: int | None\n</code></pre> <p>Return air quality value.</p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.aq_percent","title":"aq_percent  <code>instance-attribute</code>  \u21b2","text":"<pre><code>aq_percent: int | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.auto_preference_type","title":"auto_preference_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>auto_preference_type: str | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.auto_room_size","title":"auto_room_size  <code>instance-attribute</code>  \u21b2","text":"<pre><code>auto_room_size: int | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.child_lock","title":"child_lock  <code>instance-attribute</code>  \u21b2","text":"<pre><code>child_lock: bool = False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.co2","title":"co2  <code>instance-attribute</code>  \u21b2","text":"<pre><code>co2: int | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.connection_status","title":"connection_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_status: str = connectionStatus or UNKNOWN\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.device","title":"device  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device = device\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.device_status","title":"device_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_status: str = deviceStatus or UNKNOWN\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.display_forever","title":"display_forever  <code>instance-attribute</code>  \u21b2","text":"<pre><code>display_forever: bool = False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.display_set_status","title":"display_set_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>display_set_status: str | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.display_state","title":"display_state  <code>property</code>  \u21b2","text":"<pre><code>display_state: str | None\n</code></pre> <p>Return display status.</p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.display_status","title":"display_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>display_status: str | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.display_switch","title":"display_switch  <code>property</code>  \u21b2","text":"<pre><code>display_switch: str | None\n</code></pre> <p>Return display switch status.</p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.fan_level","title":"fan_level  <code>instance-attribute</code>  \u21b2","text":"<pre><code>fan_level: int | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.fan_rotate_angle","title":"fan_rotate_angle  <code>instance-attribute</code>  \u21b2","text":"<pre><code>fan_rotate_angle: int | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.fan_set_level","title":"fan_set_level  <code>instance-attribute</code>  \u21b2","text":"<pre><code>fan_set_level: int | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features = features\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.filter_life","title":"filter_life  <code>instance-attribute</code>  \u21b2","text":"<pre><code>filter_life: int | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.filter_open_state","title":"filter_open_state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>filter_open_state: bool = False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.humidity","title":"humidity  <code>instance-attribute</code>  \u21b2","text":"<pre><code>humidity: int | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.last_update_ts","title":"last_update_ts  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_update_ts: int | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.light_detection","title":"light_detection  <code>property</code>  \u21b2","text":"<pre><code>light_detection: bool\n</code></pre> <p>Return light detection status.</p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.light_detection_status","title":"light_detection_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>light_detection_status: str | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.light_detection_switch","title":"light_detection_switch  <code>instance-attribute</code>  \u21b2","text":"<pre><code>light_detection_switch: str | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.mode","title":"mode  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mode: str = UNKNOWN\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.night_light","title":"night_light  <code>property</code>  \u21b2","text":"<pre><code>night_light: str | None\n</code></pre> <p>Return night light status.</p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.nightlight_brightness","title":"nightlight_brightness  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_brightness: int | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.nightlight_status","title":"nightlight_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_status: str | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.pm1","title":"pm1  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pm1: int | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.pm10","title":"pm10  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pm10: int | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.pm25","title":"pm25  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pm25: int | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.speed","title":"speed  <code>property</code>  \u21b2","text":"<pre><code>speed: int | None\n</code></pre> <p>Return fan speed.</p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.temperature","title":"temperature  <code>instance-attribute</code>  \u21b2","text":"<pre><code>temperature: int | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.timer","title":"timer  <code>instance-attribute</code>  \u21b2","text":"<pre><code>timer: Timer | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.voc","title":"voc  <code>instance-attribute</code>  \u21b2","text":"<pre><code>voc: int | None = None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState-functions","title":"Functions\u21b2","text":""},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.as_tuple","title":"as_tuple \u21b2","text":"<pre><code>as_tuple() -&gt; tuple[tuple[str, Any], ...]\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to tuple of (name, value) tuples.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def as_tuple(self) -&gt; tuple[tuple[str, Any], ...]:\n    \"\"\"Convert state to tuple of (name, value) tuples.\"\"\"\n    return tuple((k, v) for k, v in self._serialize().items())\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.display","title":"display \u21b2","text":"<pre><code>display() -&gt; None\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Print formatted state to stdout.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self) -&gt; None:\n    \"\"\"Print formatted state to stdout.\"\"\"\n    for name, val in self._serialize().items():\n        print(f'{name:.&lt;30} {val}')  # noqa: T201\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.set_air_quality_level","title":"set_air_quality_level \u21b2","text":"<pre><code>set_air_quality_level(value: int | str | None) -&gt; None\n</code></pre> <p>Set air quality level.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>def set_air_quality_level(self, value: int | str | None) -&gt; None:\n    \"\"\"Set air quality level.\"\"\"\n    if isinstance(value, str):\n        self._air_quality_level = AirQualityLevel.from_string(value)\n    elif isinstance(value, int):\n        self._air_quality_level = AirQualityLevel.from_int(value)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to dictionary.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Convert state to dictionary.\"\"\"\n    return self._serialize()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(indent: bool = False) -&gt; str\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Dump state to JSON string.</p> <p>Parameters:</p> Name Type Description Default <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device state.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, indent: bool = False) -&gt; str:\n    \"\"\"Dump state to JSON string.\n\n    Args:\n        indent (bool): If True, indent JSON output, defaults to False.\n\n    Returns:\n        str: JSON formatted string of device state.\n    \"\"\"\n    return self.to_jsonb(indent=indent).decode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(indent: bool = False) -&gt; bytes\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to JSON bytes.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, indent: bool = False) -&gt; bytes:\n    \"\"\"Convert state to JSON bytes.\"\"\"\n    if indent:\n        return orjson.dumps(\n            self._serialize(), option=orjson.OPT_NON_STR_KEYS | orjson.OPT_INDENT_2\n        )\n    return orjson.dumps(self._serialize(), option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.PurifierState.update_ts","title":"update_ts \u21b2","text":"<pre><code>update_ts() -&gt; None\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Update last update timestamp as UTC timestamp.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def update_ts(self) -&gt; None:\n    \"\"\"Update last update timestamp as UTC timestamp.\"\"\"\n    self.last_update_ts = int(dt.now(tz=UTC).timestamp())\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass","title":"pyvesync.devices.vesyncpurifier.VeSyncAirBypass \u21b2","text":"<p>               Bases: <code>BypassV2Mixin</code>, <code>VeSyncPurifier</code></p> <p>Initialize air purifier devices.</p> <p>Instantiated by VeSync manager object. Inherits from VeSyncBaseDevice class. This is the primary class for most air purifiers, using the Bypass V2 API, except the original LV-PUR131S.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>dict</code> <p>Dictionary of device details</p> required <code>manager</code> <code>VeSync</code> <p>Instantiated VeSync object used to make API calls</p> required <code>feature_map</code> <code>PurifierMap</code> <p>Device map template</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>PurifierState</code> <p>State of the device.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <code>modes</code> <code>list[str]</code> <p>List of modes supported by the device.</p> <code>fan_levels</code> <code>list[int]</code> <p>List of fan levels supported by the device.</p> <code>nightlight_modes</code> <code>list[str]</code> <p>List of nightlight modes supported by the device.</p> <code>auto_preferences</code> <code>list[str]</code> <p>List of auto preferences supported by the device.</p> Notes <p>The <code>details</code> attribute holds device information that is updated when the <code>update()</code> method is called. An example of the <code>details</code> attribute:</p> <pre><code>    json.dumps(self.details, indent=4)\n    {\n        'filter_life': 0,\n        'mode': 'manual',\n        'level': 0,\n        'display': False,\n        'child_lock': False,\n        'night_light': 'off',\n        'air_quality': 0 # air quality level\n        'air_quality_value': 0, # PM2.5 value from device,\n        'display_forever': False\n    }\n</code></pre> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>class VeSyncAirBypass(BypassV2Mixin, VeSyncPurifier):\n    \"\"\"Initialize air purifier devices.\n\n    Instantiated by VeSync manager object. Inherits from\n    VeSyncBaseDevice class. This is the primary class for most\n    air purifiers, using the Bypass V2 API, except the original LV-PUR131S.\n\n    Parameters:\n        details (dict): Dictionary of device details\n        manager (VeSync): Instantiated VeSync object used to make API calls\n        feature_map (PurifierMap): Device map template\n\n    Attributes:\n        state (PurifierState): State of the device.\n        last_response (ResponseInfo): Last response from API call.\n        manager (VeSync): Manager object for API calls.\n        device_name (str): Name of device.\n        device_image (str): URL for device image.\n        cid (str): Device ID.\n        connection_type (str): Connection type of device.\n        device_type (str): Type of device.\n        type (str): Type of device.\n        uuid (str): UUID of device, not always present.\n        config_module (str): Configuration module of device.\n        mac_id (str): MAC ID of device.\n        current_firm_version (str): Current firmware version of device.\n        device_region (str): Region of device. (US, EU, etc.)\n        pid (str): Product ID of device, pulled by some devices on update.\n        sub_device_no (int): Sub-device number of device.\n        product_type (str): Product type of device.\n        features (dict): Features of device.\n        modes (list[str]): List of modes supported by the device.\n        fan_levels (list[int]): List of fan levels supported by the device.\n        nightlight_modes (list[str]): List of nightlight modes supported by the device.\n        auto_preferences (list[str]): List of auto preferences supported by the device.\n\n    Notes:\n        The `details` attribute holds device information that is updated when\n        the `update()` method is called. An example of the `details` attribute:\n    ```python\n        json.dumps(self.details, indent=4)\n        {\n            'filter_life': 0,\n            'mode': 'manual',\n            'level': 0,\n            'display': False,\n            'child_lock': False,\n            'night_light': 'off',\n            'air_quality': 0 # air quality level\n            'air_quality_value': 0, # PM2.5 value from device,\n            'display_forever': False\n        }\n    ```\n    \"\"\"\n\n    __slots__ = ()\n\n    def __init__(\n        self,\n        details: ResponseDeviceDetailsModel,\n        manager: VeSync,\n        feature_map: PurifierMap,\n    ) -&gt; None:\n        \"\"\"Initialize VeSync Air Purifier Bypass Base Class.\"\"\"\n        super().__init__(details, manager, feature_map)\n\n    def _set_purifier_state(self, result: PurifierCoreDetailsResult) -&gt; None:\n        \"\"\"Populate PurifierState with details from API response.\n\n        Populates `self.state` and instance variables with device details.\n\n        Args:\n            result (InnerPurifierResult): Data model for inner result in purifier\n                details response.\n        \"\"\"\n        self.state.device_status = DeviceStatus.ON if result.enabled else DeviceStatus.OFF\n        self.state.filter_life = result.filter_life or 0\n        self.state.mode = result.mode\n        self.state.fan_level = result.level or 0\n        self.state.fan_set_level = result.levelNew or 0\n        self.state.display_status = (\n            DeviceStatus.ON if result.display else DeviceStatus.OFF\n        )\n        self.state.child_lock = result.child_lock or False\n        config = result.configuration\n        if config is not None:\n            self.state.display_set_status = (\n                DeviceStatus.ON if config.display else DeviceStatus.OFF\n            )\n            self.state.display_forever = config.display_forever\n            if config.auto_preference is not None:\n                self.state.auto_preference_type = config.auto_preference.type\n                self.state.auto_room_size = config.auto_preference.room_size\n        if self.supports_air_quality is True:\n            self.state.pm25 = result.air_quality_value\n            self.state.set_air_quality_level(result.air_quality)\n        if result.night_light is not None:\n            self.state.nightlight_status = DeviceStatus(result.night_light)\n\n    async def get_details(self) -&gt; None:\n        r_dict = await self.call_bypassv2_api('getPurifierStatus')\n        resp_model = process_bypassv2_result(\n            self, _LOGGER, 'get_details', r_dict, PurifierCoreDetailsResult\n        )\n        if resp_model is None:\n            return\n        self._set_purifier_state(resp_model)\n\n    async def get_timer(self) -&gt; Timer | None:\n        r_bytes = await self.call_bypassv2_api('getTimer')\n        resp_model = process_bypassv2_result(\n            self, _LOGGER, 'get_timer', r_bytes, ResultV2GetTimer\n        )\n        if resp_model is None:\n            return None\n        timers = resp_model.timers\n        if not timers:\n            _LOGGER.debug('No timers found')\n            self.state.timer = None\n            return None\n        timer = timers[0]\n        self.state.timer = Timer(\n            timer_duration=timer.total,\n            action=timer.action,\n            id=timer.id,\n            remaining=timer.remain,\n        )\n        self.state.device_status = DeviceStatus.ON\n        self.state.connection_status = ConnectionStatus.ONLINE\n        _LOGGER.debug('Timer found: %s', str(self.state.timer))\n        return self.state.timer\n\n    async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n        action = DeviceStatus.OFF  # No other actions available for this device\n        if self.state.device_status != DeviceStatus.ON:\n            _LOGGER.debug(\"Can't set timer when device is off\")\n        payload_data = {'action': str(action), 'total': duration}\n        r_dict = await self.call_bypassv2_api('addTimer', payload_data)\n        resp_model = process_bypassv2_result(\n            self, _LOGGER, 'set_timer', r_dict, ResultV2SetTimer\n        )\n        if resp_model is None:\n            return False\n        self.state.timer = Timer(timer_duration=duration, action='off', id=resp_model.id)\n        self.state.device_status = DeviceStatus.ON\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def clear_timer(self) -&gt; bool:\n        if self.state.timer is None:\n            _LOGGER.debug('No timer to clear, run `get_timer()` to get active timer')\n            return False\n        payload_data = {'id': self.state.timer.id}\n\n        r_dict = await self.call_bypassv2_api('delTimer', payload_data)\n        r = Helpers.process_dev_response(_LOGGER, 'clear_timer', self, r_dict)\n        if r is None:\n            return False\n\n        _LOGGER.debug('Timer cleared')\n        self.state.timer = None\n        self.state.device_status = DeviceStatus.ON\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def set_auto_preference(self, preference: str, room_size: int = 800) -&gt; bool:\n        if self.state.device_status != DeviceStatus.ON:\n            _LOGGER.debug(\"Can't set auto preference when device is off\")\n        payload_data = {'type': preference, 'room_size': room_size}\n        r_dict = await self.call_bypassv2_api('setAutoPreference', payload_data)\n        r = Helpers.process_dev_response(_LOGGER, 'set_auto_preference', self, r_dict)\n        if r is None:\n            return False\n        self.state.connection_status = ConnectionStatus.ONLINE\n        self.state.auto_preference_type = preference\n        self.state.auto_room_size = room_size\n        return True\n\n    async def set_fan_speed(self, speed: None | int = None) -&gt; bool:\n        speeds: list = self.fan_levels\n        current_speed = self.state.fan_level\n\n        if speed is not None:\n            if speed not in speeds:\n                _LOGGER.debug(\n                    '%s is invalid speed - valid speeds are %s', speed, str(speeds)\n                )\n                return False\n            new_speed = speed\n        else:\n            new_speed = Helpers.bump_level(current_speed, self.fan_levels)\n\n        data = {\n            'id': 0,\n            'level': new_speed,\n            'type': 'wind',\n        }\n        r_dict = await self.call_bypassv2_api('setLevel', data)\n        r = Helpers.process_dev_response(_LOGGER, 'set_fan_speed', self, r_dict)\n        if r is None:\n            return False\n\n        self.state.fan_level = new_speed\n        self.state.fan_set_level = new_speed\n        self.state.mode = PurifierModes.MANUAL  # Set mode to manual to set fan speed\n        self.state.device_status = DeviceStatus.ON\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def toggle_child_lock(self, toggle: bool | None = None) -&gt; bool:\n        \"\"\"Toggle child lock.\n\n        Set child lock to on or off. Internal method used by `turn_on_child_lock` and\n        `turn_off_child_lock`.\n\n        Args:\n            toggle (bool): True to turn child lock on, False to turn off\n\n        Returns:\n            bool : True if child lock is set, False if not\n        \"\"\"\n        if toggle is None:\n            toggle = self.state.child_lock is False\n        data = {'child_lock': toggle}\n\n        r_dict = await self.call_bypassv2_api('setChildLock', data)\n        r = Helpers.process_dev_response(_LOGGER, 'toggle_child_lock', self, r_dict)\n        if r is None:\n            return False\n\n        self.state.child_lock = toggle\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def reset_filter(self) -&gt; bool:\n        \"\"\"Reset filter to 100%.\n\n        Returns:\n            bool : True if filter is reset, False if not\n        \"\"\"\n        r_dict = await self.call_bypassv2_api('resetFilter')\n        r = Helpers.process_dev_response(_LOGGER, 'reset_filter', self, r_dict)\n        return bool(r)\n\n    @deprecated('Use set_mode(mode: str) instead.')\n    async def mode_toggle(self, mode: str) -&gt; bool:\n        \"\"\"Deprecated - Set purifier mode.\"\"\"\n        return await self.set_mode(mode)\n\n    async def set_mode(self, mode: str) -&gt; bool:\n        if mode.lower() not in self.modes:\n            _LOGGER.debug('Invalid purifier mode used - %s', mode)\n            return False\n\n        if mode.lower() == PurifierModes.MANUAL:\n            return await self.set_fan_speed(self.state.fan_level or 1)\n\n        data = {\n            'mode': mode,\n        }\n        r_dict = await self.call_bypassv2_api('setPurifierMode', data)\n\n        r = Helpers.process_dev_response(_LOGGER, 'set_mode', self, r_dict)\n        if r is None:\n            return False\n\n        self.state.mode = mode\n        self.state.device_status = DeviceStatus.ON\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n        if toggle is None:\n            toggle = self.state.device_status != DeviceStatus.ON\n        if not isinstance(toggle, bool):\n            _LOGGER.debug('Invalid toggle value for purifier switch')\n            return False\n\n        data = {'enabled': toggle, 'id': 0}\n        r_dict = await self.call_bypassv2_api('setSwitch', data)\n        r = Helpers.process_dev_response(_LOGGER, 'toggle_switch', self, r_dict)\n        if r is None:\n            return False\n\n        self.state.device_status = DeviceStatus.ON if toggle else DeviceStatus.OFF\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def toggle_display(self, mode: bool) -&gt; bool:\n        if not isinstance(mode, bool):\n            _LOGGER.debug('Mode must be True or False')\n            return False\n\n        data = {'state': mode}\n        r_dict = await self.call_bypassv2_api('setDisplay', data)\n        r = Helpers.process_dev_response(_LOGGER, 'set_display', self, r_dict)\n        if r is None:\n            return False\n        self.state.connection_status = ConnectionStatus.ONLINE\n        self.state.display_set_status = DeviceStatus.from_bool(mode)\n        return True\n\n    async def set_nightlight_mode(self, mode: str) -&gt; bool:\n        if not self.supports_nightlight:\n            _LOGGER.debug('Device does not support night light')\n            return False\n        if mode.lower() not in self.nightlight_modes:\n            _LOGGER.warning('Invalid nightlight mode used (on, off or dim)- %s', mode)\n            return False\n\n        r_dict = await self.call_bypassv2_api(\n            'setNightLight', {'night_light': mode.lower()}\n        )\n        r = Helpers.process_dev_response(_LOGGER, 'set_night_light', self, r_dict)\n        if r is None:\n            return False\n        self.state.connection_status = ConnectionStatus.ONLINE\n        self.state.nightlight_status = NightlightModes(mode.lower())\n        return True\n\n    @property\n    @deprecated('Use self.state.air_quality instead.')\n    def air_quality(self) -&gt; int | None:\n        \"\"\"Get air quality value PM2.5 (ug/m3).\"\"\"\n        return self.state.pm25\n\n    @property\n    @deprecated('Use self.state.fan_level instead.')\n    def fan_level(self) -&gt; int | None:\n        \"\"\"Get current fan level.\"\"\"\n        return self.state.fan_level\n\n    @property\n    @deprecated('Use self.state.filter_life instead.')\n    def filter_life(self) -&gt; int | None:\n        \"\"\"Get percentage of filter life remaining.\"\"\"\n        return self.state.filter_life\n\n    @property\n    @deprecated('Use self.state.display_status instead.')\n    def display_state(self) -&gt; bool:\n        \"\"\"Get display state.\n\n        See [pyvesync.VeSyncAirBypass.display_status][`self.display_status`]\n        \"\"\"\n        return self.state.display_status == DeviceStatus.ON\n\n    @property\n    @deprecated('Use self.state.display_status instead.')\n    def screen_status(self) -&gt; bool:\n        \"\"\"Get display status.\n\n        Returns:\n            bool : True if display is on, False if off\n        \"\"\"\n        return self.state.display_status == DeviceStatus.ON\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.air_quality","title":"air_quality  <code>property</code>  \u21b2","text":"<pre><code>air_quality: int | None\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Get air quality value PM2.5 (ug/m3).</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.auto_preferences","title":"auto_preferences  <code>instance-attribute</code>  \u21b2","text":"<pre><code>auto_preferences: list[str] = auto_preferences\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.child_lock","title":"child_lock  <code>property</code>  \u21b2","text":"<pre><code>child_lock: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Get child lock state.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if child lock is enabled, False if not.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.display_state","title":"display_state  <code>property</code>  \u21b2","text":"<pre><code>display_state: bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Get display state.</p> <p>See [pyvesync.VeSyncAirBypass.display_status][<code>self.display_status</code>]</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.fan_level","title":"fan_level  <code>property</code>  \u21b2","text":"<pre><code>fan_level: int | None\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Get current fan level.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.fan_levels","title":"fan_levels  <code>instance-attribute</code>  \u21b2","text":"<pre><code>fan_levels: list[int] = fan_levels\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.filter_life","title":"filter_life  <code>property</code>  \u21b2","text":"<pre><code>filter_life: int | None\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Get percentage of filter life remaining.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.modes","title":"modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>modes: list[str] = modes\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.night_light","title":"night_light  <code>property</code>  \u21b2","text":"<pre><code>night_light: str | None\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Get night light state.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str | None</code> <p>Night light state (on, dim, off)</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.nightlight_modes","title":"nightlight_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_modes: list[str] = nightlight_modes\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.screen_status","title":"screen_status  <code>property</code>  \u21b2","text":"<pre><code>screen_status: bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Get display status.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if display is on, False if off</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: PurifierState = PurifierState(\n    self, details, feature_map\n)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.supports_air_quality","title":"supports_air_quality  <code>property</code>  \u21b2","text":"<pre><code>supports_air_quality: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Return True if device supports air quality.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.supports_fan_rotate","title":"supports_fan_rotate  <code>property</code>  \u21b2","text":"<pre><code>supports_fan_rotate: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Return True if device supports fan rotation.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.supports_light_detection","title":"supports_light_detection  <code>property</code>  \u21b2","text":"<pre><code>supports_light_detection: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Returns True if device supports light detection.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.supports_nightlight","title":"supports_nightlight  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Return True if device supports nightlight.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass-functions","title":"Functions\u21b2","text":""},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.auto_mode","title":"auto_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>auto_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_auto_mode instead.</p> <p>Set Purifier to Auto Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_auto_mode instead.')\nasync def auto_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Auto Mode.\"\"\"\n    return await self.set_auto_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.call_bypassv2_api","title":"call_bypassv2_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv2_api(\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p> <p>Send Bypass V2 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V2 API.</p> <p>Parameters:</p> Name Type Description Default <code>payload_method</code> <code>str</code> <p>The method to use in the payload dict.</p> required <code>data</code> <code>dict | None</code> <p>The data to send in the request.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypassV2'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the API url, defaults to <code>bypassV2</code>, e.g. <code>/cloud/v2/deviceManaged/bypassV2</code>.</p> <code>'bypassV2'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv2_api(\n    self,\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None:\n    \"\"\"Send Bypass V2 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V2 API.\n\n    Args:\n        payload_method (str): The method to use in the payload dict.\n        data (dict | None): The data to send in the request.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the API url, defaults to\n            `bypassV2`, e.g. `/cloud/v2/deviceManaged/bypassV2`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(payload_method, data, method)\n    endpoint = BYPASS_V2_BASE + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        endpoint, 'post', request, Helpers.req_header_bypass()\n    )\n    return resp_dict\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.change_fan_speed","title":"change_fan_speed  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>change_fan_speed(speed: int | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>set_fan_speed()</code> instead.</p> <p>Deprecated - Set fan speed.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `set_fan_speed()` instead.')\nasync def change_fan_speed(self, speed: int | None = None) -&gt; bool:\n    \"\"\"Deprecated - Set fan speed.\"\"\"\n    return await self.set_fan_speed(speed)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.change_mode","title":"change_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>change_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>set_mode(mode: str)</code> instead.</p> <p>Deprecated - Set purifier mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `set_mode(mode: str)` instead.')\nasync def change_mode(self, mode: str) -&gt; bool:\n    \"\"\"Deprecated - Set purifier mode.\"\"\"\n    return await self.set_mode(mode)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.child_lock_off","title":"child_lock_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>child_lock_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>turn_off_child_lock()</code> instead.</p> <p>Turn off child lock (display lock).</p> <p>This has been deprecated, use <code>turn_off_child_lock()</code> instead.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `turn_off_child_lock()` instead.')\nasync def child_lock_off(self) -&gt; bool:\n    \"\"\"Turn off child lock (display lock).\n\n    This has been deprecated, use `turn_off_child_lock()` instead.\n    \"\"\"\n    return await self.toggle_child_lock(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.child_lock_on","title":"child_lock_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>child_lock_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>turn_on_child_lock()</code> instead.</p> <p>Turn on child lock (display lock).</p> <p>This has been deprecated, use <code>turn_on_child_lock()</code> instead.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `turn_on_child_lock()` instead.')\nasync def child_lock_on(self) -&gt; bool:\n    \"\"\"Turn on child lock (display lock).\n\n    This has been deprecated, use `turn_on_child_lock()` instead.\n    \"\"\"\n    return await self.toggle_child_lock(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    if self.state.timer is None:\n        _LOGGER.debug('No timer to clear, run `get_timer()` to get active timer')\n        return False\n    payload_data = {'id': self.state.timer.id}\n\n    r_dict = await self.call_bypassv2_api('delTimer', payload_data)\n    r = Helpers.process_dev_response(_LOGGER, 'clear_timer', self, r_dict)\n    if r is None:\n        return False\n\n    _LOGGER.debug('Timer cleared')\n    self.state.timer = None\n    self.state.device_status = DeviceStatus.ON\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def get_details(self) -&gt; None:\n    r_dict = await self.call_bypassv2_api('getPurifierStatus')\n    resp_model = process_bypassv2_result(\n        self, _LOGGER, 'get_details', r_dict, PurifierCoreDetailsResult\n    )\n    if resp_model is None:\n        return\n    self._set_purifier_state(resp_model)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    r_bytes = await self.call_bypassv2_api('getTimer')\n    resp_model = process_bypassv2_result(\n        self, _LOGGER, 'get_timer', r_bytes, ResultV2GetTimer\n    )\n    if resp_model is None:\n        return None\n    timers = resp_model.timers\n    if not timers:\n        _LOGGER.debug('No timers found')\n        self.state.timer = None\n        return None\n    timer = timers[0]\n    self.state.timer = Timer(\n        timer_duration=timer.total,\n        action=timer.action,\n        id=timer.id,\n        remaining=timer.remain,\n    )\n    self.state.device_status = DeviceStatus.ON\n    self.state.connection_status = ConnectionStatus.ONLINE\n    _LOGGER.debug('Timer found: %s', str(self.state.timer))\n    return self.state.timer\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.manual_mode","title":"manual_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_manual_mode instead.</p> <p>Set Purifier to Manual Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_manual_mode instead.')\nasync def manual_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Manual Mode.\"\"\"\n    return await self.set_manual_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.mode_toggle","title":"mode_toggle  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>mode_toggle(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> Deprecated <p>Use set_mode(mode: str) instead.</p> <p>Deprecated - Set purifier mode.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>@deprecated('Use set_mode(mode: str) instead.')\nasync def mode_toggle(self, mode: str) -&gt; bool:\n    \"\"\"Deprecated - Set purifier mode.\"\"\"\n    return await self.set_mode(mode)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.nightlight_mode","title":"nightlight_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>nightlight_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_nightlight_mode instead.</p> <p>Set Nightlight Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_nightlight_mode instead.')\nasync def nightlight_mode(self, mode: str) -&gt; bool:\n    \"\"\"Set Nightlight Mode.\"\"\"\n    return await self.set_nightlight_mode(mode)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.pet_mode","title":"pet_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>pet_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_pet_mode instead.</p> <p>Set Purifier to Pet Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_pet_mode instead.')\nasync def pet_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Pet Mode.\"\"\"\n    return await self.set_pet_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.reset_filter","title":"reset_filter  <code>async</code>  \u21b2","text":"<pre><code>reset_filter() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Reset filter life.</p> <p>Reset filter to 100%.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if filter is reset, False if not</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def reset_filter(self) -&gt; bool:\n    \"\"\"Reset filter to 100%.\n\n    Returns:\n        bool : True if filter is reset, False if not\n    \"\"\"\n    r_dict = await self.call_bypassv2_api('resetFilter')\n    r = Helpers.process_dev_response(_LOGGER, 'reset_filter', self, r_dict)\n    return bool(r)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.set_auto_mode","title":"set_auto_mode  <code>async</code>  \u21b2","text":"<pre><code>set_auto_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Auto Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_auto_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Auto Mode.\"\"\"\n    if PurifierModes.AUTO in self.modes:\n        return await self.set_mode(PurifierModes.AUTO)\n    logger.error('Auto mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.set_auto_preference","title":"set_auto_preference  <code>async</code>  \u21b2","text":"<pre><code>set_auto_preference(\n    preference: str, room_size: int = 800\n) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set auto preference.</p> <p>Parameters:</p> Name Type Description Default <code>preference</code> <code>str</code> <p>Auto preference to set, available preference is found in <code>self.auto_preferences</code>.</p> required <code>room_size</code> <code>int</code> <p>Room size to set, defaults to 800ft2.</p> <code>800</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def set_auto_preference(self, preference: str, room_size: int = 800) -&gt; bool:\n    if self.state.device_status != DeviceStatus.ON:\n        _LOGGER.debug(\"Can't set auto preference when device is off\")\n    payload_data = {'type': preference, 'room_size': room_size}\n    r_dict = await self.call_bypassv2_api('setAutoPreference', payload_data)\n    r = Helpers.process_dev_response(_LOGGER, 'set_auto_preference', self, r_dict)\n    if r is None:\n        return False\n    self.state.connection_status = ConnectionStatus.ONLINE\n    self.state.auto_preference_type = preference\n    self.state.auto_room_size = room_size\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.set_child_lock","title":"set_child_lock  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_child_lock(toggle: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>toggle_child_lock()</code> instead.</p> <p>Set child lock (display lock).</p> <p>This has been deprecated in favor of <code>toggle_child_lock()</code>.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `toggle_child_lock()` instead.')\nasync def set_child_lock(self, toggle: bool) -&gt; bool:\n    \"\"\"Set child lock (display lock).\n\n    This has been deprecated in favor of `toggle_child_lock()`.\n    \"\"\"\n    return await self.toggle_child_lock(toggle)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.set_fan_speed","title":"set_fan_speed  <code>async</code>  \u21b2","text":"<pre><code>set_fan_speed(speed: None | int = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier Fan Speed.</p> <p>Parameters:</p> Name Type Description Default <code>speed</code> <code>int | None</code> <p>Fan speed to set. If None, use default speed.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def set_fan_speed(self, speed: None | int = None) -&gt; bool:\n    speeds: list = self.fan_levels\n    current_speed = self.state.fan_level\n\n    if speed is not None:\n        if speed not in speeds:\n            _LOGGER.debug(\n                '%s is invalid speed - valid speeds are %s', speed, str(speeds)\n            )\n            return False\n        new_speed = speed\n    else:\n        new_speed = Helpers.bump_level(current_speed, self.fan_levels)\n\n    data = {\n        'id': 0,\n        'level': new_speed,\n        'type': 'wind',\n    }\n    r_dict = await self.call_bypassv2_api('setLevel', data)\n    r = Helpers.process_dev_response(_LOGGER, 'set_fan_speed', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.fan_level = new_speed\n    self.state.fan_set_level = new_speed\n    self.state.mode = PurifierModes.MANUAL  # Set mode to manual to set fan speed\n    self.state.device_status = DeviceStatus.ON\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.set_light_detection_off","title":"set_light_detection_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_light_detection_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use turn_off_light_detection() instead.</p> <p>Turn off light detection feature.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use turn_off_light_detection() instead.')\nasync def set_light_detection_off(self) -&gt; bool:\n    \"\"\"Turn off light detection feature.\"\"\"\n    return await self.toggle_light_detection(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.set_light_detection_on","title":"set_light_detection_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_light_detection_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use turn_on_light_detection() instead.</p> <p>Turn on light detection feature.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use turn_on_light_detection() instead.')\nasync def set_light_detection_on(self) -&gt; bool:\n    \"\"\"Turn on light detection feature.\"\"\"\n    return await self.toggle_light_detection(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.set_manual_mode","title":"set_manual_mode  <code>async</code>  \u21b2","text":"<pre><code>set_manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Manual Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_manual_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Manual Mode.\"\"\"\n    if PurifierModes.MANUAL in self.modes:\n        return await self.set_mode(PurifierModes.MANUAL)\n    logger.error('Manual mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.set_mode","title":"set_mode  <code>async</code>  \u21b2","text":"<pre><code>set_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier Mode.</p> <p>Allowed modes are found in the <code>device.modes</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def set_mode(self, mode: str) -&gt; bool:\n    if mode.lower() not in self.modes:\n        _LOGGER.debug('Invalid purifier mode used - %s', mode)\n        return False\n\n    if mode.lower() == PurifierModes.MANUAL:\n        return await self.set_fan_speed(self.state.fan_level or 1)\n\n    data = {\n        'mode': mode,\n    }\n    r_dict = await self.call_bypassv2_api('setPurifierMode', data)\n\n    r = Helpers.process_dev_response(_LOGGER, 'set_mode', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.mode = mode\n    self.state.device_status = DeviceStatus.ON\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.set_nightlight_dim","title":"set_nightlight_dim  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_dim() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Nightlight Dim.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_nightlight_dim(self) -&gt; bool:\n    \"\"\"Set Nightlight Dim.\"\"\"\n    return await self.set_nightlight_mode(NightlightModes.DIM)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.set_nightlight_mode","title":"set_nightlight_mode  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Nightlight Mode.</p> <p>Modes are defined in the <code>device.nightlight_modes</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Nightlight mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def set_nightlight_mode(self, mode: str) -&gt; bool:\n    if not self.supports_nightlight:\n        _LOGGER.debug('Device does not support night light')\n        return False\n    if mode.lower() not in self.nightlight_modes:\n        _LOGGER.warning('Invalid nightlight mode used (on, off or dim)- %s', mode)\n        return False\n\n    r_dict = await self.call_bypassv2_api(\n        'setNightLight', {'night_light': mode.lower()}\n    )\n    r = Helpers.process_dev_response(_LOGGER, 'set_night_light', self, r_dict)\n    if r is None:\n        return False\n    self.state.connection_status = ConnectionStatus.ONLINE\n    self.state.nightlight_status = NightlightModes(mode.lower())\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.set_pet_mode","title":"set_pet_mode  <code>async</code>  \u21b2","text":"<pre><code>set_pet_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Pet Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_pet_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Pet Mode.\"\"\"\n    if PurifierModes.PET in self.modes:\n        return await self.set_mode(PurifierModes.PET)\n    logger.error('Pet mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.set_sleep_mode","title":"set_sleep_mode  <code>async</code>  \u21b2","text":"<pre><code>set_sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Sleep Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_sleep_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Sleep Mode.\"\"\"\n    if PurifierModes.SLEEP in self.modes:\n        return await self.set_mode(PurifierModes.SLEEP)\n    logger.error('Sleep mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    action = DeviceStatus.OFF  # No other actions available for this device\n    if self.state.device_status != DeviceStatus.ON:\n        _LOGGER.debug(\"Can't set timer when device is off\")\n    payload_data = {'action': str(action), 'total': duration}\n    r_dict = await self.call_bypassv2_api('addTimer', payload_data)\n    resp_model = process_bypassv2_result(\n        self, _LOGGER, 'set_timer', r_dict, ResultV2SetTimer\n    )\n    if resp_model is None:\n        return False\n    self.state.timer = Timer(timer_duration=duration, action='off', id=resp_model.id)\n    self.state.device_status = DeviceStatus.ON\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.set_turbo_mode","title":"set_turbo_mode  <code>async</code>  \u21b2","text":"<pre><code>set_turbo_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Turbo Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_turbo_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Turbo Mode.\"\"\"\n    if PurifierModes.TURBO in self.modes:\n        return await self.set_mode(PurifierModes.TURBO)\n    logger.error('Turbo mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.sleep_mode","title":"sleep_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_sleep_mode instead.</p> <p>Set Purifier to Sleep Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_sleep_mode instead.')\nasync def sleep_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Sleep Mode.\"\"\"\n    return await self.set_sleep_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.toggle_child_lock","title":"toggle_child_lock  <code>async</code>  \u21b2","text":"<pre><code>toggle_child_lock(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Toggle Child Lock (Display Lock).</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>Toggle child lock. If None, toggle state.</p> <code>None</code> <p>Toggle child lock.</p> <p>Set child lock to on or off. Internal method used by <code>turn_on_child_lock</code> and <code>turn_off_child_lock</code>.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>True to turn child lock on, False to turn off</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if child lock is set, False if not</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def toggle_child_lock(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Toggle child lock.\n\n    Set child lock to on or off. Internal method used by `turn_on_child_lock` and\n    `turn_off_child_lock`.\n\n    Args:\n        toggle (bool): True to turn child lock on, False to turn off\n\n    Returns:\n        bool : True if child lock is set, False if not\n    \"\"\"\n    if toggle is None:\n        toggle = self.state.child_lock is False\n    data = {'child_lock': toggle}\n\n    r_dict = await self.call_bypassv2_api('setChildLock', data)\n    r = Helpers.process_dev_response(_LOGGER, 'toggle_child_lock', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.child_lock = toggle\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.toggle_display","title":"toggle_display  <code>async</code>  \u21b2","text":"<pre><code>toggle_display(mode: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Display Mode.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def toggle_display(self, mode: bool) -&gt; bool:\n    if not isinstance(mode, bool):\n        _LOGGER.debug('Mode must be True or False')\n        return False\n\n    data = {'state': mode}\n    r_dict = await self.call_bypassv2_api('setDisplay', data)\n    r = Helpers.process_dev_response(_LOGGER, 'set_display', self, r_dict)\n    if r is None:\n        return False\n    self.state.connection_status = ConnectionStatus.ONLINE\n    self.state.display_set_status = DeviceStatus.from_bool(mode)\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.toggle_light_detection","title":"toggle_light_detection  <code>async</code>  \u21b2","text":"<pre><code>toggle_light_detection(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Light Detection Mode.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>Toggle light detection. If None, toggle state.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def toggle_light_detection(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Set Light Detection Mode.\n\n    Args:\n        toggle (bool | None): Toggle light detection. If None, toggle state.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del toggle\n    if not self.supports_light_detection:\n        logger.debug('Light detection not supported for this device.')\n    else:\n        logger.debug('Light detection not configured for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.device_status != DeviceStatus.ON\n    if not isinstance(toggle, bool):\n        _LOGGER.debug('Invalid toggle value for purifier switch')\n        return False\n\n    data = {'enabled': toggle, 'id': 0}\n    r_dict = await self.call_bypassv2_api('setSwitch', data)\n    r = Helpers.process_dev_response(_LOGGER, 'toggle_switch', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.device_status = DeviceStatus.ON if toggle else DeviceStatus.OFF\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.turbo_mode","title":"turbo_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>turbo_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_turbo_mode instead.</p> <p>Set Purifier to Turbo Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_turbo_mode instead.')\nasync def turbo_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Turbo Mode.\"\"\"\n    return await self.set_turbo_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.turn_off_child_lock","title":"turn_off_child_lock  <code>async</code>  \u21b2","text":"<pre><code>turn_off_child_lock() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set child lock (display lock) to OFF.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_child_lock(self) -&gt; bool:\n    \"\"\"Set child lock (display lock) to OFF.\"\"\"\n    return await self.toggle_child_lock(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.turn_off_display","title":"turn_off_display  <code>async</code>  \u21b2","text":"<pre><code>turn_off_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn off Display.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_display(self) -&gt; bool:\n    \"\"\"Turn off Display.\"\"\"\n    return await self.toggle_display(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.turn_off_light_detection","title":"turn_off_light_detection  <code>async</code>  \u21b2","text":"<pre><code>turn_off_light_detection() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn off Light Detection.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_light_detection(self) -&gt; bool:\n    \"\"\"Turn off Light Detection.\"\"\"\n    return await self.toggle_light_detection(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.turn_off_nightlight","title":"turn_off_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_off_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn off Nightlight.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_nightlight(self) -&gt; bool:\n    \"\"\"Turn off Nightlight.\"\"\"\n    return await self.set_nightlight_mode(NightlightModes.OFF)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.turn_on_child_lock","title":"turn_on_child_lock  <code>async</code>  \u21b2","text":"<pre><code>turn_on_child_lock() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set child lock (display lock) to ON.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_child_lock(self) -&gt; bool:\n    \"\"\"Set child lock (display lock) to ON.\"\"\"\n    return await self.toggle_child_lock(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.turn_on_display","title":"turn_on_display  <code>async</code>  \u21b2","text":"<pre><code>turn_on_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn on Display.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_display(self) -&gt; bool:\n    \"\"\"Turn on Display.\"\"\"\n    return await self.toggle_display(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.turn_on_light_detection","title":"turn_on_light_detection  <code>async</code>  \u21b2","text":"<pre><code>turn_on_light_detection() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn on Light Detection.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_light_detection(self) -&gt; bool:\n    \"\"\"Turn on Light Detection.\"\"\"\n    return await self.toggle_light_detection(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.turn_on_nightlight","title":"turn_on_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_on_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn on Nightlight.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_nightlight(self) -&gt; bool:\n    \"\"\"Turn on Nightlight.\"\"\"\n    return await self.set_nightlight_mode(NightlightModes.ON)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBypass.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2","title":"pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2 \u21b2","text":"<p>               Bases: <code>VeSyncAirBypass</code></p> <p>Levoit V2 Air Purifier Class.</p> <p>Handles the Vital 100S/200S and Sprout Air Purifiers. The Sprout purifier has a separate class VeSyncAirSprout that overrides the <code>_set_state</code> method. Inherits from VeSyncAirBypass and VeSyncBaseDevice class. For newer devices that use camel-case API calls.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>dict</code> <p>Dictionary of device details</p> required <code>manager</code> <code>VeSync</code> <p>Instantiated VeSync object</p> required <code>feature_map</code> <code>PurifierMap</code> <p>Device map template</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>PurifierState</code> <p>State of the device.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <code>modes</code> <code>list[str]</code> <p>List of modes supported by the device.</p> <code>fan_levels</code> <code>list[int]</code> <p>List of fan levels supported by the device.</p> <code>nightlight_modes</code> <code>list[str]</code> <p>List of nightlight modes supported by the device.</p> <code>auto_preferences</code> <code>list[str]</code> <p>List of auto preferences supported by the device.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>class VeSyncAirBaseV2(VeSyncAirBypass):\n    \"\"\"Levoit V2 Air Purifier Class.\n\n    Handles the Vital 100S/200S and Sprout Air Purifiers. The\n    Sprout purifier has a separate class\n    [VeSyncAirSprout][pyvesync.devices.vesyncpurifier.VeSyncAirSprout]\n    that overrides the `_set_state` method. Inherits from VeSyncAirBypass\n    and VeSyncBaseDevice class. For newer devices that use camel-case API calls.\n\n    Args:\n        details (dict): Dictionary of device details\n        manager (VeSync): Instantiated VeSync object\n        feature_map (PurifierMap): Device map template\n\n    Attributes:\n        state (PurifierState): State of the device.\n        last_response (ResponseInfo): Last response from API call.\n        manager (VeSync): Manager object for API calls.\n        device_name (str): Name of device.\n        device_image (str): URL for device image.\n        cid (str): Device ID.\n        connection_type (str): Connection type of device.\n        device_type (str): Type of device.\n        type (str): Type of device.\n        uuid (str): UUID of device, not always present.\n        config_module (str): Configuration module of device.\n        mac_id (str): MAC ID of device.\n        current_firm_version (str): Current firmware version of device.\n        device_region (str): Region of device. (US, EU, etc.)\n        pid (str): Product ID of device, pulled by some devices on update.\n        sub_device_no (int): Sub-device number of device.\n        product_type (str): Product type of device.\n        features (dict): Features of device.\n        modes (list[str]): List of modes supported by the device.\n        fan_levels (list[int]): List of fan levels supported by the device.\n        nightlight_modes (list[str]): List of nightlight modes supported by the device.\n        auto_preferences (list[str]): List of auto preferences supported by the device.\n    \"\"\"\n\n    __slots__ = ()\n\n    def __init__(\n        self,\n        details: ResponseDeviceDetailsModel,\n        manager: VeSync,\n        feature_map: PurifierMap,\n    ) -&gt; None:\n        \"\"\"Initialize the VeSync Base API V2 Air Purifier Class.\"\"\"\n        super().__init__(details, manager, feature_map)\n\n    def _set_state(self, details: InnerPurifierBaseResult) -&gt; None:\n        \"\"\"Set Purifier state from details response.\"\"\"\n        if not isinstance(details, PurifierVitalDetailsResult):\n            _LOGGER.debug('Invalid details model passed to _set_state')\n            return\n        self.state.connection_status = ConnectionStatus.ONLINE\n        self.state.device_status = DeviceStatus.from_int(details.powerSwitch)\n        self.state.mode = details.workMode\n        self.state.filter_life = details.filterLifePercent\n        if details.fanSpeedLevel == 255:  # noqa: PLR2004\n            self.state.fan_level = 0\n        else:\n            self.state.fan_level = details.fanSpeedLevel\n        self.state.fan_set_level = details.manualSpeedLevel\n        self.state.child_lock = bool(details.childLockSwitch)\n        self.state.air_quality_level = details.AQLevel\n        self.state.pm25 = details.PM25\n        self.state.light_detection_switch = DeviceStatus.from_int(\n            details.lightDetectionSwitch\n        )\n        self.state.light_detection_status = DeviceStatus.from_int(\n            details.environmentLightState\n        )\n        self.state.display_set_status = DeviceStatus.from_int(details.screenSwitch)\n        self.state.display_status = DeviceStatus.from_int(details.screenState)\n        auto_pref = details.autoPreference\n        if auto_pref is not None:\n            self.state.auto_preference_type = auto_pref.autoPreferenceType\n            self.state.auto_room_size = auto_pref.roomSize\n\n        self.state.pm1 = details.PM1\n        self.state.pm10 = details.PM10\n        self.state.aq_percent = details.AQPercent\n        self.state.fan_rotate_angle = details.fanRotateAngle\n        if details.filterOpenState is not None:\n            self.state.filter_open_state = bool(details.filterOpenState)\n        if details.timerRemain &gt; 0:\n            self.state.timer = Timer(details.timerRemain, 'off')\n\n    @property\n    @deprecated('Use self.state.fan_set_level instead.')\n    def set_speed_level(self) -&gt; int | None:\n        \"\"\"Get set speed level.\"\"\"\n        return self.state.fan_set_level\n\n    @property\n    @deprecated(\"Use self.state.light_detection_switch, this returns 'on' or 'off\")\n    def light_detection(self) -&gt; bool:\n        \"\"\"Return true if light detection feature is enabled.\"\"\"\n        return self.state.light_detection_switch == DeviceStatus.ON\n\n    @property\n    @deprecated(\"Use self.state.light_detection_status, this returns 'on' or 'off'\")\n    def light_detection_state(self) -&gt; bool:\n        \"\"\"Return true if light is detected.\"\"\"\n        return self.state.light_detection_status == DeviceStatus.ON\n\n    async def get_details(self) -&gt; None:\n        \"\"\"Build API V2 Purifier details dictionary.\"\"\"\n        r_dict = await self.call_bypassv2_api('getPurifierStatus')\n        r_model = process_bypassv2_result(\n            self, _LOGGER, 'get_details', r_dict, PurifierVitalDetailsResult\n        )\n        if r_model is None:\n            return\n\n        self._set_state(r_model)\n\n    @deprecated('Use toggle_light_detection(toggle) instead.')\n    async def set_light_detection(self, toggle: bool) -&gt; bool:\n        \"\"\"Set light detection feature.\"\"\"\n        return await self.toggle_light_detection(toggle)\n\n    async def toggle_light_detection(self, toggle: bool | None = None) -&gt; bool:\n        \"\"\"Enable/Disable Light Detection Feature.\"\"\"\n        if bool(self.state.light_detection_status) == toggle:\n            _LOGGER.debug(\n                'Light detection is already %s', self.state.light_detection_status\n            )\n            return True\n\n        if toggle is None:\n            toggle = not bool(self.state.light_detection_status)\n        payload_data = {'lightDetectionSwitch': int(toggle)}\n        r_dict = await self.call_bypassv2_api('setLightDetection', payload_data)\n        r = Helpers.process_dev_response(_LOGGER, 'set_light_detection', self, r_dict)\n        if r is None:\n            return False\n\n        self.state.light_detection_switch = DeviceStatus.from_bool(toggle)\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n        if toggle is None:\n            toggle = not bool(self.state.device_status)\n        if not isinstance(toggle, bool):\n            _LOGGER.debug('Invalid toggle value for purifier switch')\n            return False\n        if toggle == bool(self.state.device_status):\n            _LOGGER.debug('Purifier is already %s', self.state.device_status)\n            return True\n\n        payload_data = {'powerSwitch': int(toggle), 'switchIdx': 0}\n        r_dict = await self.call_bypassv2_api('setSwitch', payload_data)\n        r = Helpers.process_dev_response(_LOGGER, 'toggle_switch', self, r_dict)\n        if r is None:\n            return False\n\n        self.state.device_status = DeviceStatus.from_bool(toggle)\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def toggle_child_lock(self, toggle: bool | None = None) -&gt; bool:\n        \"\"\"Levoit 100S/200S set Child Lock.\n\n        Parameters:\n            toggle (bool): True to turn child lock on, False to turn off\n\n        Returns:\n            bool : True if successful, False if not\n        \"\"\"\n        if toggle is None:\n            toggle = not bool(self.state.child_lock)\n        payload_data = {'childLockSwitch': int(toggle)}\n        r_dict = await self.call_bypassv2_api('setChildLock', payload_data)\n\n        r = Helpers.process_dev_response(_LOGGER, 'toggle_child_lock', self, r_dict)\n        if r is None:\n            return False\n\n        self.state.child_lock = toggle\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def toggle_display(self, mode: bool) -&gt; bool:\n        if bool(self.state.light_detection_status):\n            _LOGGER.error('Cannot set display when light detection is enabled')\n            return False\n\n        if bool(self.state.display_set_status) == mode:\n            _LOGGER.debug('Display is already %s', mode)\n            return True\n\n        payload_data = {'screenSwitch': int(mode)}\n        r_dict = await self.call_bypassv2_api('setDisplay', payload_data)\n\n        r = Helpers.process_dev_response(_LOGGER, 'set_display', self, r_dict)\n        if r is None:\n            return False\n\n        self.state.display_set_status = DeviceStatus.from_bool(mode)\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n        action = DeviceStatus.OFF  # No other actions available for this device\n        if action not in [DeviceStatus.ON, DeviceStatus.OFF]:\n            _LOGGER.debug('Invalid action for timer')\n            return False\n\n        method = 'powerSwitch'\n        action_int = 1 if action == DeviceStatus.ON else 0\n        action_item = PurifierV2TimerActionItems(type=method, act=action_int)\n        timing = PurifierV2EventTiming(clkSec=duration)\n        payload_data = PurifierV2TimerPayloadData(\n            enabled=True,\n            startAct=[action_item],\n            tmgEvt=timing,\n        )\n\n        r_dict = await self.call_bypassv2_api('addTimerV2', payload_data.to_dict())\n        r = Helpers.process_dev_response(_LOGGER, 'set_timer', self, r_dict)\n        if r is None:\n            return False\n\n        r_model = ResultV2SetTimer.from_dict(r)\n\n        self.state.timer = Timer(duration, action=action, id=r_model.id)\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def clear_timer(self) -&gt; bool:\n        if self.state.timer is None:\n            _LOGGER.warning('No timer found, run get_timer() to retrieve timer.')\n            return False\n\n        payload_data = {'id': self.state.timer.id, 'subDeviceNo': 0}\n        r_dict = await self.call_bypassv2_api('delTimerV2', payload_data)\n        r = Helpers.process_dev_response(_LOGGER, 'clear_timer', self, r_dict)\n        if r is None:\n            return False\n\n        self.state.timer = None\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def set_auto_preference(\n        self, preference: str = PurifierAutoPreference.DEFAULT, room_size: int = 600\n    ) -&gt; bool:\n        \"\"\"Set Levoit Vital 100S/200S auto mode.\n\n        Parameters:\n            preference (str | None | PurifierAutoPreference):\n                Preference for auto mode, default 'default' (default, efficient, quiet)\n            room_size (int | None):\n                Room size in square feet, by default 600\n        \"\"\"\n        if preference not in self.auto_preferences:\n            _LOGGER.debug(\n                '%s is invalid preference -'\n                ' valid preferences are default, efficient, quiet',\n                preference,\n            )\n            return False\n        payload_data = {'autoPreference': preference, 'roomSize': room_size}\n        r_dict = await self.call_bypassv2_api('setAutoPreference', payload_data)\n        r = Helpers.process_dev_response(_LOGGER, 'set_auto_preference', self, r_dict)\n        if r is None:\n            return False\n\n        self.state.auto_preference_type = preference\n        self.state.auto_room_size = room_size\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def set_fan_speed(self, speed: None | int = None) -&gt; bool:\n        if speed is not None:\n            if speed not in self.fan_levels:\n                _LOGGER.debug(\n                    '%s is invalid speed - valid speeds are %s',\n                    speed,\n                    str(self.fan_levels),\n                )\n                return False\n            new_speed = speed\n        elif self.state.fan_level is None:\n            new_speed = self.fan_levels[0]\n        else:\n            new_speed = Helpers.bump_level(self.state.fan_level, self.fan_levels)\n\n        payload_data = {'levelIdx': 0, 'manualSpeedLevel': new_speed, 'levelType': 'wind'}\n        r_dict = await self.call_bypassv2_api('setLevel', payload_data)\n        r = Helpers.process_dev_response(_LOGGER, 'set_fan_speed', self, r_dict)\n        if r is None:\n            return False\n\n        self.state.fan_set_level = new_speed\n        self.state.fan_level = new_speed\n        self.state.mode = PurifierModes.MANUAL\n        self.state.device_status = DeviceStatus.ON\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def set_mode(self, mode: str) -&gt; bool:\n        if mode.lower() not in self.modes:\n            _LOGGER.debug('Invalid purifier mode used - %s', mode)\n            return False\n\n        # Call change_fan_speed if mode is set to manual\n        if mode == PurifierModes.MANUAL:\n            if self.state.fan_set_level is None or self.state.fan_level == 0:\n                return await self.set_fan_speed(1)\n            return await self.set_fan_speed(self.state.fan_set_level)\n\n        payload_data = {'workMode': mode}\n        r_dict = await self.call_bypassv2_api('setPurifierMode', payload_data)\n        r = Helpers.process_dev_response(_LOGGER, 'mode_toggle', self, r_dict)\n        if r is None:\n            return False\n\n        self.state.mode = mode\n        self.state.connection_status = ConnectionStatus.ONLINE\n        self.state.device_status = DeviceStatus.ON\n        return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.air_quality","title":"air_quality  <code>property</code>  \u21b2","text":"<pre><code>air_quality: int | None\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Get air quality value PM2.5 (ug/m3).</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.auto_preferences","title":"auto_preferences  <code>instance-attribute</code>  \u21b2","text":"<pre><code>auto_preferences: list[str] = auto_preferences\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.child_lock","title":"child_lock  <code>property</code>  \u21b2","text":"<pre><code>child_lock: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Get child lock state.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if child lock is enabled, False if not.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.display_state","title":"display_state  <code>property</code>  \u21b2","text":"<pre><code>display_state: bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Get display state.</p> <p>See [pyvesync.VeSyncAirBypass.display_status][<code>self.display_status</code>]</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.fan_level","title":"fan_level  <code>property</code>  \u21b2","text":"<pre><code>fan_level: int | None\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Get current fan level.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.fan_levels","title":"fan_levels  <code>instance-attribute</code>  \u21b2","text":"<pre><code>fan_levels: list[int] = fan_levels\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.filter_life","title":"filter_life  <code>property</code>  \u21b2","text":"<pre><code>filter_life: int | None\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Get percentage of filter life remaining.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.light_detection","title":"light_detection  <code>property</code>  \u21b2","text":"<pre><code>light_detection: bool\n</code></pre> <p>Inherited From <code>VeSyncAirBaseV2</code></p> <p>Return true if light detection feature is enabled.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.light_detection_state","title":"light_detection_state  <code>property</code>  \u21b2","text":"<pre><code>light_detection_state: bool\n</code></pre> <p>Inherited From <code>VeSyncAirBaseV2</code></p> <p>Return true if light is detected.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.modes","title":"modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>modes: list[str] = modes\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.night_light","title":"night_light  <code>property</code>  \u21b2","text":"<pre><code>night_light: str | None\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Get night light state.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str | None</code> <p>Night light state (on, dim, off)</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.nightlight_modes","title":"nightlight_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_modes: list[str] = nightlight_modes\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.screen_status","title":"screen_status  <code>property</code>  \u21b2","text":"<pre><code>screen_status: bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Get display status.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if display is on, False if off</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.set_speed_level","title":"set_speed_level  <code>property</code>  \u21b2","text":"<pre><code>set_speed_level: int | None\n</code></pre> <p>Inherited From <code>VeSyncAirBaseV2</code></p> <p>Get set speed level.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: PurifierState = PurifierState(\n    self, details, feature_map\n)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.supports_air_quality","title":"supports_air_quality  <code>property</code>  \u21b2","text":"<pre><code>supports_air_quality: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Return True if device supports air quality.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.supports_fan_rotate","title":"supports_fan_rotate  <code>property</code>  \u21b2","text":"<pre><code>supports_fan_rotate: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Return True if device supports fan rotation.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.supports_light_detection","title":"supports_light_detection  <code>property</code>  \u21b2","text":"<pre><code>supports_light_detection: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Returns True if device supports light detection.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.supports_nightlight","title":"supports_nightlight  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Return True if device supports nightlight.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2-functions","title":"Functions\u21b2","text":""},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.auto_mode","title":"auto_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>auto_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_auto_mode instead.</p> <p>Set Purifier to Auto Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_auto_mode instead.')\nasync def auto_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Auto Mode.\"\"\"\n    return await self.set_auto_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.call_bypassv2_api","title":"call_bypassv2_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv2_api(\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p> <p>Send Bypass V2 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V2 API.</p> <p>Parameters:</p> Name Type Description Default <code>payload_method</code> <code>str</code> <p>The method to use in the payload dict.</p> required <code>data</code> <code>dict | None</code> <p>The data to send in the request.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypassV2'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the API url, defaults to <code>bypassV2</code>, e.g. <code>/cloud/v2/deviceManaged/bypassV2</code>.</p> <code>'bypassV2'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv2_api(\n    self,\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None:\n    \"\"\"Send Bypass V2 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V2 API.\n\n    Args:\n        payload_method (str): The method to use in the payload dict.\n        data (dict | None): The data to send in the request.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the API url, defaults to\n            `bypassV2`, e.g. `/cloud/v2/deviceManaged/bypassV2`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(payload_method, data, method)\n    endpoint = BYPASS_V2_BASE + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        endpoint, 'post', request, Helpers.req_header_bypass()\n    )\n    return resp_dict\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.change_fan_speed","title":"change_fan_speed  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>change_fan_speed(speed: int | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>set_fan_speed()</code> instead.</p> <p>Deprecated - Set fan speed.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `set_fan_speed()` instead.')\nasync def change_fan_speed(self, speed: int | None = None) -&gt; bool:\n    \"\"\"Deprecated - Set fan speed.\"\"\"\n    return await self.set_fan_speed(speed)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.change_mode","title":"change_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>change_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>set_mode(mode: str)</code> instead.</p> <p>Deprecated - Set purifier mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `set_mode(mode: str)` instead.')\nasync def change_mode(self, mode: str) -&gt; bool:\n    \"\"\"Deprecated - Set purifier mode.\"\"\"\n    return await self.set_mode(mode)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.child_lock_off","title":"child_lock_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>child_lock_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>turn_off_child_lock()</code> instead.</p> <p>Turn off child lock (display lock).</p> <p>This has been deprecated, use <code>turn_off_child_lock()</code> instead.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `turn_off_child_lock()` instead.')\nasync def child_lock_off(self) -&gt; bool:\n    \"\"\"Turn off child lock (display lock).\n\n    This has been deprecated, use `turn_off_child_lock()` instead.\n    \"\"\"\n    return await self.toggle_child_lock(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.child_lock_on","title":"child_lock_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>child_lock_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>turn_on_child_lock()</code> instead.</p> <p>Turn on child lock (display lock).</p> <p>This has been deprecated, use <code>turn_on_child_lock()</code> instead.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `turn_on_child_lock()` instead.')\nasync def child_lock_on(self) -&gt; bool:\n    \"\"\"Turn on child lock (display lock).\n\n    This has been deprecated, use `turn_on_child_lock()` instead.\n    \"\"\"\n    return await self.toggle_child_lock(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    if self.state.timer is None:\n        _LOGGER.warning('No timer found, run get_timer() to retrieve timer.')\n        return False\n\n    payload_data = {'id': self.state.timer.id, 'subDeviceNo': 0}\n    r_dict = await self.call_bypassv2_api('delTimerV2', payload_data)\n    r = Helpers.process_dev_response(_LOGGER, 'clear_timer', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.timer = None\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> <p>Build API V2 Purifier details dictionary.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def get_details(self) -&gt; None:\n    \"\"\"Build API V2 Purifier details dictionary.\"\"\"\n    r_dict = await self.call_bypassv2_api('getPurifierStatus')\n    r_model = process_bypassv2_result(\n        self, _LOGGER, 'get_details', r_dict, PurifierVitalDetailsResult\n    )\n    if r_model is None:\n        return\n\n    self._set_state(r_model)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    r_bytes = await self.call_bypassv2_api('getTimer')\n    resp_model = process_bypassv2_result(\n        self, _LOGGER, 'get_timer', r_bytes, ResultV2GetTimer\n    )\n    if resp_model is None:\n        return None\n    timers = resp_model.timers\n    if not timers:\n        _LOGGER.debug('No timers found')\n        self.state.timer = None\n        return None\n    timer = timers[0]\n    self.state.timer = Timer(\n        timer_duration=timer.total,\n        action=timer.action,\n        id=timer.id,\n        remaining=timer.remain,\n    )\n    self.state.device_status = DeviceStatus.ON\n    self.state.connection_status = ConnectionStatus.ONLINE\n    _LOGGER.debug('Timer found: %s', str(self.state.timer))\n    return self.state.timer\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.manual_mode","title":"manual_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_manual_mode instead.</p> <p>Set Purifier to Manual Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_manual_mode instead.')\nasync def manual_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Manual Mode.\"\"\"\n    return await self.set_manual_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.mode_toggle","title":"mode_toggle  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>mode_toggle(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> Deprecated <p>Use set_mode(mode: str) instead.</p> <p>Deprecated - Set purifier mode.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>@deprecated('Use set_mode(mode: str) instead.')\nasync def mode_toggle(self, mode: str) -&gt; bool:\n    \"\"\"Deprecated - Set purifier mode.\"\"\"\n    return await self.set_mode(mode)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.nightlight_mode","title":"nightlight_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>nightlight_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_nightlight_mode instead.</p> <p>Set Nightlight Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_nightlight_mode instead.')\nasync def nightlight_mode(self, mode: str) -&gt; bool:\n    \"\"\"Set Nightlight Mode.\"\"\"\n    return await self.set_nightlight_mode(mode)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.pet_mode","title":"pet_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>pet_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_pet_mode instead.</p> <p>Set Purifier to Pet Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_pet_mode instead.')\nasync def pet_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Pet Mode.\"\"\"\n    return await self.set_pet_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.reset_filter","title":"reset_filter  <code>async</code>  \u21b2","text":"<pre><code>reset_filter() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Reset filter life.</p> <p>Reset filter to 100%.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if filter is reset, False if not</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def reset_filter(self) -&gt; bool:\n    \"\"\"Reset filter to 100%.\n\n    Returns:\n        bool : True if filter is reset, False if not\n    \"\"\"\n    r_dict = await self.call_bypassv2_api('resetFilter')\n    r = Helpers.process_dev_response(_LOGGER, 'reset_filter', self, r_dict)\n    return bool(r)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.set_auto_mode","title":"set_auto_mode  <code>async</code>  \u21b2","text":"<pre><code>set_auto_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Auto Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_auto_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Auto Mode.\"\"\"\n    if PurifierModes.AUTO in self.modes:\n        return await self.set_mode(PurifierModes.AUTO)\n    logger.error('Auto mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.set_auto_preference","title":"set_auto_preference  <code>async</code>  \u21b2","text":"<pre><code>set_auto_preference(\n    preference: str = DEFAULT, room_size: int = 600\n) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Set auto preference.</p> <p>Parameters:</p> Name Type Description Default <code>preference</code> <code>str</code> <p>Auto preference to set, available preference is found in <code>self.auto_preferences</code>.</p> <code>DEFAULT</code> <code>room_size</code> <code>int</code> <p>Room size to set, defaults to 800ft2.</p> <code>600</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> <p>Set Levoit Vital 100S/200S auto mode.</p> <p>Parameters:</p> Name Type Description Default <code>preference</code> <code>str | None | PurifierAutoPreference</code> <p>Preference for auto mode, default 'default' (default, efficient, quiet)</p> <code>DEFAULT</code> <code>room_size</code> <code>int | None</code> <p>Room size in square feet, by default 600</p> <code>600</code> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def set_auto_preference(\n    self, preference: str = PurifierAutoPreference.DEFAULT, room_size: int = 600\n) -&gt; bool:\n    \"\"\"Set Levoit Vital 100S/200S auto mode.\n\n    Parameters:\n        preference (str | None | PurifierAutoPreference):\n            Preference for auto mode, default 'default' (default, efficient, quiet)\n        room_size (int | None):\n            Room size in square feet, by default 600\n    \"\"\"\n    if preference not in self.auto_preferences:\n        _LOGGER.debug(\n            '%s is invalid preference -'\n            ' valid preferences are default, efficient, quiet',\n            preference,\n        )\n        return False\n    payload_data = {'autoPreference': preference, 'roomSize': room_size}\n    r_dict = await self.call_bypassv2_api('setAutoPreference', payload_data)\n    r = Helpers.process_dev_response(_LOGGER, 'set_auto_preference', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.auto_preference_type = preference\n    self.state.auto_room_size = room_size\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.set_child_lock","title":"set_child_lock  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_child_lock(toggle: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>toggle_child_lock()</code> instead.</p> <p>Set child lock (display lock).</p> <p>This has been deprecated in favor of <code>toggle_child_lock()</code>.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `toggle_child_lock()` instead.')\nasync def set_child_lock(self, toggle: bool) -&gt; bool:\n    \"\"\"Set child lock (display lock).\n\n    This has been deprecated in favor of `toggle_child_lock()`.\n    \"\"\"\n    return await self.toggle_child_lock(toggle)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.set_fan_speed","title":"set_fan_speed  <code>async</code>  \u21b2","text":"<pre><code>set_fan_speed(speed: None | int = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Set Purifier Fan Speed.</p> <p>Parameters:</p> Name Type Description Default <code>speed</code> <code>int | None</code> <p>Fan speed to set. If None, use default speed.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def set_fan_speed(self, speed: None | int = None) -&gt; bool:\n    if speed is not None:\n        if speed not in self.fan_levels:\n            _LOGGER.debug(\n                '%s is invalid speed - valid speeds are %s',\n                speed,\n                str(self.fan_levels),\n            )\n            return False\n        new_speed = speed\n    elif self.state.fan_level is None:\n        new_speed = self.fan_levels[0]\n    else:\n        new_speed = Helpers.bump_level(self.state.fan_level, self.fan_levels)\n\n    payload_data = {'levelIdx': 0, 'manualSpeedLevel': new_speed, 'levelType': 'wind'}\n    r_dict = await self.call_bypassv2_api('setLevel', payload_data)\n    r = Helpers.process_dev_response(_LOGGER, 'set_fan_speed', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.fan_set_level = new_speed\n    self.state.fan_level = new_speed\n    self.state.mode = PurifierModes.MANUAL\n    self.state.device_status = DeviceStatus.ON\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.set_light_detection","title":"set_light_detection  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_light_detection(toggle: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBaseV2</code></p> Deprecated <p>Use toggle_light_detection(toggle) instead.</p> <p>Set light detection feature.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>@deprecated('Use toggle_light_detection(toggle) instead.')\nasync def set_light_detection(self, toggle: bool) -&gt; bool:\n    \"\"\"Set light detection feature.\"\"\"\n    return await self.toggle_light_detection(toggle)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.set_light_detection_off","title":"set_light_detection_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_light_detection_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use turn_off_light_detection() instead.</p> <p>Turn off light detection feature.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use turn_off_light_detection() instead.')\nasync def set_light_detection_off(self) -&gt; bool:\n    \"\"\"Turn off light detection feature.\"\"\"\n    return await self.toggle_light_detection(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.set_light_detection_on","title":"set_light_detection_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_light_detection_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use turn_on_light_detection() instead.</p> <p>Turn on light detection feature.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use turn_on_light_detection() instead.')\nasync def set_light_detection_on(self) -&gt; bool:\n    \"\"\"Turn on light detection feature.\"\"\"\n    return await self.toggle_light_detection(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.set_manual_mode","title":"set_manual_mode  <code>async</code>  \u21b2","text":"<pre><code>set_manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Manual Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_manual_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Manual Mode.\"\"\"\n    if PurifierModes.MANUAL in self.modes:\n        return await self.set_mode(PurifierModes.MANUAL)\n    logger.error('Manual mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.set_mode","title":"set_mode  <code>async</code>  \u21b2","text":"<pre><code>set_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Set Purifier Mode.</p> <p>Allowed modes are found in the <code>device.modes</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def set_mode(self, mode: str) -&gt; bool:\n    if mode.lower() not in self.modes:\n        _LOGGER.debug('Invalid purifier mode used - %s', mode)\n        return False\n\n    # Call change_fan_speed if mode is set to manual\n    if mode == PurifierModes.MANUAL:\n        if self.state.fan_set_level is None or self.state.fan_level == 0:\n            return await self.set_fan_speed(1)\n        return await self.set_fan_speed(self.state.fan_set_level)\n\n    payload_data = {'workMode': mode}\n    r_dict = await self.call_bypassv2_api('setPurifierMode', payload_data)\n    r = Helpers.process_dev_response(_LOGGER, 'mode_toggle', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.mode = mode\n    self.state.connection_status = ConnectionStatus.ONLINE\n    self.state.device_status = DeviceStatus.ON\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.set_nightlight_dim","title":"set_nightlight_dim  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_dim() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Nightlight Dim.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_nightlight_dim(self) -&gt; bool:\n    \"\"\"Set Nightlight Dim.\"\"\"\n    return await self.set_nightlight_mode(NightlightModes.DIM)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.set_nightlight_mode","title":"set_nightlight_mode  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Nightlight Mode.</p> <p>Modes are defined in the <code>device.nightlight_modes</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Nightlight mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def set_nightlight_mode(self, mode: str) -&gt; bool:\n    if not self.supports_nightlight:\n        _LOGGER.debug('Device does not support night light')\n        return False\n    if mode.lower() not in self.nightlight_modes:\n        _LOGGER.warning('Invalid nightlight mode used (on, off or dim)- %s', mode)\n        return False\n\n    r_dict = await self.call_bypassv2_api(\n        'setNightLight', {'night_light': mode.lower()}\n    )\n    r = Helpers.process_dev_response(_LOGGER, 'set_night_light', self, r_dict)\n    if r is None:\n        return False\n    self.state.connection_status = ConnectionStatus.ONLINE\n    self.state.nightlight_status = NightlightModes(mode.lower())\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.set_pet_mode","title":"set_pet_mode  <code>async</code>  \u21b2","text":"<pre><code>set_pet_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Pet Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_pet_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Pet Mode.\"\"\"\n    if PurifierModes.PET in self.modes:\n        return await self.set_mode(PurifierModes.PET)\n    logger.error('Pet mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.set_sleep_mode","title":"set_sleep_mode  <code>async</code>  \u21b2","text":"<pre><code>set_sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Sleep Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_sleep_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Sleep Mode.\"\"\"\n    if PurifierModes.SLEEP in self.modes:\n        return await self.set_mode(PurifierModes.SLEEP)\n    logger.error('Sleep mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    action = DeviceStatus.OFF  # No other actions available for this device\n    if action not in [DeviceStatus.ON, DeviceStatus.OFF]:\n        _LOGGER.debug('Invalid action for timer')\n        return False\n\n    method = 'powerSwitch'\n    action_int = 1 if action == DeviceStatus.ON else 0\n    action_item = PurifierV2TimerActionItems(type=method, act=action_int)\n    timing = PurifierV2EventTiming(clkSec=duration)\n    payload_data = PurifierV2TimerPayloadData(\n        enabled=True,\n        startAct=[action_item],\n        tmgEvt=timing,\n    )\n\n    r_dict = await self.call_bypassv2_api('addTimerV2', payload_data.to_dict())\n    r = Helpers.process_dev_response(_LOGGER, 'set_timer', self, r_dict)\n    if r is None:\n        return False\n\n    r_model = ResultV2SetTimer.from_dict(r)\n\n    self.state.timer = Timer(duration, action=action, id=r_model.id)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.set_turbo_mode","title":"set_turbo_mode  <code>async</code>  \u21b2","text":"<pre><code>set_turbo_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Turbo Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_turbo_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Turbo Mode.\"\"\"\n    if PurifierModes.TURBO in self.modes:\n        return await self.set_mode(PurifierModes.TURBO)\n    logger.error('Turbo mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.sleep_mode","title":"sleep_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_sleep_mode instead.</p> <p>Set Purifier to Sleep Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_sleep_mode instead.')\nasync def sleep_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Sleep Mode.\"\"\"\n    return await self.set_sleep_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.toggle_child_lock","title":"toggle_child_lock  <code>async</code>  \u21b2","text":"<pre><code>toggle_child_lock(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Toggle Child Lock (Display Lock).</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>Toggle child lock. If None, toggle state.</p> <code>None</code> <p>Toggle child lock.</p> <p>Set child lock to on or off. Internal method used by <code>turn_on_child_lock</code> and <code>turn_off_child_lock</code>.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>True to turn child lock on, False to turn off</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if child lock is set, False if not</p> <p>Levoit 100S/200S set Child Lock.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>True to turn child lock on, False to turn off</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False if not</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def toggle_child_lock(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Levoit 100S/200S set Child Lock.\n\n    Parameters:\n        toggle (bool): True to turn child lock on, False to turn off\n\n    Returns:\n        bool : True if successful, False if not\n    \"\"\"\n    if toggle is None:\n        toggle = not bool(self.state.child_lock)\n    payload_data = {'childLockSwitch': int(toggle)}\n    r_dict = await self.call_bypassv2_api('setChildLock', payload_data)\n\n    r = Helpers.process_dev_response(_LOGGER, 'toggle_child_lock', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.child_lock = toggle\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.toggle_display","title":"toggle_display  <code>async</code>  \u21b2","text":"<pre><code>toggle_display(mode: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Set Display Mode.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def toggle_display(self, mode: bool) -&gt; bool:\n    if bool(self.state.light_detection_status):\n        _LOGGER.error('Cannot set display when light detection is enabled')\n        return False\n\n    if bool(self.state.display_set_status) == mode:\n        _LOGGER.debug('Display is already %s', mode)\n        return True\n\n    payload_data = {'screenSwitch': int(mode)}\n    r_dict = await self.call_bypassv2_api('setDisplay', payload_data)\n\n    r = Helpers.process_dev_response(_LOGGER, 'set_display', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.display_set_status = DeviceStatus.from_bool(mode)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.toggle_light_detection","title":"toggle_light_detection  <code>async</code>  \u21b2","text":"<pre><code>toggle_light_detection(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Light Detection Mode.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>Toggle light detection. If None, toggle state.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> <p>Enable/Disable Light Detection Feature.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def toggle_light_detection(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Enable/Disable Light Detection Feature.\"\"\"\n    if bool(self.state.light_detection_status) == toggle:\n        _LOGGER.debug(\n            'Light detection is already %s', self.state.light_detection_status\n        )\n        return True\n\n    if toggle is None:\n        toggle = not bool(self.state.light_detection_status)\n    payload_data = {'lightDetectionSwitch': int(toggle)}\n    r_dict = await self.call_bypassv2_api('setLightDetection', payload_data)\n    r = Helpers.process_dev_response(_LOGGER, 'set_light_detection', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.light_detection_switch = DeviceStatus.from_bool(toggle)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = not bool(self.state.device_status)\n    if not isinstance(toggle, bool):\n        _LOGGER.debug('Invalid toggle value for purifier switch')\n        return False\n    if toggle == bool(self.state.device_status):\n        _LOGGER.debug('Purifier is already %s', self.state.device_status)\n        return True\n\n    payload_data = {'powerSwitch': int(toggle), 'switchIdx': 0}\n    r_dict = await self.call_bypassv2_api('setSwitch', payload_data)\n    r = Helpers.process_dev_response(_LOGGER, 'toggle_switch', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.device_status = DeviceStatus.from_bool(toggle)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.turbo_mode","title":"turbo_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>turbo_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_turbo_mode instead.</p> <p>Set Purifier to Turbo Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_turbo_mode instead.')\nasync def turbo_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Turbo Mode.\"\"\"\n    return await self.set_turbo_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.turn_off_child_lock","title":"turn_off_child_lock  <code>async</code>  \u21b2","text":"<pre><code>turn_off_child_lock() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set child lock (display lock) to OFF.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_child_lock(self) -&gt; bool:\n    \"\"\"Set child lock (display lock) to OFF.\"\"\"\n    return await self.toggle_child_lock(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.turn_off_display","title":"turn_off_display  <code>async</code>  \u21b2","text":"<pre><code>turn_off_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn off Display.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_display(self) -&gt; bool:\n    \"\"\"Turn off Display.\"\"\"\n    return await self.toggle_display(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.turn_off_light_detection","title":"turn_off_light_detection  <code>async</code>  \u21b2","text":"<pre><code>turn_off_light_detection() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn off Light Detection.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_light_detection(self) -&gt; bool:\n    \"\"\"Turn off Light Detection.\"\"\"\n    return await self.toggle_light_detection(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.turn_off_nightlight","title":"turn_off_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_off_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn off Nightlight.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_nightlight(self) -&gt; bool:\n    \"\"\"Turn off Nightlight.\"\"\"\n    return await self.set_nightlight_mode(NightlightModes.OFF)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.turn_on_child_lock","title":"turn_on_child_lock  <code>async</code>  \u21b2","text":"<pre><code>turn_on_child_lock() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set child lock (display lock) to ON.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_child_lock(self) -&gt; bool:\n    \"\"\"Set child lock (display lock) to ON.\"\"\"\n    return await self.toggle_child_lock(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.turn_on_display","title":"turn_on_display  <code>async</code>  \u21b2","text":"<pre><code>turn_on_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn on Display.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_display(self) -&gt; bool:\n    \"\"\"Turn on Display.\"\"\"\n    return await self.toggle_display(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.turn_on_light_detection","title":"turn_on_light_detection  <code>async</code>  \u21b2","text":"<pre><code>turn_on_light_detection() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn on Light Detection.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_light_detection(self) -&gt; bool:\n    \"\"\"Turn on Light Detection.\"\"\"\n    return await self.toggle_light_detection(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.turn_on_nightlight","title":"turn_on_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_on_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn on Nightlight.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_nightlight(self) -&gt; bool:\n    \"\"\"Turn on Nightlight.\"\"\"\n    return await self.set_nightlight_mode(NightlightModes.ON)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout","title":"pyvesync.devices.vesyncpurifier.VeSyncAirSprout \u21b2","text":"<p>               Bases: <code>VeSyncAirBaseV2</code></p> <p>Class for the Sprout Air Purifier.</p> <p>Inherits from VeSyncAirBaseV2 class and overrides the _set_state method. See the VeSyncAirBaseV2 class for more information.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>dict</code> <p>Dictionary of device details</p> required <code>manager</code> <code>VeSync</code> <p>Instantiated VeSync object</p> required <code>feature_map</code> <code>PurifierMap</code> <p>Device map template</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>PurifierState</code> <p>State of the device.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <code>modes</code> <code>list[str]</code> <p>List of modes supported by the device.</p> <code>fan_levels</code> <code>list[int]</code> <p>List of fan levels supported by the device.</p> <code>nightlight_modes</code> <code>list[str]</code> <p>List of nightlight modes supported by the device.</p> <code>auto_preferences</code> <code>list[str]</code> <p>List of auto preferences supported by the device.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>class VeSyncAirSprout(VeSyncAirBaseV2):  # pylint: disable=too-many-ancestors\n    \"\"\"Class for the Sprout Air Purifier.\n\n    Inherits from VeSyncAirBaseV2 class and overrides\n    the _set_state method. See the\n    [VeSyncAirBaseV2][pyvesync.devices.vesyncpurifier.VeSyncAirBaseV2]\n    class for more information.\n\n    Args:\n        details (dict): Dictionary of device details\n        manager (VeSync): Instantiated VeSync object\n        feature_map (PurifierMap): Device map template\n\n    Attributes:\n        state (PurifierState): State of the device.\n        last_response (ResponseInfo): Last response from API call.\n        manager (VeSync): Manager object for API calls.\n        device_name (str): Name of device.\n        device_image (str): URL for device image.\n        cid (str): Device ID.\n        connection_type (str): Connection type of device.\n        device_type (str): Type of device.\n        type (str): Type of device.\n        uuid (str): UUID of device, not always present.\n        config_module (str): Configuration module of device.\n        mac_id (str): MAC ID of device.\n        current_firm_version (str): Current firmware version of device.\n        device_region (str): Region of device. (US, EU, etc.)\n        pid (str): Product ID of device, pulled by some devices on update.\n        sub_device_no (int): Sub-device number of device.\n        product_type (str): Product type of device.\n        features (dict): Features of device.\n        modes (list[str]): List of modes supported by the device.\n        fan_levels (list[int]): List of fan levels supported by the device.\n        nightlight_modes (list[str]): List of nightlight modes supported by the device.\n        auto_preferences (list[str]): List of auto preferences supported by the device.\n    \"\"\"\n\n    def __init__(\n        self,\n        details: ResponseDeviceDetailsModel,\n        manager: VeSync,\n        feature_map: PurifierMap,\n    ) -&gt; None:\n        \"\"\"Initialize air purifier class.\"\"\"\n        super().__init__(details, manager, feature_map)\n\n    def _set_state(self, details: InnerPurifierBaseResult) -&gt; None:\n        \"\"\"Set Purifier state from details response.\"\"\"\n        if not isinstance(details, PurifierSproutResult):\n            _LOGGER.debug('Invalid details model passed to _set_state')\n            return\n        self.state.connection_status = ConnectionStatus.ONLINE\n        self.state.device_status = DeviceStatus.from_int(details.powerSwitch)\n        self.state.mode = details.workMode\n        if details.fanSpeedLevel == 255:  # noqa: PLR2004\n            self.state.fan_level = 0\n        else:\n            self.state.fan_level = details.fanSpeedLevel\n        self.state.fan_set_level = details.manualSpeedLevel\n        self.state.child_lock = bool(details.childLockSwitch)\n        self.state.air_quality_level = details.AQLevel\n        self.state.pm25 = details.PM25\n        self.state.pm1 = details.PM1\n        self.state.pm10 = details.PM10\n        self.state.aq_percent = details.AQI\n        self.state.display_set_status = DeviceStatus.from_int(details.screenSwitch)\n        self.state.display_status = DeviceStatus.from_int(details.screenState)\n        auto_pref = details.autoPreference\n        if auto_pref is not None:\n            self.state.auto_preference_type = auto_pref.autoPreferenceType\n            self.state.auto_room_size = auto_pref.roomSize\n        self.state.humidity = details.humidity\n        self.state.temperature = int((details.temperature or 0) / 10)\n        self.state.pm1 = details.PM1\n        self.state.pm10 = details.PM10\n        self.state.pm25 = details.PM25\n        self.state.voc = details.VOC\n        self.state.co2 = details.CO2\n        if details.nightlight is not None:\n            self.state.nightlight_status = DeviceStatus.from_int(\n                details.nightlight.nightLightSwitch\n            )\n            self.state.nightlight_brightness = details.nightlight.brightness\n\n    async def get_details(self) -&gt; None:\n        \"\"\"Build API V2 Purifier details dictionary.\"\"\"\n        r_dict = await self.call_bypassv2_api('getPurifierStatus')\n        r_model = process_bypassv2_result(\n            self, _LOGGER, 'get_details', r_dict, PurifierSproutResult\n        )\n        if r_model is None:\n            return\n\n        self._set_state(r_model)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.air_quality","title":"air_quality  <code>property</code>  \u21b2","text":"<pre><code>air_quality: int | None\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Get air quality value PM2.5 (ug/m3).</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.auto_preferences","title":"auto_preferences  <code>instance-attribute</code>  \u21b2","text":"<pre><code>auto_preferences: list[str] = auto_preferences\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.child_lock","title":"child_lock  <code>property</code>  \u21b2","text":"<pre><code>child_lock: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Get child lock state.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if child lock is enabled, False if not.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.display_state","title":"display_state  <code>property</code>  \u21b2","text":"<pre><code>display_state: bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Get display state.</p> <p>See [pyvesync.VeSyncAirBypass.display_status][<code>self.display_status</code>]</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.fan_level","title":"fan_level  <code>property</code>  \u21b2","text":"<pre><code>fan_level: int | None\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Get current fan level.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.fan_levels","title":"fan_levels  <code>instance-attribute</code>  \u21b2","text":"<pre><code>fan_levels: list[int] = fan_levels\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.filter_life","title":"filter_life  <code>property</code>  \u21b2","text":"<pre><code>filter_life: int | None\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Get percentage of filter life remaining.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.light_detection","title":"light_detection  <code>property</code>  \u21b2","text":"<pre><code>light_detection: bool\n</code></pre> <p>Inherited From <code>VeSyncAirBaseV2</code></p> <p>Return true if light detection feature is enabled.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.light_detection_state","title":"light_detection_state  <code>property</code>  \u21b2","text":"<pre><code>light_detection_state: bool\n</code></pre> <p>Inherited From <code>VeSyncAirBaseV2</code></p> <p>Return true if light is detected.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.modes","title":"modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>modes: list[str] = modes\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.night_light","title":"night_light  <code>property</code>  \u21b2","text":"<pre><code>night_light: str | None\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Get night light state.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str | None</code> <p>Night light state (on, dim, off)</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.nightlight_modes","title":"nightlight_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_modes: list[str] = nightlight_modes\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.screen_status","title":"screen_status  <code>property</code>  \u21b2","text":"<pre><code>screen_status: bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Get display status.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if display is on, False if off</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.set_speed_level","title":"set_speed_level  <code>property</code>  \u21b2","text":"<pre><code>set_speed_level: int | None\n</code></pre> <p>Inherited From <code>VeSyncAirBaseV2</code></p> <p>Get set speed level.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: PurifierState = PurifierState(\n    self, details, feature_map\n)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.supports_air_quality","title":"supports_air_quality  <code>property</code>  \u21b2","text":"<pre><code>supports_air_quality: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Return True if device supports air quality.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.supports_fan_rotate","title":"supports_fan_rotate  <code>property</code>  \u21b2","text":"<pre><code>supports_fan_rotate: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Return True if device supports fan rotation.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.supports_light_detection","title":"supports_light_detection  <code>property</code>  \u21b2","text":"<pre><code>supports_light_detection: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Returns True if device supports light detection.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.supports_nightlight","title":"supports_nightlight  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Return True if device supports nightlight.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout-functions","title":"Functions\u21b2","text":""},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.auto_mode","title":"auto_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>auto_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_auto_mode instead.</p> <p>Set Purifier to Auto Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_auto_mode instead.')\nasync def auto_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Auto Mode.\"\"\"\n    return await self.set_auto_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.call_bypassv2_api","title":"call_bypassv2_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv2_api(\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p> <p>Send Bypass V2 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V2 API.</p> <p>Parameters:</p> Name Type Description Default <code>payload_method</code> <code>str</code> <p>The method to use in the payload dict.</p> required <code>data</code> <code>dict | None</code> <p>The data to send in the request.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypassV2'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the API url, defaults to <code>bypassV2</code>, e.g. <code>/cloud/v2/deviceManaged/bypassV2</code>.</p> <code>'bypassV2'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv2_api(\n    self,\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None:\n    \"\"\"Send Bypass V2 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V2 API.\n\n    Args:\n        payload_method (str): The method to use in the payload dict.\n        data (dict | None): The data to send in the request.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the API url, defaults to\n            `bypassV2`, e.g. `/cloud/v2/deviceManaged/bypassV2`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(payload_method, data, method)\n    endpoint = BYPASS_V2_BASE + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        endpoint, 'post', request, Helpers.req_header_bypass()\n    )\n    return resp_dict\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.change_fan_speed","title":"change_fan_speed  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>change_fan_speed(speed: int | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>set_fan_speed()</code> instead.</p> <p>Deprecated - Set fan speed.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `set_fan_speed()` instead.')\nasync def change_fan_speed(self, speed: int | None = None) -&gt; bool:\n    \"\"\"Deprecated - Set fan speed.\"\"\"\n    return await self.set_fan_speed(speed)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.change_mode","title":"change_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>change_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>set_mode(mode: str)</code> instead.</p> <p>Deprecated - Set purifier mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `set_mode(mode: str)` instead.')\nasync def change_mode(self, mode: str) -&gt; bool:\n    \"\"\"Deprecated - Set purifier mode.\"\"\"\n    return await self.set_mode(mode)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.child_lock_off","title":"child_lock_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>child_lock_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>turn_off_child_lock()</code> instead.</p> <p>Turn off child lock (display lock).</p> <p>This has been deprecated, use <code>turn_off_child_lock()</code> instead.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `turn_off_child_lock()` instead.')\nasync def child_lock_off(self) -&gt; bool:\n    \"\"\"Turn off child lock (display lock).\n\n    This has been deprecated, use `turn_off_child_lock()` instead.\n    \"\"\"\n    return await self.toggle_child_lock(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.child_lock_on","title":"child_lock_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>child_lock_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>turn_on_child_lock()</code> instead.</p> <p>Turn on child lock (display lock).</p> <p>This has been deprecated, use <code>turn_on_child_lock()</code> instead.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `turn_on_child_lock()` instead.')\nasync def child_lock_on(self) -&gt; bool:\n    \"\"\"Turn on child lock (display lock).\n\n    This has been deprecated, use `turn_on_child_lock()` instead.\n    \"\"\"\n    return await self.toggle_child_lock(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    if self.state.timer is None:\n        _LOGGER.warning('No timer found, run get_timer() to retrieve timer.')\n        return False\n\n    payload_data = {'id': self.state.timer.id, 'subDeviceNo': 0}\n    r_dict = await self.call_bypassv2_api('delTimerV2', payload_data)\n    r = Helpers.process_dev_response(_LOGGER, 'clear_timer', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.timer = None\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncAirBaseV2</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> <p>Build API V2 Purifier details dictionary.</p> <p>Build API V2 Purifier details dictionary.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def get_details(self) -&gt; None:\n    \"\"\"Build API V2 Purifier details dictionary.\"\"\"\n    r_dict = await self.call_bypassv2_api('getPurifierStatus')\n    r_model = process_bypassv2_result(\n        self, _LOGGER, 'get_details', r_dict, PurifierSproutResult\n    )\n    if r_model is None:\n        return\n\n    self._set_state(r_model)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    r_bytes = await self.call_bypassv2_api('getTimer')\n    resp_model = process_bypassv2_result(\n        self, _LOGGER, 'get_timer', r_bytes, ResultV2GetTimer\n    )\n    if resp_model is None:\n        return None\n    timers = resp_model.timers\n    if not timers:\n        _LOGGER.debug('No timers found')\n        self.state.timer = None\n        return None\n    timer = timers[0]\n    self.state.timer = Timer(\n        timer_duration=timer.total,\n        action=timer.action,\n        id=timer.id,\n        remaining=timer.remain,\n    )\n    self.state.device_status = DeviceStatus.ON\n    self.state.connection_status = ConnectionStatus.ONLINE\n    _LOGGER.debug('Timer found: %s', str(self.state.timer))\n    return self.state.timer\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.manual_mode","title":"manual_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_manual_mode instead.</p> <p>Set Purifier to Manual Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_manual_mode instead.')\nasync def manual_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Manual Mode.\"\"\"\n    return await self.set_manual_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.mode_toggle","title":"mode_toggle  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>mode_toggle(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> Deprecated <p>Use set_mode(mode: str) instead.</p> <p>Deprecated - Set purifier mode.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>@deprecated('Use set_mode(mode: str) instead.')\nasync def mode_toggle(self, mode: str) -&gt; bool:\n    \"\"\"Deprecated - Set purifier mode.\"\"\"\n    return await self.set_mode(mode)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.nightlight_mode","title":"nightlight_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>nightlight_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_nightlight_mode instead.</p> <p>Set Nightlight Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_nightlight_mode instead.')\nasync def nightlight_mode(self, mode: str) -&gt; bool:\n    \"\"\"Set Nightlight Mode.\"\"\"\n    return await self.set_nightlight_mode(mode)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.pet_mode","title":"pet_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>pet_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_pet_mode instead.</p> <p>Set Purifier to Pet Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_pet_mode instead.')\nasync def pet_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Pet Mode.\"\"\"\n    return await self.set_pet_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.reset_filter","title":"reset_filter  <code>async</code>  \u21b2","text":"<pre><code>reset_filter() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Reset filter life.</p> <p>Reset filter to 100%.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if filter is reset, False if not</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def reset_filter(self) -&gt; bool:\n    \"\"\"Reset filter to 100%.\n\n    Returns:\n        bool : True if filter is reset, False if not\n    \"\"\"\n    r_dict = await self.call_bypassv2_api('resetFilter')\n    r = Helpers.process_dev_response(_LOGGER, 'reset_filter', self, r_dict)\n    return bool(r)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.set_auto_mode","title":"set_auto_mode  <code>async</code>  \u21b2","text":"<pre><code>set_auto_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Auto Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_auto_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Auto Mode.\"\"\"\n    if PurifierModes.AUTO in self.modes:\n        return await self.set_mode(PurifierModes.AUTO)\n    logger.error('Auto mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.set_auto_preference","title":"set_auto_preference  <code>async</code>  \u21b2","text":"<pre><code>set_auto_preference(\n    preference: str = DEFAULT, room_size: int = 600\n) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Set auto preference.</p> <p>Parameters:</p> Name Type Description Default <code>preference</code> <code>str</code> <p>Auto preference to set, available preference is found in <code>self.auto_preferences</code>.</p> <code>DEFAULT</code> <code>room_size</code> <code>int</code> <p>Room size to set, defaults to 800ft2.</p> <code>600</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> <p>Set Levoit Vital 100S/200S auto mode.</p> <p>Parameters:</p> Name Type Description Default <code>preference</code> <code>str | None | PurifierAutoPreference</code> <p>Preference for auto mode, default 'default' (default, efficient, quiet)</p> <code>DEFAULT</code> <code>room_size</code> <code>int | None</code> <p>Room size in square feet, by default 600</p> <code>600</code> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def set_auto_preference(\n    self, preference: str = PurifierAutoPreference.DEFAULT, room_size: int = 600\n) -&gt; bool:\n    \"\"\"Set Levoit Vital 100S/200S auto mode.\n\n    Parameters:\n        preference (str | None | PurifierAutoPreference):\n            Preference for auto mode, default 'default' (default, efficient, quiet)\n        room_size (int | None):\n            Room size in square feet, by default 600\n    \"\"\"\n    if preference not in self.auto_preferences:\n        _LOGGER.debug(\n            '%s is invalid preference -'\n            ' valid preferences are default, efficient, quiet',\n            preference,\n        )\n        return False\n    payload_data = {'autoPreference': preference, 'roomSize': room_size}\n    r_dict = await self.call_bypassv2_api('setAutoPreference', payload_data)\n    r = Helpers.process_dev_response(_LOGGER, 'set_auto_preference', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.auto_preference_type = preference\n    self.state.auto_room_size = room_size\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.set_child_lock","title":"set_child_lock  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_child_lock(toggle: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>toggle_child_lock()</code> instead.</p> <p>Set child lock (display lock).</p> <p>This has been deprecated in favor of <code>toggle_child_lock()</code>.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `toggle_child_lock()` instead.')\nasync def set_child_lock(self, toggle: bool) -&gt; bool:\n    \"\"\"Set child lock (display lock).\n\n    This has been deprecated in favor of `toggle_child_lock()`.\n    \"\"\"\n    return await self.toggle_child_lock(toggle)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.set_fan_speed","title":"set_fan_speed  <code>async</code>  \u21b2","text":"<pre><code>set_fan_speed(speed: None | int = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Set Purifier Fan Speed.</p> <p>Parameters:</p> Name Type Description Default <code>speed</code> <code>int | None</code> <p>Fan speed to set. If None, use default speed.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def set_fan_speed(self, speed: None | int = None) -&gt; bool:\n    if speed is not None:\n        if speed not in self.fan_levels:\n            _LOGGER.debug(\n                '%s is invalid speed - valid speeds are %s',\n                speed,\n                str(self.fan_levels),\n            )\n            return False\n        new_speed = speed\n    elif self.state.fan_level is None:\n        new_speed = self.fan_levels[0]\n    else:\n        new_speed = Helpers.bump_level(self.state.fan_level, self.fan_levels)\n\n    payload_data = {'levelIdx': 0, 'manualSpeedLevel': new_speed, 'levelType': 'wind'}\n    r_dict = await self.call_bypassv2_api('setLevel', payload_data)\n    r = Helpers.process_dev_response(_LOGGER, 'set_fan_speed', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.fan_set_level = new_speed\n    self.state.fan_level = new_speed\n    self.state.mode = PurifierModes.MANUAL\n    self.state.device_status = DeviceStatus.ON\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.set_light_detection","title":"set_light_detection  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_light_detection(toggle: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBaseV2</code></p> Deprecated <p>Use toggle_light_detection(toggle) instead.</p> <p>Set light detection feature.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>@deprecated('Use toggle_light_detection(toggle) instead.')\nasync def set_light_detection(self, toggle: bool) -&gt; bool:\n    \"\"\"Set light detection feature.\"\"\"\n    return await self.toggle_light_detection(toggle)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.set_light_detection_off","title":"set_light_detection_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_light_detection_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use turn_off_light_detection() instead.</p> <p>Turn off light detection feature.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use turn_off_light_detection() instead.')\nasync def set_light_detection_off(self) -&gt; bool:\n    \"\"\"Turn off light detection feature.\"\"\"\n    return await self.toggle_light_detection(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.set_light_detection_on","title":"set_light_detection_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_light_detection_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use turn_on_light_detection() instead.</p> <p>Turn on light detection feature.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use turn_on_light_detection() instead.')\nasync def set_light_detection_on(self) -&gt; bool:\n    \"\"\"Turn on light detection feature.\"\"\"\n    return await self.toggle_light_detection(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.set_manual_mode","title":"set_manual_mode  <code>async</code>  \u21b2","text":"<pre><code>set_manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Manual Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_manual_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Manual Mode.\"\"\"\n    if PurifierModes.MANUAL in self.modes:\n        return await self.set_mode(PurifierModes.MANUAL)\n    logger.error('Manual mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.set_mode","title":"set_mode  <code>async</code>  \u21b2","text":"<pre><code>set_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Set Purifier Mode.</p> <p>Allowed modes are found in the <code>device.modes</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def set_mode(self, mode: str) -&gt; bool:\n    if mode.lower() not in self.modes:\n        _LOGGER.debug('Invalid purifier mode used - %s', mode)\n        return False\n\n    # Call change_fan_speed if mode is set to manual\n    if mode == PurifierModes.MANUAL:\n        if self.state.fan_set_level is None or self.state.fan_level == 0:\n            return await self.set_fan_speed(1)\n        return await self.set_fan_speed(self.state.fan_set_level)\n\n    payload_data = {'workMode': mode}\n    r_dict = await self.call_bypassv2_api('setPurifierMode', payload_data)\n    r = Helpers.process_dev_response(_LOGGER, 'mode_toggle', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.mode = mode\n    self.state.connection_status = ConnectionStatus.ONLINE\n    self.state.device_status = DeviceStatus.ON\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.set_nightlight_dim","title":"set_nightlight_dim  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_dim() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Nightlight Dim.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_nightlight_dim(self) -&gt; bool:\n    \"\"\"Set Nightlight Dim.\"\"\"\n    return await self.set_nightlight_mode(NightlightModes.DIM)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.set_nightlight_mode","title":"set_nightlight_mode  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Nightlight Mode.</p> <p>Modes are defined in the <code>device.nightlight_modes</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Nightlight mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def set_nightlight_mode(self, mode: str) -&gt; bool:\n    if not self.supports_nightlight:\n        _LOGGER.debug('Device does not support night light')\n        return False\n    if mode.lower() not in self.nightlight_modes:\n        _LOGGER.warning('Invalid nightlight mode used (on, off or dim)- %s', mode)\n        return False\n\n    r_dict = await self.call_bypassv2_api(\n        'setNightLight', {'night_light': mode.lower()}\n    )\n    r = Helpers.process_dev_response(_LOGGER, 'set_night_light', self, r_dict)\n    if r is None:\n        return False\n    self.state.connection_status = ConnectionStatus.ONLINE\n    self.state.nightlight_status = NightlightModes(mode.lower())\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.set_pet_mode","title":"set_pet_mode  <code>async</code>  \u21b2","text":"<pre><code>set_pet_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Pet Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_pet_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Pet Mode.\"\"\"\n    if PurifierModes.PET in self.modes:\n        return await self.set_mode(PurifierModes.PET)\n    logger.error('Pet mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.set_sleep_mode","title":"set_sleep_mode  <code>async</code>  \u21b2","text":"<pre><code>set_sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Sleep Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_sleep_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Sleep Mode.\"\"\"\n    if PurifierModes.SLEEP in self.modes:\n        return await self.set_mode(PurifierModes.SLEEP)\n    logger.error('Sleep mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    action = DeviceStatus.OFF  # No other actions available for this device\n    if action not in [DeviceStatus.ON, DeviceStatus.OFF]:\n        _LOGGER.debug('Invalid action for timer')\n        return False\n\n    method = 'powerSwitch'\n    action_int = 1 if action == DeviceStatus.ON else 0\n    action_item = PurifierV2TimerActionItems(type=method, act=action_int)\n    timing = PurifierV2EventTiming(clkSec=duration)\n    payload_data = PurifierV2TimerPayloadData(\n        enabled=True,\n        startAct=[action_item],\n        tmgEvt=timing,\n    )\n\n    r_dict = await self.call_bypassv2_api('addTimerV2', payload_data.to_dict())\n    r = Helpers.process_dev_response(_LOGGER, 'set_timer', self, r_dict)\n    if r is None:\n        return False\n\n    r_model = ResultV2SetTimer.from_dict(r)\n\n    self.state.timer = Timer(duration, action=action, id=r_model.id)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.set_turbo_mode","title":"set_turbo_mode  <code>async</code>  \u21b2","text":"<pre><code>set_turbo_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Turbo Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_turbo_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Turbo Mode.\"\"\"\n    if PurifierModes.TURBO in self.modes:\n        return await self.set_mode(PurifierModes.TURBO)\n    logger.error('Turbo mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.sleep_mode","title":"sleep_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_sleep_mode instead.</p> <p>Set Purifier to Sleep Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_sleep_mode instead.')\nasync def sleep_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Sleep Mode.\"\"\"\n    return await self.set_sleep_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.toggle_child_lock","title":"toggle_child_lock  <code>async</code>  \u21b2","text":"<pre><code>toggle_child_lock(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Toggle Child Lock (Display Lock).</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>Toggle child lock. If None, toggle state.</p> <code>None</code> <p>Toggle child lock.</p> <p>Set child lock to on or off. Internal method used by <code>turn_on_child_lock</code> and <code>turn_off_child_lock</code>.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>True to turn child lock on, False to turn off</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if child lock is set, False if not</p> <p>Levoit 100S/200S set Child Lock.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>True to turn child lock on, False to turn off</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False if not</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def toggle_child_lock(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Levoit 100S/200S set Child Lock.\n\n    Parameters:\n        toggle (bool): True to turn child lock on, False to turn off\n\n    Returns:\n        bool : True if successful, False if not\n    \"\"\"\n    if toggle is None:\n        toggle = not bool(self.state.child_lock)\n    payload_data = {'childLockSwitch': int(toggle)}\n    r_dict = await self.call_bypassv2_api('setChildLock', payload_data)\n\n    r = Helpers.process_dev_response(_LOGGER, 'toggle_child_lock', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.child_lock = toggle\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.toggle_display","title":"toggle_display  <code>async</code>  \u21b2","text":"<pre><code>toggle_display(mode: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Set Display Mode.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def toggle_display(self, mode: bool) -&gt; bool:\n    if bool(self.state.light_detection_status):\n        _LOGGER.error('Cannot set display when light detection is enabled')\n        return False\n\n    if bool(self.state.display_set_status) == mode:\n        _LOGGER.debug('Display is already %s', mode)\n        return True\n\n    payload_data = {'screenSwitch': int(mode)}\n    r_dict = await self.call_bypassv2_api('setDisplay', payload_data)\n\n    r = Helpers.process_dev_response(_LOGGER, 'set_display', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.display_set_status = DeviceStatus.from_bool(mode)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.toggle_light_detection","title":"toggle_light_detection  <code>async</code>  \u21b2","text":"<pre><code>toggle_light_detection(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Light Detection Mode.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>Toggle light detection. If None, toggle state.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> <p>Enable/Disable Light Detection Feature.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def toggle_light_detection(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Enable/Disable Light Detection Feature.\"\"\"\n    if bool(self.state.light_detection_status) == toggle:\n        _LOGGER.debug(\n            'Light detection is already %s', self.state.light_detection_status\n        )\n        return True\n\n    if toggle is None:\n        toggle = not bool(self.state.light_detection_status)\n    payload_data = {'lightDetectionSwitch': int(toggle)}\n    r_dict = await self.call_bypassv2_api('setLightDetection', payload_data)\n    r = Helpers.process_dev_response(_LOGGER, 'set_light_detection', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.light_detection_switch = DeviceStatus.from_bool(toggle)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncAirBypass</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = not bool(self.state.device_status)\n    if not isinstance(toggle, bool):\n        _LOGGER.debug('Invalid toggle value for purifier switch')\n        return False\n    if toggle == bool(self.state.device_status):\n        _LOGGER.debug('Purifier is already %s', self.state.device_status)\n        return True\n\n    payload_data = {'powerSwitch': int(toggle), 'switchIdx': 0}\n    r_dict = await self.call_bypassv2_api('setSwitch', payload_data)\n    r = Helpers.process_dev_response(_LOGGER, 'toggle_switch', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.device_status = DeviceStatus.from_bool(toggle)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.turbo_mode","title":"turbo_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>turbo_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_turbo_mode instead.</p> <p>Set Purifier to Turbo Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_turbo_mode instead.')\nasync def turbo_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Turbo Mode.\"\"\"\n    return await self.set_turbo_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.turn_off_child_lock","title":"turn_off_child_lock  <code>async</code>  \u21b2","text":"<pre><code>turn_off_child_lock() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set child lock (display lock) to OFF.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_child_lock(self) -&gt; bool:\n    \"\"\"Set child lock (display lock) to OFF.\"\"\"\n    return await self.toggle_child_lock(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.turn_off_display","title":"turn_off_display  <code>async</code>  \u21b2","text":"<pre><code>turn_off_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn off Display.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_display(self) -&gt; bool:\n    \"\"\"Turn off Display.\"\"\"\n    return await self.toggle_display(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.turn_off_light_detection","title":"turn_off_light_detection  <code>async</code>  \u21b2","text":"<pre><code>turn_off_light_detection() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn off Light Detection.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_light_detection(self) -&gt; bool:\n    \"\"\"Turn off Light Detection.\"\"\"\n    return await self.toggle_light_detection(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.turn_off_nightlight","title":"turn_off_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_off_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn off Nightlight.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_nightlight(self) -&gt; bool:\n    \"\"\"Turn off Nightlight.\"\"\"\n    return await self.set_nightlight_mode(NightlightModes.OFF)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.turn_on_child_lock","title":"turn_on_child_lock  <code>async</code>  \u21b2","text":"<pre><code>turn_on_child_lock() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set child lock (display lock) to ON.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_child_lock(self) -&gt; bool:\n    \"\"\"Set child lock (display lock) to ON.\"\"\"\n    return await self.toggle_child_lock(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.turn_on_display","title":"turn_on_display  <code>async</code>  \u21b2","text":"<pre><code>turn_on_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn on Display.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_display(self) -&gt; bool:\n    \"\"\"Turn on Display.\"\"\"\n    return await self.toggle_display(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.turn_on_light_detection","title":"turn_on_light_detection  <code>async</code>  \u21b2","text":"<pre><code>turn_on_light_detection() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn on Light Detection.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_light_detection(self) -&gt; bool:\n    \"\"\"Turn on Light Detection.\"\"\"\n    return await self.toggle_light_detection(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.turn_on_nightlight","title":"turn_on_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_on_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn on Nightlight.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_nightlight(self) -&gt; bool:\n    \"\"\"Turn on Nightlight.\"\"\"\n    return await self.set_nightlight_mode(NightlightModes.ON)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAirSprout.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131","title":"pyvesync.devices.vesyncpurifier.VeSyncAir131 \u21b2","text":"<p>               Bases: <code>BypassV1Mixin</code>, <code>VeSyncPurifier</code></p> <p>Levoit Air Purifier Class.</p> <p>Class for LV-PUR131S, using BypassV1 API.</p> <p>Attributes:</p> Name Type Description <code>state</code> <code>PurifierState</code> <p>State of the device.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <code>modes</code> <code>list[str]</code> <p>List of modes supported by the device.</p> <code>fan_levels</code> <code>list[int]</code> <p>List of fan levels supported by the device.</p> <code>nightlight_modes</code> <code>list[str]</code> <p>List of nightlight modes supported by the device.</p> <code>auto_preferences</code> <code>list[str]</code> <p>List of auto preferences supported by the device.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>class VeSyncAir131(BypassV1Mixin, VeSyncPurifier):\n    \"\"\"Levoit Air Purifier Class.\n\n    Class for LV-PUR131S, using BypassV1 API.\n\n    Attributes:\n        state (PurifierState): State of the device.\n        last_response (ResponseInfo): Last response from API call.\n        manager (VeSync): Manager object for API calls.\n        device_name (str): Name of device.\n        device_image (str): URL for device image.\n        cid (str): Device ID.\n        connection_type (str): Connection type of device.\n        device_type (str): Type of device.\n        type (str): Type of device.\n        uuid (str): UUID of device, not always present.\n        config_module (str): Configuration module of device.\n        mac_id (str): MAC ID of device.\n        current_firm_version (str): Current firmware version of device.\n        device_region (str): Region of device. (US, EU, etc.)\n        pid (str): Product ID of device, pulled by some devices on update.\n        sub_device_no (int): Sub-device number of device.\n        product_type (str): Product type of device.\n        features (dict): Features of device.\n        modes (list[str]): List of modes supported by the device.\n        fan_levels (list[int]): List of fan levels supported by the device.\n        nightlight_modes (list[str]): List of nightlight modes supported by the device.\n        auto_preferences (list[str]): List of auto preferences supported by the device.\n    \"\"\"\n\n    __slots__ = ()\n\n    def __init__(\n        self,\n        details: ResponseDeviceDetailsModel,\n        manager: VeSync,\n        feature_map: PurifierMap,\n    ) -&gt; None:\n        \"\"\"Initialize air purifier class.\"\"\"\n        super().__init__(details, manager, feature_map)\n\n    def _set_state(self, details: Purifier131Result) -&gt; None:\n        \"\"\"Set state from purifier API get_details() response.\"\"\"\n        self.state.device_status = details.deviceStatus\n        self.state.connection_status = details.connectionStatus\n        self.state.active_time = details.activeTime\n        self.state.filter_life = details.filterLife.percent\n        self.state.display_status = DeviceStatus(details.screenStatus)\n        self.state.display_set_status = details.screenStatus\n        self.state.child_lock = bool(DeviceStatus(details.childLock))\n        self.state.mode = details.mode\n        self.state.fan_level = details.level or 0\n        self.state.fan_set_level = details.level or 0\n        self.state.set_air_quality_level(details.airQuality)\n\n    async def get_details(self) -&gt; None:\n        r_dict = await self.call_bypassv1_api(\n            RequestPurifier131, method='deviceDetail', endpoint='deviceDetail'\n        )\n        r = Helpers.process_dev_response(_LOGGER, 'get_details', self, r_dict)\n        if r is None:\n            return\n\n        r_model = Purifier131Result.from_dict(r.get('result', {}))\n        self._set_state(r_model)\n\n    async def toggle_display(self, mode: bool) -&gt; bool:\n        update_dict = {'status': 'on' if mode else 'off'}\n        r_dict = await self.call_bypassv1_api(\n            RequestPurifier131,\n            method='airPurifierScreenCtl',\n            endpoint='airPurifierScreenCtl',\n            update_dict=update_dict,\n        )\n        r = Helpers.process_dev_response(_LOGGER, 'toggle_display', self, r_dict)\n        if r is None:\n            return False\n\n        self.state.display_set_status = DeviceStatus.from_bool(mode)\n        self.state.display_status = DeviceStatus.from_bool(mode)\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n        if toggle is None:\n            toggle = self.state.device_status != DeviceStatus.ON\n\n        update_dict = {'status': DeviceStatus.from_bool(toggle).value}\n        r_dict = await self.call_bypassv1_api(\n            RequestPurifier131,\n            method='airPurifierPowerSwitchCtl',\n            endpoint='airPurifierPowerSwitchCtl',\n            update_dict=update_dict,\n        )\n        r = Helpers.process_dev_response(_LOGGER, 'toggle_switch', self, r_dict)\n        if r is None:\n            return False\n\n        self.state.device_status = DeviceStatus.from_bool(toggle)\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def set_fan_speed(self, speed: int | None = None) -&gt; bool:\n        current_speed = self.state.fan_set_level or 0\n\n        if speed is not None:\n            if speed not in self.fan_levels:\n                _LOGGER.debug(\n                    '%s is invalid speed - valid speeds are %s',\n                    speed,\n                    str(self.fan_levels),\n                )\n                return False\n            new_speed = speed\n        else:\n            new_speed = Helpers.bump_level(current_speed, self.fan_levels)\n\n        update_dict = {'level': new_speed}\n        r_dict = await self.call_bypassv1_api(\n            RequestPurifier131Level,\n            method='airPurifierSpeedCtl',\n            endpoint='airPurifierSpeedCtl',\n            update_dict=update_dict,\n        )\n        r = Helpers.process_dev_response(_LOGGER, 'set_fan_speed', self, r_dict)\n        if r is None:\n            return False\n\n        self.state.fan_level = new_speed\n        self.state.fan_set_level = new_speed\n        self.state.connection_status = 'online'\n        self.state.mode = PurifierModes.MANUAL\n        return True\n\n    async def set_mode(self, mode: str) -&gt; bool:\n        if mode not in self.modes:\n            _LOGGER.debug('Invalid purifier mode used - %s', mode)\n            return False\n\n        if mode == PurifierModes.MANUAL:\n            set_level = (\n                1 if self.state.fan_set_level in [0, None] else self.state.fan_set_level\n            )\n            return await self.set_fan_speed(set_level)\n\n        update_dict = {'mode': mode}\n        r_dict = await self.call_bypassv1_api(\n            RequestPurifier131Mode,\n            method='airPurifierRunModeCtl',\n            endpoint='airPurifierRunModeCtl',\n            update_dict=update_dict,\n        )\n        r = Helpers.process_dev_response(_LOGGER, 'mode_toggle', self, r_dict)\n        if r is None:\n            return False\n\n        self.state.mode = mode\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.auto_preferences","title":"auto_preferences  <code>instance-attribute</code>  \u21b2","text":"<pre><code>auto_preferences: list[str] = auto_preferences\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.child_lock","title":"child_lock  <code>property</code>  \u21b2","text":"<pre><code>child_lock: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Get child lock state.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if child lock is enabled, False if not.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.fan_levels","title":"fan_levels  <code>instance-attribute</code>  \u21b2","text":"<pre><code>fan_levels: list[int] = fan_levels\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.modes","title":"modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>modes: list[str] = modes\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.night_light","title":"night_light  <code>property</code>  \u21b2","text":"<pre><code>night_light: str | None\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Get night light state.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str | None</code> <p>Night light state (on, dim, off)</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.nightlight_modes","title":"nightlight_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_modes: list[str] = nightlight_modes\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'uuid',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: PurifierState = PurifierState(\n    self, details, feature_map\n)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.supports_air_quality","title":"supports_air_quality  <code>property</code>  \u21b2","text":"<pre><code>supports_air_quality: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Return True if device supports air quality.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.supports_fan_rotate","title":"supports_fan_rotate  <code>property</code>  \u21b2","text":"<pre><code>supports_fan_rotate: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Return True if device supports fan rotation.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.supports_light_detection","title":"supports_light_detection  <code>property</code>  \u21b2","text":"<pre><code>supports_light_detection: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Returns True if device supports light detection.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.supports_nightlight","title":"supports_nightlight  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Return True if device supports nightlight.</p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131-functions","title":"Functions\u21b2","text":""},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.auto_mode","title":"auto_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>auto_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_auto_mode instead.</p> <p>Set Purifier to Auto Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_auto_mode instead.')\nasync def auto_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Auto Mode.\"\"\"\n    return await self.set_auto_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.call_bypassv1_api","title":"call_bypassv1_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv1_api(\n    request_model: type[RequestBypassV1],\n    update_dict: dict | None = None,\n    method: str = 'bypass',\n    endpoint: str = 'bypass',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p> <p>Send ByPass V1 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V1 API. The endpoint can be overridden with the <code>endpoint</code> argument.</p> <p>Parameters:</p> Name Type Description Default <code>request_model</code> <code>type[RequestBypassV1]</code> <p>The request model to use.</p> required <code>update_dict</code> <code>dict</code> <p>Additional keys to add on.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypass'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the url path, defaults to <code>bypass</code>, e.g. <code>/cloud/v1/deviceManaged/bypass</code>.</p> <code>'bypass'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv1_api(\n    self,\n    request_model: type[RequestBypassV1],\n    update_dict: dict | None = None,\n    method: str = 'bypass',\n    endpoint: str = 'bypass',\n) -&gt; dict | None:\n    \"\"\"Send ByPass V1 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V1 API.\n    The endpoint can be overridden with the `endpoint` argument.\n\n    Args:\n        request_model (type[RequestBypassV1]): The request model to use.\n        update_dict (dict): Additional keys to add on.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the url path, defaults to\n            `bypass`, e.g. `/cloud/v1/deviceManaged/bypass`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(request_model, update_dict, method)\n    url_path = BYPASS_V1_PATH + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        url_path, 'post', request, Helpers.req_header_bypass()\n    )\n\n    return resp_dict\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.change_fan_speed","title":"change_fan_speed  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>change_fan_speed(speed: int | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>set_fan_speed()</code> instead.</p> <p>Deprecated - Set fan speed.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `set_fan_speed()` instead.')\nasync def change_fan_speed(self, speed: int | None = None) -&gt; bool:\n    \"\"\"Deprecated - Set fan speed.\"\"\"\n    return await self.set_fan_speed(speed)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.change_mode","title":"change_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>change_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>set_mode(mode: str)</code> instead.</p> <p>Deprecated - Set purifier mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `set_mode(mode: str)` instead.')\nasync def change_mode(self, mode: str) -&gt; bool:\n    \"\"\"Deprecated - Set purifier mode.\"\"\"\n    return await self.set_mode(mode)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.child_lock_off","title":"child_lock_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>child_lock_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>turn_off_child_lock()</code> instead.</p> <p>Turn off child lock (display lock).</p> <p>This has been deprecated, use <code>turn_off_child_lock()</code> instead.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `turn_off_child_lock()` instead.')\nasync def child_lock_off(self) -&gt; bool:\n    \"\"\"Turn off child lock (display lock).\n\n    This has been deprecated, use `turn_off_child_lock()` instead.\n    \"\"\"\n    return await self.toggle_child_lock(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.child_lock_on","title":"child_lock_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>child_lock_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>turn_on_child_lock()</code> instead.</p> <p>Turn on child lock (display lock).</p> <p>This has been deprecated, use <code>turn_on_child_lock()</code> instead.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `turn_on_child_lock()` instead.')\nasync def child_lock_on(self) -&gt; bool:\n    \"\"\"Turn on child lock (display lock).\n\n    This has been deprecated, use `turn_on_child_lock()` instead.\n    \"\"\"\n    return await self.toggle_child_lock(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    \"\"\"Clear timer for device from API.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    logger.debug('Not implemented - clear_timer')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def get_details(self) -&gt; None:\n    r_dict = await self.call_bypassv1_api(\n        RequestPurifier131, method='deviceDetail', endpoint='deviceDetail'\n    )\n    r = Helpers.process_dev_response(_LOGGER, 'get_details', self, r_dict)\n    if r is None:\n        return\n\n    r_model = Purifier131Result.from_dict(r.get('result', {}))\n    self._set_state(r_model)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    \"\"\"Get timer for device from API and set the `state.Timer` attribute.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Note:\n        This method may not be implemented for all devices. Please\n        open an issue if there is an error.\n    \"\"\"\n    logger.debug('Not implemented - get_timer')\n    return None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.manual_mode","title":"manual_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_manual_mode instead.</p> <p>Set Purifier to Manual Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_manual_mode instead.')\nasync def manual_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Manual Mode.\"\"\"\n    return await self.set_manual_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.nightlight_mode","title":"nightlight_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>nightlight_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_nightlight_mode instead.</p> <p>Set Nightlight Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_nightlight_mode instead.')\nasync def nightlight_mode(self, mode: str) -&gt; bool:\n    \"\"\"Set Nightlight Mode.\"\"\"\n    return await self.set_nightlight_mode(mode)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.pet_mode","title":"pet_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>pet_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_pet_mode instead.</p> <p>Set Purifier to Pet Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_pet_mode instead.')\nasync def pet_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Pet Mode.\"\"\"\n    return await self.set_pet_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.reset_filter","title":"reset_filter  <code>async</code>  \u21b2","text":"<pre><code>reset_filter() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Reset filter life.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def reset_filter(self) -&gt; bool:\n    \"\"\"Reset filter life.\"\"\"\n    logger.debug('Filter life reset not configured for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.set_auto_mode","title":"set_auto_mode  <code>async</code>  \u21b2","text":"<pre><code>set_auto_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Auto Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_auto_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Auto Mode.\"\"\"\n    if PurifierModes.AUTO in self.modes:\n        return await self.set_mode(PurifierModes.AUTO)\n    logger.error('Auto mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.set_auto_preference","title":"set_auto_preference  <code>async</code>  \u21b2","text":"<pre><code>set_auto_preference(\n    preference: str, room_size: int = 800\n) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set auto preference.</p> <p>Parameters:</p> Name Type Description Default <code>preference</code> <code>str</code> <p>Auto preference to set, available preference is found in <code>self.auto_preferences</code>.</p> required <code>room_size</code> <code>int</code> <p>Room size to set, defaults to 800ft2.</p> <code>800</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_auto_preference(self, preference: str, room_size: int = 800) -&gt; bool:\n    \"\"\"Set auto preference.\n\n    Args:\n        preference (str): Auto preference to set, available preference is\n            found in `self.auto_preferences`.\n        room_size (int): Room size to set, defaults to 800ft2.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del preference, room_size\n    logger.debug('Auto preference not configured for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.set_child_lock","title":"set_child_lock  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_child_lock(toggle: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>toggle_child_lock()</code> instead.</p> <p>Set child lock (display lock).</p> <p>This has been deprecated in favor of <code>toggle_child_lock()</code>.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `toggle_child_lock()` instead.')\nasync def set_child_lock(self, toggle: bool) -&gt; bool:\n    \"\"\"Set child lock (display lock).\n\n    This has been deprecated in favor of `toggle_child_lock()`.\n    \"\"\"\n    return await self.toggle_child_lock(toggle)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.set_fan_speed","title":"set_fan_speed  <code>async</code>  \u21b2","text":"<pre><code>set_fan_speed(speed: int | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier Fan Speed.</p> <p>Parameters:</p> Name Type Description Default <code>speed</code> <code>int | None</code> <p>Fan speed to set. If None, use default speed.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def set_fan_speed(self, speed: int | None = None) -&gt; bool:\n    current_speed = self.state.fan_set_level or 0\n\n    if speed is not None:\n        if speed not in self.fan_levels:\n            _LOGGER.debug(\n                '%s is invalid speed - valid speeds are %s',\n                speed,\n                str(self.fan_levels),\n            )\n            return False\n        new_speed = speed\n    else:\n        new_speed = Helpers.bump_level(current_speed, self.fan_levels)\n\n    update_dict = {'level': new_speed}\n    r_dict = await self.call_bypassv1_api(\n        RequestPurifier131Level,\n        method='airPurifierSpeedCtl',\n        endpoint='airPurifierSpeedCtl',\n        update_dict=update_dict,\n    )\n    r = Helpers.process_dev_response(_LOGGER, 'set_fan_speed', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.fan_level = new_speed\n    self.state.fan_set_level = new_speed\n    self.state.connection_status = 'online'\n    self.state.mode = PurifierModes.MANUAL\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.set_light_detection_off","title":"set_light_detection_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_light_detection_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use turn_off_light_detection() instead.</p> <p>Turn off light detection feature.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use turn_off_light_detection() instead.')\nasync def set_light_detection_off(self) -&gt; bool:\n    \"\"\"Turn off light detection feature.\"\"\"\n    return await self.toggle_light_detection(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.set_light_detection_on","title":"set_light_detection_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_light_detection_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use turn_on_light_detection() instead.</p> <p>Turn on light detection feature.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use turn_on_light_detection() instead.')\nasync def set_light_detection_on(self) -&gt; bool:\n    \"\"\"Turn on light detection feature.\"\"\"\n    return await self.toggle_light_detection(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.set_manual_mode","title":"set_manual_mode  <code>async</code>  \u21b2","text":"<pre><code>set_manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Manual Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_manual_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Manual Mode.\"\"\"\n    if PurifierModes.MANUAL in self.modes:\n        return await self.set_mode(PurifierModes.MANUAL)\n    logger.error('Manual mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.set_mode","title":"set_mode  <code>async</code>  \u21b2","text":"<pre><code>set_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier Mode.</p> <p>Allowed modes are found in the <code>device.modes</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def set_mode(self, mode: str) -&gt; bool:\n    if mode not in self.modes:\n        _LOGGER.debug('Invalid purifier mode used - %s', mode)\n        return False\n\n    if mode == PurifierModes.MANUAL:\n        set_level = (\n            1 if self.state.fan_set_level in [0, None] else self.state.fan_set_level\n        )\n        return await self.set_fan_speed(set_level)\n\n    update_dict = {'mode': mode}\n    r_dict = await self.call_bypassv1_api(\n        RequestPurifier131Mode,\n        method='airPurifierRunModeCtl',\n        endpoint='airPurifierRunModeCtl',\n        update_dict=update_dict,\n    )\n    r = Helpers.process_dev_response(_LOGGER, 'mode_toggle', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.mode = mode\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.set_nightlight_dim","title":"set_nightlight_dim  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_dim() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Nightlight Dim.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_nightlight_dim(self) -&gt; bool:\n    \"\"\"Set Nightlight Dim.\"\"\"\n    return await self.set_nightlight_mode(NightlightModes.DIM)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.set_nightlight_mode","title":"set_nightlight_mode  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Nightlight Mode.</p> <p>Modes are defined in the <code>device.nightlight_modes</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Nightlight mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_nightlight_mode(self, mode: str) -&gt; bool:\n    \"\"\"Set Nightlight Mode.\n\n    Modes are defined in the `device.nightlight_modes` attribute.\n\n    Args:\n        mode (str): Nightlight mode to set.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del mode\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.set_pet_mode","title":"set_pet_mode  <code>async</code>  \u21b2","text":"<pre><code>set_pet_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Pet Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_pet_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Pet Mode.\"\"\"\n    if PurifierModes.PET in self.modes:\n        return await self.set_mode(PurifierModes.PET)\n    logger.error('Pet mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.set_sleep_mode","title":"set_sleep_mode  <code>async</code>  \u21b2","text":"<pre><code>set_sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Sleep Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_sleep_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Sleep Mode.\"\"\"\n    if PurifierModes.SLEEP in self.modes:\n        return await self.set_mode(PurifierModes.SLEEP)\n    logger.error('Sleep mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    \"\"\"Set timer for device.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Args:\n        duration (int): Duration in seconds.\n        action (str | None): Action to take when timer expires.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del duration\n    del action\n    logger.debug('Not implemented - set_timer')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.set_turbo_mode","title":"set_turbo_mode  <code>async</code>  \u21b2","text":"<pre><code>set_turbo_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Turbo Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_turbo_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Turbo Mode.\"\"\"\n    if PurifierModes.TURBO in self.modes:\n        return await self.set_mode(PurifierModes.TURBO)\n    logger.error('Turbo mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.sleep_mode","title":"sleep_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_sleep_mode instead.</p> <p>Set Purifier to Sleep Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_sleep_mode instead.')\nasync def sleep_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Sleep Mode.\"\"\"\n    return await self.set_sleep_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.toggle_child_lock","title":"toggle_child_lock  <code>async</code>  \u21b2","text":"<pre><code>toggle_child_lock(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Toggle Child Lock (Display Lock).</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>Toggle child lock. If None, toggle state.</p> <code>None</code> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def toggle_child_lock(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Toggle Child Lock (Display Lock).\n\n    Args:\n        toggle (bool | None): Toggle child lock. If None, toggle state.\n    \"\"\"\n    del toggle\n    logger.debug('Child lock not configured for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.toggle_display","title":"toggle_display  <code>async</code>  \u21b2","text":"<pre><code>toggle_display(mode: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Display Mode.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def toggle_display(self, mode: bool) -&gt; bool:\n    update_dict = {'status': 'on' if mode else 'off'}\n    r_dict = await self.call_bypassv1_api(\n        RequestPurifier131,\n        method='airPurifierScreenCtl',\n        endpoint='airPurifierScreenCtl',\n        update_dict=update_dict,\n    )\n    r = Helpers.process_dev_response(_LOGGER, 'toggle_display', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.display_set_status = DeviceStatus.from_bool(mode)\n    self.state.display_status = DeviceStatus.from_bool(mode)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.toggle_light_detection","title":"toggle_light_detection  <code>async</code>  \u21b2","text":"<pre><code>toggle_light_detection(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Light Detection Mode.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>Toggle light detection. If None, toggle state.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def toggle_light_detection(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Set Light Detection Mode.\n\n    Args:\n        toggle (bool | None): Toggle light detection. If None, toggle state.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del toggle\n    if not self.supports_light_detection:\n        logger.debug('Light detection not supported for this device.')\n    else:\n        logger.debug('Light detection not configured for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncpurifier.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.device_status != DeviceStatus.ON\n\n    update_dict = {'status': DeviceStatus.from_bool(toggle).value}\n    r_dict = await self.call_bypassv1_api(\n        RequestPurifier131,\n        method='airPurifierPowerSwitchCtl',\n        endpoint='airPurifierPowerSwitchCtl',\n        update_dict=update_dict,\n    )\n    r = Helpers.process_dev_response(_LOGGER, 'toggle_switch', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.device_status = DeviceStatus.from_bool(toggle)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.turbo_mode","title":"turbo_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>turbo_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_turbo_mode instead.</p> <p>Set Purifier to Turbo Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_turbo_mode instead.')\nasync def turbo_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Turbo Mode.\"\"\"\n    return await self.set_turbo_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.turn_off_child_lock","title":"turn_off_child_lock  <code>async</code>  \u21b2","text":"<pre><code>turn_off_child_lock() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set child lock (display lock) to OFF.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_child_lock(self) -&gt; bool:\n    \"\"\"Set child lock (display lock) to OFF.\"\"\"\n    return await self.toggle_child_lock(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.turn_off_display","title":"turn_off_display  <code>async</code>  \u21b2","text":"<pre><code>turn_off_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn off Display.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_display(self) -&gt; bool:\n    \"\"\"Turn off Display.\"\"\"\n    return await self.toggle_display(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.turn_off_light_detection","title":"turn_off_light_detection  <code>async</code>  \u21b2","text":"<pre><code>turn_off_light_detection() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn off Light Detection.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_light_detection(self) -&gt; bool:\n    \"\"\"Turn off Light Detection.\"\"\"\n    return await self.toggle_light_detection(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.turn_off_nightlight","title":"turn_off_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_off_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn off Nightlight.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_nightlight(self) -&gt; bool:\n    \"\"\"Turn off Nightlight.\"\"\"\n    return await self.set_nightlight_mode(NightlightModes.OFF)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.turn_on_child_lock","title":"turn_on_child_lock  <code>async</code>  \u21b2","text":"<pre><code>turn_on_child_lock() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set child lock (display lock) to ON.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_child_lock(self) -&gt; bool:\n    \"\"\"Set child lock (display lock) to ON.\"\"\"\n    return await self.toggle_child_lock(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.turn_on_display","title":"turn_on_display  <code>async</code>  \u21b2","text":"<pre><code>turn_on_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn on Display.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_display(self) -&gt; bool:\n    \"\"\"Turn on Display.\"\"\"\n    return await self.toggle_display(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.turn_on_light_detection","title":"turn_on_light_detection  <code>async</code>  \u21b2","text":"<pre><code>turn_on_light_detection() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn on Light Detection.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_light_detection(self) -&gt; bool:\n    \"\"\"Turn on Light Detection.\"\"\"\n    return await self.toggle_light_detection(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.turn_on_nightlight","title":"turn_on_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_on_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn on Nightlight.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_nightlight(self) -&gt; bool:\n    \"\"\"Turn on Nightlight.\"\"\"\n    return await self.set_nightlight_mode(NightlightModes.ON)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.devices.vesyncpurifier.VeSyncAir131.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier","title":"pyvesync.base_devices.purifier_base.VeSyncPurifier \u21b2","text":"<p>               Bases: <code>VeSyncBaseToggleDevice</code></p> <p>Base device for vesync air purifiers.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>Device details from API.</p> required <code>manager</code> <code>VeSync</code> <p>VeSync manager instance.</p> required <code>feature_map</code> <code>PurifierMap</code> <p>Feature map for the device.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>PurifierState</code> <p>State of the device.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <code>modes</code> <code>list[str]</code> <p>List of modes supported by the device.</p> <code>fan_levels</code> <code>list[int]</code> <p>List of fan levels supported by the device.</p> <code>nightlight_modes</code> <code>list[str]</code> <p>List of nightlight modes supported by the device.</p> <code>auto_preferences</code> <code>list[str]</code> <p>List of auto preferences supported by the device.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>class VeSyncPurifier(VeSyncBaseToggleDevice):\n    \"\"\"Base device for vesync air purifiers.\n\n    Args:\n        details (ResponseDeviceDetailsModel): Device details from API.\n        manager (VeSync): VeSync manager instance.\n        feature_map (PurifierMap): Feature map for the device.\n\n    Attributes:\n        state (PurifierState): State of the device.\n        last_response (ResponseInfo): Last response from API call.\n        manager (VeSync): Manager object for API calls.\n        device_name (str): Name of device.\n        device_image (str): URL for device image.\n        cid (str): Device ID.\n        connection_type (str): Connection type of device.\n        device_type (str): Type of device.\n        type (str): Type of device.\n        uuid (str): UUID of device, not always present.\n        config_module (str): Configuration module of device.\n        mac_id (str): MAC ID of device.\n        current_firm_version (str): Current firmware version of device.\n        device_region (str): Region of device. (US, EU, etc.)\n        pid (str): Product ID of device, pulled by some devices on update.\n        sub_device_no (int): Sub-device number of device.\n        product_type (str): Product type of device.\n        features (dict): Features of device.\n        modes (list[str]): List of modes supported by the device.\n        fan_levels (list[int]): List of fan levels supported by the device.\n        nightlight_modes (list[str]): List of nightlight modes supported by the device.\n        auto_preferences (list[str]): List of auto preferences supported by the device.\n    \"\"\"\n\n    __slots__ = ('auto_preferences', 'fan_levels', 'modes', 'nightlight_modes')\n\n    def __init__(\n        self,\n        details: ResponseDeviceDetailsModel,\n        manager: VeSync,\n        feature_map: PurifierMap,\n    ) -&gt; None:\n        \"\"\"Initialize VeSync Purifier Base Class.\"\"\"\n        super().__init__(details, manager, feature_map)\n        self.features: list[str] = feature_map.features\n        self.state: PurifierState = PurifierState(self, details, feature_map)\n        self.modes: list[str] = feature_map.modes\n        self.fan_levels: list[int] = feature_map.fan_levels\n        self.nightlight_modes: list[str] = feature_map.nightlight_modes\n        self.auto_preferences: list[str] = feature_map.auto_preferences\n\n    @property\n    def supports_air_quality(self) -&gt; bool:\n        \"\"\"Return True if device supports air quality.\"\"\"\n        return PurifierFeatures.AIR_QUALITY in self.features\n\n    @property\n    def supports_fan_rotate(self) -&gt; bool:\n        \"\"\"Return True if device supports fan rotation.\"\"\"\n        return PurifierFeatures.VENT_ANGLE in self.features\n\n    @property\n    def supports_nightlight(self) -&gt; bool:\n        \"\"\"Return True if device supports nightlight.\"\"\"\n        return PurifierFeatures.NIGHTLIGHT in self.features\n\n    @property\n    def supports_light_detection(self) -&gt; bool:\n        \"\"\"Returns True if device supports light detection.\"\"\"\n        return PurifierFeatures.LIGHT_DETECT in self.features\n\n    async def toggle_display(self, mode: bool) -&gt; bool:\n        \"\"\"Set Display Mode.\"\"\"\n        del mode\n        raise NotImplementedError\n\n    async def turn_on_display(self) -&gt; bool:\n        \"\"\"Turn on Display.\"\"\"\n        return await self.toggle_display(True)\n\n    async def turn_off_display(self) -&gt; bool:\n        \"\"\"Turn off Display.\"\"\"\n        return await self.toggle_display(False)\n\n    async def set_nightlight_mode(self, mode: str) -&gt; bool:\n        \"\"\"Set Nightlight Mode.\n\n        Modes are defined in the `device.nightlight_modes` attribute.\n\n        Args:\n            mode (str): Nightlight mode to set.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        del mode\n        return False\n\n    async def set_nightlight_dim(self) -&gt; bool:\n        \"\"\"Set Nightlight Dim.\"\"\"\n        return await self.set_nightlight_mode(NightlightModes.DIM)\n\n    async def turn_on_nightlight(self) -&gt; bool:\n        \"\"\"Turn on Nightlight.\"\"\"\n        return await self.set_nightlight_mode(NightlightModes.ON)\n\n    async def turn_off_nightlight(self) -&gt; bool:\n        \"\"\"Turn off Nightlight.\"\"\"\n        return await self.set_nightlight_mode(NightlightModes.OFF)\n\n    async def toggle_child_lock(self, toggle: bool | None = None) -&gt; bool:\n        \"\"\"Toggle Child Lock (Display Lock).\n\n        Args:\n            toggle (bool | None): Toggle child lock. If None, toggle state.\n        \"\"\"\n        del toggle\n        logger.debug('Child lock not configured for this device.')\n        return False\n\n    async def turn_on_child_lock(self) -&gt; bool:\n        \"\"\"Set child lock (display lock) to ON.\"\"\"\n        return await self.toggle_child_lock(True)\n\n    async def turn_off_child_lock(self) -&gt; bool:\n        \"\"\"Set child lock (display lock) to OFF.\"\"\"\n        return await self.toggle_child_lock(False)\n\n    @abstractmethod\n    async def set_mode(self, mode: str) -&gt; bool:\n        \"\"\"Set Purifier Mode.\n\n        Allowed modes are found in the `device.modes` attribute.\n\n        Args:\n            mode (str): Mode to set.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n\n    @abstractmethod\n    async def set_fan_speed(self, speed: int | None = None) -&gt; bool:\n        \"\"\"Set Purifier Fan Speed.\n\n        Args:\n            speed (int | None): Fan speed to set. If None, use default speed.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n\n    async def set_auto_mode(self) -&gt; bool:\n        \"\"\"Set Purifier to Auto Mode.\"\"\"\n        if PurifierModes.AUTO in self.modes:\n            return await self.set_mode(PurifierModes.AUTO)\n        logger.error('Auto mode not supported for this device.')\n        return False\n\n    async def set_sleep_mode(self) -&gt; bool:\n        \"\"\"Set Purifier to Sleep Mode.\"\"\"\n        if PurifierModes.SLEEP in self.modes:\n            return await self.set_mode(PurifierModes.SLEEP)\n        logger.error('Sleep mode not supported for this device.')\n        return False\n\n    async def set_manual_mode(self) -&gt; bool:\n        \"\"\"Set Purifier to Manual Mode.\"\"\"\n        if PurifierModes.MANUAL in self.modes:\n            return await self.set_mode(PurifierModes.MANUAL)\n        logger.error('Manual mode not supported for this device.')\n        return False\n\n    async def set_turbo_mode(self) -&gt; bool:\n        \"\"\"Set Purifier to Turbo Mode.\"\"\"\n        if PurifierModes.TURBO in self.modes:\n            return await self.set_mode(PurifierModes.TURBO)\n        logger.error('Turbo mode not supported for this device.')\n        return False\n\n    async def set_pet_mode(self) -&gt; bool:\n        \"\"\"Set Purifier to Pet Mode.\"\"\"\n        if PurifierModes.PET in self.modes:\n            return await self.set_mode(PurifierModes.PET)\n        logger.error('Pet mode not supported for this device.')\n        return False\n\n    async def set_auto_preference(self, preference: str, room_size: int = 800) -&gt; bool:\n        \"\"\"Set auto preference.\n\n        Args:\n            preference (str): Auto preference to set, available preference is\n                found in `self.auto_preferences`.\n            room_size (int): Room size to set, defaults to 800ft2.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        del preference, room_size\n        logger.debug('Auto preference not configured for this device.')\n        return False\n\n    async def toggle_light_detection(self, toggle: bool | None = None) -&gt; bool:\n        \"\"\"Set Light Detection Mode.\n\n        Args:\n            toggle (bool | None): Toggle light detection. If None, toggle state.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        del toggle\n        if not self.supports_light_detection:\n            logger.debug('Light detection not supported for this device.')\n        else:\n            logger.debug('Light detection not configured for this device.')\n        return False\n\n    async def turn_on_light_detection(self) -&gt; bool:\n        \"\"\"Turn on Light Detection.\"\"\"\n        return await self.toggle_light_detection(True)\n\n    async def turn_off_light_detection(self) -&gt; bool:\n        \"\"\"Turn off Light Detection.\"\"\"\n        return await self.toggle_light_detection(False)\n\n    async def reset_filter(self) -&gt; bool:\n        \"\"\"Reset filter life.\"\"\"\n        logger.debug('Filter life reset not configured for this device.')\n        return False\n\n    @deprecated('Use set_auto_mode instead.')\n    async def auto_mode(self) -&gt; bool:\n        \"\"\"Set Purifier to Auto Mode.\"\"\"\n        return await self.set_auto_mode()\n\n    @deprecated('Use set_sleep_mode instead.')\n    async def sleep_mode(self) -&gt; bool:\n        \"\"\"Set Purifier to Sleep Mode.\"\"\"\n        return await self.set_sleep_mode()\n\n    @deprecated('Use set_manual_mode instead.')\n    async def manual_mode(self) -&gt; bool:\n        \"\"\"Set Purifier to Manual Mode.\"\"\"\n        return await self.set_manual_mode()\n\n    @deprecated('Use set_turbo_mode instead.')\n    async def turbo_mode(self) -&gt; bool:\n        \"\"\"Set Purifier to Turbo Mode.\"\"\"\n        return await self.set_turbo_mode()\n\n    @deprecated('Use set_pet_mode instead.')\n    async def pet_mode(self) -&gt; bool:\n        \"\"\"Set Purifier to Pet Mode.\"\"\"\n        return await self.set_pet_mode()\n\n    @deprecated('Use set_nightlight_mode instead.')\n    async def nightlight_mode(self, mode: str) -&gt; bool:\n        \"\"\"Set Nightlight Mode.\"\"\"\n        return await self.set_nightlight_mode(mode)\n\n    @deprecated('Use `set_fan_speed()` instead.')\n    async def change_fan_speed(self, speed: int | None = None) -&gt; bool:\n        \"\"\"Deprecated - Set fan speed.\"\"\"\n        return await self.set_fan_speed(speed)\n\n    @deprecated('Use `set_mode(mode: str)` instead.')\n    async def change_mode(self, mode: str) -&gt; bool:\n        \"\"\"Deprecated - Set purifier mode.\"\"\"\n        return await self.set_mode(mode)\n\n    @deprecated('Use `toggle_child_lock()` instead.')\n    async def set_child_lock(self, toggle: bool) -&gt; bool:\n        \"\"\"Set child lock (display lock).\n\n        This has been deprecated in favor of `toggle_child_lock()`.\n        \"\"\"\n        return await self.toggle_child_lock(toggle)\n\n    @deprecated('Use `turn_on_child_lock()` instead.')\n    async def child_lock_on(self) -&gt; bool:\n        \"\"\"Turn on child lock (display lock).\n\n        This has been deprecated, use `turn_on_child_lock()` instead.\n        \"\"\"\n        return await self.toggle_child_lock(True)\n\n    @deprecated('Use `turn_off_child_lock()` instead.')\n    async def child_lock_off(self) -&gt; bool:\n        \"\"\"Turn off child lock (display lock).\n\n        This has been deprecated, use `turn_off_child_lock()` instead.\n        \"\"\"\n        return await self.toggle_child_lock(False)\n\n    @property\n    @deprecated('Use self.state.child_lock instead.')\n    def child_lock(self) -&gt; bool:\n        \"\"\"Get child lock state.\n\n        Returns:\n            bool : True if child lock is enabled, False if not.\n        \"\"\"\n        return self.state.child_lock\n\n    @property\n    @deprecated('Use self.state.nightlight_status instead.')\n    def night_light(self) -&gt; str | None:\n        \"\"\"Get night light state.\n\n        Returns:\n            str : Night light state (on, dim, off)\n        \"\"\"\n        return self.state.nightlight_status\n\n    @deprecated('Use turn_on_light_detection() instead.')\n    async def set_light_detection_on(self) -&gt; bool:\n        \"\"\"Turn on light detection feature.\"\"\"\n        return await self.toggle_light_detection(True)\n\n    @deprecated('Use turn_off_light_detection() instead.')\n    async def set_light_detection_off(self) -&gt; bool:\n        \"\"\"Turn off light detection feature.\"\"\"\n        return await self.toggle_light_detection(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.auto_preferences","title":"auto_preferences  <code>instance-attribute</code>  \u21b2","text":"<pre><code>auto_preferences: list[str] = auto_preferences\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.child_lock","title":"child_lock  <code>property</code>  \u21b2","text":"<pre><code>child_lock: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Get child lock state.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if child lock is enabled, False if not.</p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.fan_levels","title":"fan_levels  <code>instance-attribute</code>  \u21b2","text":"<pre><code>fan_levels: list[int] = fan_levels\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager = manager\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.modes","title":"modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>modes: list[str] = modes\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.night_light","title":"night_light  <code>property</code>  \u21b2","text":"<pre><code>night_light: str | None\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Get night light state.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str | None</code> <p>Night light state (on, dim, off)</p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.nightlight_modes","title":"nightlight_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_modes: list[str] = nightlight_modes\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: PurifierState = PurifierState(\n    self, details, feature_map\n)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.supports_air_quality","title":"supports_air_quality  <code>property</code>  \u21b2","text":"<pre><code>supports_air_quality: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Return True if device supports air quality.</p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.supports_fan_rotate","title":"supports_fan_rotate  <code>property</code>  \u21b2","text":"<pre><code>supports_fan_rotate: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Return True if device supports fan rotation.</p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.supports_light_detection","title":"supports_light_detection  <code>property</code>  \u21b2","text":"<pre><code>supports_light_detection: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Returns True if device supports light detection.</p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.supports_nightlight","title":"supports_nightlight  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight: bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Return True if device supports nightlight.</p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier-functions","title":"Functions\u21b2","text":""},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.auto_mode","title":"auto_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>auto_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_auto_mode instead.</p> <p>Set Purifier to Auto Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_auto_mode instead.')\nasync def auto_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Auto Mode.\"\"\"\n    return await self.set_auto_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.change_fan_speed","title":"change_fan_speed  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>change_fan_speed(speed: int | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>set_fan_speed()</code> instead.</p> <p>Deprecated - Set fan speed.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `set_fan_speed()` instead.')\nasync def change_fan_speed(self, speed: int | None = None) -&gt; bool:\n    \"\"\"Deprecated - Set fan speed.\"\"\"\n    return await self.set_fan_speed(speed)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.change_mode","title":"change_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>change_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>set_mode(mode: str)</code> instead.</p> <p>Deprecated - Set purifier mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `set_mode(mode: str)` instead.')\nasync def change_mode(self, mode: str) -&gt; bool:\n    \"\"\"Deprecated - Set purifier mode.\"\"\"\n    return await self.set_mode(mode)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.child_lock_off","title":"child_lock_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>child_lock_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>turn_off_child_lock()</code> instead.</p> <p>Turn off child lock (display lock).</p> <p>This has been deprecated, use <code>turn_off_child_lock()</code> instead.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `turn_off_child_lock()` instead.')\nasync def child_lock_off(self) -&gt; bool:\n    \"\"\"Turn off child lock (display lock).\n\n    This has been deprecated, use `turn_off_child_lock()` instead.\n    \"\"\"\n    return await self.toggle_child_lock(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.child_lock_on","title":"child_lock_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>child_lock_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>turn_on_child_lock()</code> instead.</p> <p>Turn on child lock (display lock).</p> <p>This has been deprecated, use <code>turn_on_child_lock()</code> instead.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `turn_on_child_lock()` instead.')\nasync def child_lock_on(self) -&gt; bool:\n    \"\"\"Turn on child lock (display lock).\n\n    This has been deprecated, use `turn_on_child_lock()` instead.\n    \"\"\"\n    return await self.toggle_child_lock(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    \"\"\"Clear timer for device from API.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    logger.debug('Not implemented - clear_timer')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.get_details","title":"get_details  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>@abstractmethod\nasync def get_details(self) -&gt; None:\n    \"\"\"Get device details.\n\n    This method is defined in each device class to contain\n    the logic to pull the device state from the API and update\n    the device's `state` attribute. The `update()` method should\n    be called to update the device state.\n    \"\"\"\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    \"\"\"Get timer for device from API and set the `state.Timer` attribute.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Note:\n        This method may not be implemented for all devices. Please\n        open an issue if there is an error.\n    \"\"\"\n    logger.debug('Not implemented - get_timer')\n    return None\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.manual_mode","title":"manual_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_manual_mode instead.</p> <p>Set Purifier to Manual Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_manual_mode instead.')\nasync def manual_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Manual Mode.\"\"\"\n    return await self.set_manual_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.nightlight_mode","title":"nightlight_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>nightlight_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_nightlight_mode instead.</p> <p>Set Nightlight Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_nightlight_mode instead.')\nasync def nightlight_mode(self, mode: str) -&gt; bool:\n    \"\"\"Set Nightlight Mode.\"\"\"\n    return await self.set_nightlight_mode(mode)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.pet_mode","title":"pet_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>pet_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_pet_mode instead.</p> <p>Set Purifier to Pet Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_pet_mode instead.')\nasync def pet_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Pet Mode.\"\"\"\n    return await self.set_pet_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.reset_filter","title":"reset_filter  <code>async</code>  \u21b2","text":"<pre><code>reset_filter() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Reset filter life.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def reset_filter(self) -&gt; bool:\n    \"\"\"Reset filter life.\"\"\"\n    logger.debug('Filter life reset not configured for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.set_auto_mode","title":"set_auto_mode  <code>async</code>  \u21b2","text":"<pre><code>set_auto_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Auto Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_auto_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Auto Mode.\"\"\"\n    if PurifierModes.AUTO in self.modes:\n        return await self.set_mode(PurifierModes.AUTO)\n    logger.error('Auto mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.set_auto_preference","title":"set_auto_preference  <code>async</code>  \u21b2","text":"<pre><code>set_auto_preference(\n    preference: str, room_size: int = 800\n) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set auto preference.</p> <p>Parameters:</p> Name Type Description Default <code>preference</code> <code>str</code> <p>Auto preference to set, available preference is found in <code>self.auto_preferences</code>.</p> required <code>room_size</code> <code>int</code> <p>Room size to set, defaults to 800ft2.</p> <code>800</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_auto_preference(self, preference: str, room_size: int = 800) -&gt; bool:\n    \"\"\"Set auto preference.\n\n    Args:\n        preference (str): Auto preference to set, available preference is\n            found in `self.auto_preferences`.\n        room_size (int): Room size to set, defaults to 800ft2.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del preference, room_size\n    logger.debug('Auto preference not configured for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.set_child_lock","title":"set_child_lock  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_child_lock(toggle: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use <code>toggle_child_lock()</code> instead.</p> <p>Set child lock (display lock).</p> <p>This has been deprecated in favor of <code>toggle_child_lock()</code>.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use `toggle_child_lock()` instead.')\nasync def set_child_lock(self, toggle: bool) -&gt; bool:\n    \"\"\"Set child lock (display lock).\n\n    This has been deprecated in favor of `toggle_child_lock()`.\n    \"\"\"\n    return await self.toggle_child_lock(toggle)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.set_fan_speed","title":"set_fan_speed  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>set_fan_speed(speed: int | None = None) -&gt; bool\n</code></pre> <p>Set Purifier Fan Speed.</p> <p>Parameters:</p> Name Type Description Default <code>speed</code> <code>int | None</code> <p>Fan speed to set. If None, use default speed.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@abstractmethod\nasync def set_fan_speed(self, speed: int | None = None) -&gt; bool:\n    \"\"\"Set Purifier Fan Speed.\n\n    Args:\n        speed (int | None): Fan speed to set. If None, use default speed.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.set_light_detection_off","title":"set_light_detection_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_light_detection_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use turn_off_light_detection() instead.</p> <p>Turn off light detection feature.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use turn_off_light_detection() instead.')\nasync def set_light_detection_off(self) -&gt; bool:\n    \"\"\"Turn off light detection feature.\"\"\"\n    return await self.toggle_light_detection(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.set_light_detection_on","title":"set_light_detection_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_light_detection_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use turn_on_light_detection() instead.</p> <p>Turn on light detection feature.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use turn_on_light_detection() instead.')\nasync def set_light_detection_on(self) -&gt; bool:\n    \"\"\"Turn on light detection feature.\"\"\"\n    return await self.toggle_light_detection(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.set_manual_mode","title":"set_manual_mode  <code>async</code>  \u21b2","text":"<pre><code>set_manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Manual Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_manual_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Manual Mode.\"\"\"\n    if PurifierModes.MANUAL in self.modes:\n        return await self.set_mode(PurifierModes.MANUAL)\n    logger.error('Manual mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.set_mode","title":"set_mode  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>set_mode(mode: str) -&gt; bool\n</code></pre> <p>Set Purifier Mode.</p> <p>Allowed modes are found in the <code>device.modes</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@abstractmethod\nasync def set_mode(self, mode: str) -&gt; bool:\n    \"\"\"Set Purifier Mode.\n\n    Allowed modes are found in the `device.modes` attribute.\n\n    Args:\n        mode (str): Mode to set.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.set_nightlight_dim","title":"set_nightlight_dim  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_dim() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Nightlight Dim.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_nightlight_dim(self) -&gt; bool:\n    \"\"\"Set Nightlight Dim.\"\"\"\n    return await self.set_nightlight_mode(NightlightModes.DIM)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.set_nightlight_mode","title":"set_nightlight_mode  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Nightlight Mode.</p> <p>Modes are defined in the <code>device.nightlight_modes</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Nightlight mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_nightlight_mode(self, mode: str) -&gt; bool:\n    \"\"\"Set Nightlight Mode.\n\n    Modes are defined in the `device.nightlight_modes` attribute.\n\n    Args:\n        mode (str): Nightlight mode to set.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del mode\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.set_pet_mode","title":"set_pet_mode  <code>async</code>  \u21b2","text":"<pre><code>set_pet_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Pet Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_pet_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Pet Mode.\"\"\"\n    if PurifierModes.PET in self.modes:\n        return await self.set_mode(PurifierModes.PET)\n    logger.error('Pet mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.set_sleep_mode","title":"set_sleep_mode  <code>async</code>  \u21b2","text":"<pre><code>set_sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Sleep Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_sleep_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Sleep Mode.\"\"\"\n    if PurifierModes.SLEEP in self.modes:\n        return await self.set_mode(PurifierModes.SLEEP)\n    logger.error('Sleep mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    \"\"\"Set timer for device.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Args:\n        duration (int): Duration in seconds.\n        action (str | None): Action to take when timer expires.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del duration\n    del action\n    logger.debug('Not implemented - set_timer')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.set_turbo_mode","title":"set_turbo_mode  <code>async</code>  \u21b2","text":"<pre><code>set_turbo_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Purifier to Turbo Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def set_turbo_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Turbo Mode.\"\"\"\n    if PurifierModes.TURBO in self.modes:\n        return await self.set_mode(PurifierModes.TURBO)\n    logger.error('Turbo mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.sleep_mode","title":"sleep_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_sleep_mode instead.</p> <p>Set Purifier to Sleep Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_sleep_mode instead.')\nasync def sleep_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Sleep Mode.\"\"\"\n    return await self.set_sleep_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.toggle_child_lock","title":"toggle_child_lock  <code>async</code>  \u21b2","text":"<pre><code>toggle_child_lock(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Toggle Child Lock (Display Lock).</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>Toggle child lock. If None, toggle state.</p> <code>None</code> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def toggle_child_lock(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Toggle Child Lock (Display Lock).\n\n    Args:\n        toggle (bool | None): Toggle child lock. If None, toggle state.\n    \"\"\"\n    del toggle\n    logger.debug('Child lock not configured for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.toggle_display","title":"toggle_display  <code>async</code>  \u21b2","text":"<pre><code>toggle_display(mode: bool) -&gt; bool\n</code></pre> <p>Set Display Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def toggle_display(self, mode: bool) -&gt; bool:\n    \"\"\"Set Display Mode.\"\"\"\n    del mode\n    raise NotImplementedError\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.toggle_light_detection","title":"toggle_light_detection  <code>async</code>  \u21b2","text":"<pre><code>toggle_light_detection(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set Light Detection Mode.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>Toggle light detection. If None, toggle state.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def toggle_light_detection(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Set Light Detection Mode.\n\n    Args:\n        toggle (bool | None): Toggle light detection. If None, toggle state.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del toggle\n    if not self.supports_light_detection:\n        logger.debug('Light detection not supported for this device.')\n    else:\n        logger.debug('Light detection not configured for this device.')\n    return False\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.toggle_switch","title":"toggle_switch  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>@abstractmethod\nasync def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Toggle device power on or off.\n\n    Args:\n        toggle (bool | None): True to turn on, False to turn off, None to toggle.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.turbo_mode","title":"turbo_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>turbo_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> Deprecated <p>Use set_turbo_mode instead.</p> <p>Set Purifier to Turbo Mode.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>@deprecated('Use set_turbo_mode instead.')\nasync def turbo_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Turbo Mode.\"\"\"\n    return await self.set_turbo_mode()\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.turn_off_child_lock","title":"turn_off_child_lock  <code>async</code>  \u21b2","text":"<pre><code>turn_off_child_lock() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set child lock (display lock) to OFF.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_child_lock(self) -&gt; bool:\n    \"\"\"Set child lock (display lock) to OFF.\"\"\"\n    return await self.toggle_child_lock(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.turn_off_display","title":"turn_off_display  <code>async</code>  \u21b2","text":"<pre><code>turn_off_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn off Display.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_display(self) -&gt; bool:\n    \"\"\"Turn off Display.\"\"\"\n    return await self.toggle_display(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.turn_off_light_detection","title":"turn_off_light_detection  <code>async</code>  \u21b2","text":"<pre><code>turn_off_light_detection() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn off Light Detection.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_light_detection(self) -&gt; bool:\n    \"\"\"Turn off Light Detection.\"\"\"\n    return await self.toggle_light_detection(False)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.turn_off_nightlight","title":"turn_off_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_off_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn off Nightlight.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_off_nightlight(self) -&gt; bool:\n    \"\"\"Turn off Nightlight.\"\"\"\n    return await self.set_nightlight_mode(NightlightModes.OFF)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.turn_on_child_lock","title":"turn_on_child_lock  <code>async</code>  \u21b2","text":"<pre><code>turn_on_child_lock() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Set child lock (display lock) to ON.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_child_lock(self) -&gt; bool:\n    \"\"\"Set child lock (display lock) to ON.\"\"\"\n    return await self.toggle_child_lock(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.turn_on_display","title":"turn_on_display  <code>async</code>  \u21b2","text":"<pre><code>turn_on_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn on Display.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_display(self) -&gt; bool:\n    \"\"\"Turn on Display.\"\"\"\n    return await self.toggle_display(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.turn_on_light_detection","title":"turn_on_light_detection  <code>async</code>  \u21b2","text":"<pre><code>turn_on_light_detection() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn on Light Detection.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_light_detection(self) -&gt; bool:\n    \"\"\"Turn on Light Detection.\"\"\"\n    return await self.toggle_light_detection(True)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.turn_on_nightlight","title":"turn_on_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_on_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncPurifier</code></p> <p>Turn on Nightlight.</p> Source code in <code>src\\pyvesync\\base_devices\\purifier_base.py</code> <pre><code>async def turn_on_nightlight(self) -&gt; bool:\n    \"\"\"Turn on Nightlight.\"\"\"\n    return await self.set_nightlight_mode(NightlightModes.ON)\n</code></pre>"},{"location":"devices/air_purifiers/#pyvesync.base_devices.purifier_base.VeSyncPurifier.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/bulbs/","title":"Documentation for Etekcity / Valceno Smart Bulbs\u21b2","text":""},{"location":"devices/bulbs/#table-of-contents","title":"Table of Contents\u21b2","text":"<p>See each device class for available attributes and methods:</p> <ul> <li>BulbState Class</li> <li>Etekcity Smart Bulb ESL100</li> <li>Etekcity Smart Bulb ESL100CW</li> <li>Etekcity Smart Bulb ESL100MC</li> <li>Valceno Smart Bulb ESL100MC</li> <li>VeSyncBulb Abstract Base Class</li> </ul>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState","title":"pyvesync.base_devices.bulb_base.BulbState \u21b2","text":"<pre><code>BulbState(\n    device: VeSyncBulb,\n    details: ResponseDeviceDetailsModel,\n    feature_map: BulbMap,\n)\n</code></pre> <p>               Bases: <code>DeviceState</code></p> <p>VeSync Bulb State Base.</p> <p>Base class to hold all state attributes for bulb devices. Inherits from <code>DeviceState</code>. This class should not be used directly for devices, but rather subclassed for each bulb type.</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>VeSyncBulb</code> <p>VeSync Bulb device.</p> required <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>Device details from API.</p> required <code>feature_map</code> <code>BulbMap</code> <p>Feature map for bulb.</p> required <p>Attributes:</p> Name Type Description <code>_exclude_serialization</code> <code>list[str]</code> <p>List of attributes to exclude from serialization.</p> <code>active_time</code> <code>int</code> <p>Active time of device, defaults to None.</p> <code>connection_status</code> <code>str</code> <p>Connection status of device.</p> <code>device</code> <code>VeSyncBaseDevice</code> <p>Device object.</p> <code>device_status</code> <code>str</code> <p>Device status.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <code>last_update_ts</code> <code>int</code> <p>Last update timestamp of device, defaults to None.</p> <code>brightness</code> <code>int</code> <p>Brightness of bulb (0-100).</p> <code>color_temp</code> <code>int</code> <p>White color temperature of bulb in percent (0-100).</p> <code>color_temp_kelvin</code> <code>int</code> <p>White color temperature of bulb in Kelvin.</p> <code>color</code> <code>Color</code> <p>Color of bulb in the form of a dataclass with two namedtuple attributes - <code>hsv</code> &amp; <code>rgb</code>. See utils.colors.Colors.</p> <code>color_mode</code> <code>str</code> <p>Color mode of bulb.</p> <code>color_modes</code> <code>list[str]</code> <p>List of color modes supported by bulb.</p> <p>Methods:</p> Name Description <code>update_ts</code> <p>Update last update timestamp.</p> <code>to_dict</code> <p>Dump state to JSON.</p> <code>to_json</code> <p>Dump state to JSON string.</p> <code>to_jsonb</code> <p>Dump state to JSON bytes.</p> <code>as_tuple</code> <p>Convert state to tuple of (name, value) tuples.</p> See Also <ul> <li><code>VeSyncBulb</code></li> <li>[<code>ResponseDeviceDetailsModel</code>][     pyvesync.models.device_list_models.ResponseDeviceDetailsModel]</li> <li><code>BulbMap</code></li> </ul> <p>Inherited From <code>DeviceState</code></p> <p>Initialize device state.</p> <p>Initialize VeSync Bulb State Base.</p> Source code in <code>src\\pyvesync\\base_devices\\bulb_base.py</code> <pre><code>def __init__(\n    self,\n    device: VeSyncBulb,\n    details: ResponseDeviceDetailsModel,\n    feature_map: BulbMap,\n) -&gt; None:\n    \"\"\"Initialize VeSync Bulb State Base.\"\"\"\n    super().__init__(device, details, feature_map)\n    self._exclude_serialization: list[str] = ['rgb', 'hsv']\n    self.features: list[str] = feature_map.features\n    self.color_modes: list[str] = feature_map.color_modes\n    self.device: VeSyncBulb = device\n    self.color_mode: str | None = None\n    self._brightness: int | None = None\n    self._color_temp: int | None = None\n    self._color: Color | None = None\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.active_time","title":"active_time  <code>instance-attribute</code>  \u21b2","text":"<pre><code>active_time: int | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.brightness","title":"brightness  <code>property</code> <code>writable</code>  \u21b2","text":"<pre><code>brightness: int | None\n</code></pre> <p>Brightness of vesync bulb 0-100.</p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.color","title":"color  <code>property</code> <code>writable</code>  \u21b2","text":"<pre><code>color: Color | None\n</code></pre> <p>Return color of bulb.</p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.color_mode","title":"color_mode  <code>instance-attribute</code>  \u21b2","text":"<pre><code>color_mode: str | None = None\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.color_modes","title":"color_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>color_modes: list[str] = color_modes\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.color_temp","title":"color_temp  <code>property</code> <code>writable</code>  \u21b2","text":"<pre><code>color_temp: int | None\n</code></pre> <p>White color temperature of bulb in percent (0-100).</p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.color_temp_kelvin","title":"color_temp_kelvin  <code>property</code>  \u21b2","text":"<pre><code>color_temp_kelvin: int | None\n</code></pre> <p>Return white color temperature of bulb in Kelvin.</p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.connection_status","title":"connection_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_status: str = connectionStatus or UNKNOWN\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.device","title":"device  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device: VeSyncBulb = device\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.device_status","title":"device_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_status: str = deviceStatus or UNKNOWN\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.hsv","title":"hsv  <code>property</code> <code>writable</code>  \u21b2","text":"<pre><code>hsv: HSV | None\n</code></pre> <p>Return color of bulb as HSV.</p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.last_update_ts","title":"last_update_ts  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_update_ts: int | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.rgb","title":"rgb  <code>property</code> <code>writable</code>  \u21b2","text":"<pre><code>rgb: RGB | None\n</code></pre> <p>Return color of bulb as RGB.</p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.timer","title":"timer  <code>instance-attribute</code>  \u21b2","text":"<pre><code>timer: Timer | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState-functions","title":"Functions\u21b2","text":""},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.as_tuple","title":"as_tuple \u21b2","text":"<pre><code>as_tuple() -&gt; tuple[tuple[str, Any], ...]\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to tuple of (name, value) tuples.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def as_tuple(self) -&gt; tuple[tuple[str, Any], ...]:\n    \"\"\"Convert state to tuple of (name, value) tuples.\"\"\"\n    return tuple((k, v) for k, v in self._serialize().items())\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.display","title":"display \u21b2","text":"<pre><code>display() -&gt; None\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Print formatted state to stdout.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self) -&gt; None:\n    \"\"\"Print formatted state to stdout.\"\"\"\n    for name, val in self._serialize().items():\n        print(f'{name:.&lt;30} {val}')  # noqa: T201\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to dictionary.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Convert state to dictionary.\"\"\"\n    return self._serialize()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(indent: bool = False) -&gt; str\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Dump state to JSON string.</p> <p>Parameters:</p> Name Type Description Default <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device state.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, indent: bool = False) -&gt; str:\n    \"\"\"Dump state to JSON string.\n\n    Args:\n        indent (bool): If True, indent JSON output, defaults to False.\n\n    Returns:\n        str: JSON formatted string of device state.\n    \"\"\"\n    return self.to_jsonb(indent=indent).decode()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(indent: bool = False) -&gt; bytes\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to JSON bytes.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, indent: bool = False) -&gt; bytes:\n    \"\"\"Convert state to JSON bytes.\"\"\"\n    if indent:\n        return orjson.dumps(\n            self._serialize(), option=orjson.OPT_NON_STR_KEYS | orjson.OPT_INDENT_2\n        )\n    return orjson.dumps(self._serialize(), option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.BulbState.update_ts","title":"update_ts \u21b2","text":"<pre><code>update_ts() -&gt; None\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Update last update timestamp as UTC timestamp.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def update_ts(self) -&gt; None:\n    \"\"\"Update last update timestamp as UTC timestamp.\"\"\"\n    self.last_update_ts = int(dt.now(tz=UTC).timestamp())\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100","title":"pyvesync.devices.vesyncbulb.VeSyncBulbESL100 \u21b2","text":"<pre><code>VeSyncBulbESL100(\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: BulbMap,\n)\n</code></pre> <p>               Bases: <code>BypassV1Mixin</code>, <code>VeSyncBulb</code></p> <p>Object to hold VeSync ESL100 light bulb.</p> <p>Device state is held in the <code>state</code> attribute, which is an instance of BulbState. The <code>state</code> attribute contains all settable states for the bulb.</p> <p>This bulb only has the dimmable feature. Inherits from VeSyncBulb and VeSyncBaseToggleDevice.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>dict</code> <p>Dictionary of bulb state details.</p> required <code>manager</code> <code>VeSync</code> <p>Manager class used to make API calls</p> required <code>feature_map</code> <code>BulbMap</code> <p>Device configuration map.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>BulbState</code> <p>Device state object Each device has a separate state base class in the base_devices module.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <p>Inherited From <code>VeSyncBulb</code></p> <p>Initialize VeSync device base class.</p> <p>Initialize VeSync smart bulb base class.</p> <p>Initialize Etekcity ESL100 Dimmable Bulb.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>def __init__(\n    self, details: ResponseDeviceDetailsModel, manager: VeSync, feature_map: BulbMap\n) -&gt; None:\n    \"\"\"Initialize Etekcity ESL100 Dimmable Bulb.\"\"\"\n    super().__init__(details, manager, feature_map)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'uuid',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: BulbState = BulbState(self, details, feature_map)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.supports_brightness","title":"supports_brightness  <code>property</code>  \u21b2","text":"<pre><code>supports_brightness: bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Return True if bulb supports brightness.</p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100-functions","title":"Functions\u21b2","text":""},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.call_bypassv1_api","title":"call_bypassv1_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv1_api(\n    request_model: type[RequestBypassV1],\n    update_dict: dict | None = None,\n    method: str = 'bypass',\n    endpoint: str = 'bypass',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p> <p>Send ByPass V1 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V1 API. The endpoint can be overridden with the <code>endpoint</code> argument.</p> <p>Parameters:</p> Name Type Description Default <code>request_model</code> <code>type[RequestBypassV1]</code> <p>The request model to use.</p> required <code>update_dict</code> <code>dict</code> <p>Additional keys to add on.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypass'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the url path, defaults to <code>bypass</code>, e.g. <code>/cloud/v1/deviceManaged/bypass</code>.</p> <code>'bypass'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv1_api(\n    self,\n    request_model: type[RequestBypassV1],\n    update_dict: dict | None = None,\n    method: str = 'bypass',\n    endpoint: str = 'bypass',\n) -&gt; dict | None:\n    \"\"\"Send ByPass V1 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V1 API.\n    The endpoint can be overridden with the `endpoint` argument.\n\n    Args:\n        request_model (type[RequestBypassV1]): The request model to use.\n        update_dict (dict): Additional keys to add on.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the url path, defaults to\n            `bypass`, e.g. `/cloud/v1/deviceManaged/bypass`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(request_model, update_dict, method)\n    url_path = BYPASS_V1_PATH + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        url_path, 'post', request, Helpers.req_header_bypass()\n    )\n\n    return resp_dict\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    if self.state.timer is None:\n        logger.debug('No timer set - run get_timer() first')\n        return False\n    timer = self.state.timer\n    r_dict = await self.call_bypassv1_api(\n        TimerModels.RequestV1ClearTimer,\n        {'timerId': str(timer.id), 'status': '1'},\n        'deleteTimer',\n        'timer/deleteTimer',\n    )\n    result = Helpers.process_dev_response(logger, 'clear_timer', self, r_dict)\n    if result is None:\n        return False\n    self.state.timer = None\n    return True\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.enable_white_mode","title":"enable_white_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>enable_white_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> Deprecated <p>Use <code>set_white_mode</code> instead.</p> <p>Enable white mode if supported by bulb.</p> Source code in <code>src\\pyvesync\\base_devices\\bulb_base.py</code> <pre><code>@deprecated('Use `set_white_mode` instead.')\nasync def enable_white_mode(self) -&gt; bool:\n    \"\"\"Enable white mode if supported by bulb.\"\"\"\n    return await self.set_white_mode()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def get_details(self) -&gt; None:\n    method_dict = {\n        'method': 'deviceDetail',\n    }\n\n    r_dict = await self.call_bypassv1_api(\n        bulb_models.RequestESL100Detail, method_dict, 'deviceDetail', 'deviceDetail'\n    )\n    model = process_bypassv1_result(\n        self, logger, 'get_details', r_dict, bulb_models.ResponseESL100DetailResult\n    )\n\n    if model is None:\n        self.state.connection_status = ConnectionStatus.OFFLINE\n        return\n    self.state.brightness = model.brightness\n    self.state.device_status = model.deviceStatus\n    self.state.connection_status = model.connectionStatus\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def get_timer(self) -&gt; None:\n    r_dict = await self.call_bypassv1_api(\n        TimerModels.RequestV1GetTimer, {}, 'getTimers', 'timer/getTimers'\n    )\n    result_model = process_bypassv1_result(\n        self, logger, 'get_timer', r_dict, TimerModels.ResultV1GetTimer\n    )\n    if result_model is None:\n        return\n    if not isinstance(result_model.timers, list) or not result_model.timers:\n        self.state.timer = None\n        logger.debug('No timers found')\n        return\n    timer = result_model.timers\n    if not isinstance(timer, TimerModels.TimerItemV1):\n        logger.debug('Invalid timer item type')\n        return\n    self.state.timer = Timer(\n        int(timer.counterTimer),\n        timer.action,\n        int(timer.timerID),\n    )\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.set_brightness","title":"set_brightness  <code>async</code>  \u21b2","text":"<pre><code>set_brightness(brightness: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set brightness if supported by bulb.</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <code>NUMERIC_T</code> <p>Brightness 0-100</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_brightness(self, brightness: int) -&gt; bool:\n    if not self.supports_brightness:\n        logger.warning('%s is not dimmable', self.device_name)\n        return False\n    if not Validators.validate_zero_to_hundred(brightness):\n        logger.debug('Invalid brightness value')\n        return False\n    brightness_update = brightness\n    if (\n        self.state.device_status == DeviceStatus.ON\n        and brightness_update == self.supports_brightness\n    ):\n        logger.debug('Device already in requested state')\n        return True\n\n    method_dict = {\n        'brightNess': str(brightness_update),\n        'status': 'on',\n    }\n    r_dict = await self.call_bypassv1_api(\n        bulb_models.RequestESL100Brightness,\n        method_dict,\n        'smartBulbBrightnessCtl',\n        'smartBulbBrightnessCtl',\n    )\n\n    r = Helpers.process_dev_response(logger, 'set_brightness', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.brightness = brightness_update\n    self.state.device_status = DeviceStatus.ON\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.set_status","title":"set_status  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_status(brightness: int) -&gt; bool\n</code></pre> Deprecated <p>Use set_brightness() instead</p> <p>Set brightness of dimmable bulb.</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <code>int</code> <p>Brightness of bulb (0-100).</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>@deprecated('Use set_brightness() instead')\nasync def set_status(self, brightness: int) -&gt; bool:\n    \"\"\"Set brightness of dimmable bulb.\n\n    Args:\n        brightness (int): Brightness of bulb (0-100).\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    return await self.set_brightness(brightness=brightness)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    if action is None:\n        action = (\n            DeviceStatus.ON\n            if self.state.device_status == DeviceStatus.OFF\n            else DeviceStatus.OFF\n        )\n    if action not in [DeviceStatus.ON, DeviceStatus.OFF]:\n        logger.debug(\"Invalid action value - must be 'on' or 'off'\")\n        return False\n    update_dict = {\n        'action': action,\n        'counterTime': str(duration),\n        'status': '1',\n    }\n    r_dict = await self.call_bypassv1_api(\n        TimerModels.RequestV1SetTime, update_dict, 'addTimer', 'timer/addTimer'\n    )\n    result_model = process_bypassv1_result(\n        self, logger, 'set_timer', r_dict, TimerModels.ResultV1SetTimer\n    )\n    if result_model is None:\n        return False\n    self.state.timer = Timer(duration, action, int(result_model.timerID))\n    return True\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.set_white_mode","title":"set_white_mode  <code>async</code>  \u21b2","text":"<pre><code>set_white_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set white mode if supported by bulb.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\bulb_base.py</code> <pre><code>async def set_white_mode(self) -&gt; bool:\n    \"\"\"Set white mode if supported by bulb.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    if self.supports_multicolor:\n        logger.debug('White mode is not configured on this bulb.')\n    else:\n        logger.warning('White mode not supported by this bulb')\n    return False\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.toggle","title":"toggle  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>toggle(status: str) -&gt; bool\n</code></pre> Deprecated <p>toggle() is deprecated, use toggle_switch(toggle: bool | None = None) instead</p> <p>Toggle switch of ESL100 bulb.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>@deprecated(\n    'toggle() is deprecated, use toggle_switch(toggle: bool | None = None) instead'\n)\nasync def toggle(self, status: str) -&gt; bool:\n    \"\"\"Toggle switch of ESL100 bulb.\"\"\"\n    status_bool = status != DeviceStatus.ON\n    return await self.toggle_switch(status_bool)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.device_status != DeviceStatus.ON\n    status = DeviceStatus.ON if toggle else DeviceStatus.OFF\n    method_dict = {\n        'status': status,\n    }\n    r_dict = await self.call_bypassv1_api(\n        bulb_models.RequestESL100Status,\n        method_dict,\n        'smartBulbPowerSwitchCtl',\n        'smartBulbPowerSwitchCtl',\n    )\n\n    r = Helpers.process_dev_response(logger, 'toggle', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.device_status = status\n    return True\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW","title":"pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW \u21b2","text":"<pre><code>VeSyncBulbESL100CW(\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: BulbMap,\n)\n</code></pre> <p>               Bases: <code>BypassV1Mixin</code>, <code>VeSyncBulb</code></p> <p>VeSync Tunable and Dimmable White Bulb.</p> <p>This bulb only has the dimmable feature. Inherits from VeSyncBulb and VeSyncBaseToggleDevice.</p> <p>Device state is held in the <code>state</code> attribute, which is an instance of BulbState. The <code>state</code> attribute contains all settable states for the bulb.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>dict</code> <p>Dictionary of bulb state details.</p> required <code>manager</code> <code>VeSync</code> <p>Manager class used to make API calls</p> required <code>feature_map</code> <code>BulbMap</code> <p>Device configuration map.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>BulbState</code> <p>Device state object Each device has a separate state base class in the base_devices module.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <p>Inherited From <code>VeSyncBulb</code></p> <p>Initialize VeSync device base class.</p> <p>Initialize VeSync smart bulb base class.</p> <p>Initialize Etekcity Tunable white bulb.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>def __init__(\n    self, details: ResponseDeviceDetailsModel, manager: VeSync, feature_map: BulbMap\n) -&gt; None:\n    \"\"\"Initialize Etekcity Tunable white bulb.\"\"\"\n    super().__init__(details, manager, feature_map)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'uuid',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: BulbState = BulbState(self, details, feature_map)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.supports_brightness","title":"supports_brightness  <code>property</code>  \u21b2","text":"<pre><code>supports_brightness: bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Return True if bulb supports brightness.</p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW-functions","title":"Functions\u21b2","text":""},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.call_bypassv1_api","title":"call_bypassv1_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv1_api(\n    request_model: type[RequestBypassV1],\n    update_dict: dict | None = None,\n    method: str = 'bypass',\n    endpoint: str = 'bypass',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p> <p>Send ByPass V1 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V1 API. The endpoint can be overridden with the <code>endpoint</code> argument.</p> <p>Parameters:</p> Name Type Description Default <code>request_model</code> <code>type[RequestBypassV1]</code> <p>The request model to use.</p> required <code>update_dict</code> <code>dict</code> <p>Additional keys to add on.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypass'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the url path, defaults to <code>bypass</code>, e.g. <code>/cloud/v1/deviceManaged/bypass</code>.</p> <code>'bypass'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv1_api(\n    self,\n    request_model: type[RequestBypassV1],\n    update_dict: dict | None = None,\n    method: str = 'bypass',\n    endpoint: str = 'bypass',\n) -&gt; dict | None:\n    \"\"\"Send ByPass V1 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V1 API.\n    The endpoint can be overridden with the `endpoint` argument.\n\n    Args:\n        request_model (type[RequestBypassV1]): The request model to use.\n        update_dict (dict): Additional keys to add on.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the url path, defaults to\n            `bypass`, e.g. `/cloud/v1/deviceManaged/bypass`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(request_model, update_dict, method)\n    url_path = BYPASS_V1_PATH + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        url_path, 'post', request, Helpers.req_header_bypass()\n    )\n\n    return resp_dict\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    if self.state.timer is None:\n        logger.debug('No timer set - run get_timer() first')\n        return False\n    timer = self.state.timer\n    r_dict = await self.call_bypassv1_api(\n        TimerModels.RequestV1ClearTimer,\n        {'timerId': str(timer.id), 'status': '1'},\n        'deleteTimer',\n        'timer/deleteTimer',\n    )\n    r = Helpers.process_dev_response(logger, 'clear_timer', self, r_dict)\n    if r is None:\n        return False\n    self.state.timer = None\n    return True\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.enable_white_mode","title":"enable_white_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>enable_white_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> Deprecated <p>Use <code>set_white_mode</code> instead.</p> <p>Enable white mode if supported by bulb.</p> Source code in <code>src\\pyvesync\\base_devices\\bulb_base.py</code> <pre><code>@deprecated('Use `set_white_mode` instead.')\nasync def enable_white_mode(self) -&gt; bool:\n    \"\"\"Enable white mode if supported by bulb.\"\"\"\n    return await self.set_white_mode()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def get_details(self) -&gt; None:\n    r_dict = await self.call_bypassv1_api(\n        bulb_models.RequestESL100CWBase,\n        {'jsonCmd': {'getLightStatus': 'get'}},\n    )\n\n    light_resp = process_bypassv1_result(\n        self, logger, 'get_details', r_dict, bulb_models.ResponseESL100CWDetailResult\n    )\n    if light_resp is None:\n        self.state.connection_status = ConnectionStatus.OFFLINE\n        return\n    self._interpret_apicall_result(light_resp)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def get_timer(self) -&gt; None:\n    r_dict = await self.call_bypassv1_api(\n        TimerModels.RequestV1GetTimer, {}, 'getTimers', 'timer/getTimers'\n    )\n    result_model = process_bypassv1_result(\n        self, logger, 'get_timer', r_dict, TimerModels.ResultV1GetTimer\n    )\n    if result_model is None:\n        return\n    if not isinstance(result_model.timers, list) or not result_model.timers:\n        logger.debug('No timers found')\n        return\n    timers = result_model.timers\n    if len(timers) &gt; 1:\n        logger.debug('Multiple timers found, returning first timer')\n    timer = timers[0]\n    if not isinstance(timer, TimerModels.TimeItemV1):\n        logger.debug('Invalid timer item type')\n        return\n    self.state.timer = Timer(\n        int(timer.counterTime),\n        timer.action,\n        int(timer.timerID),\n    )\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.set_brightness","title":"set_brightness  <code>async</code>  \u21b2","text":"<pre><code>set_brightness(brightness: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set brightness if supported by bulb.</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <code>NUMERIC_T</code> <p>Brightness 0-100</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> <p>Set brightness of tunable bulb.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_brightness(self, brightness: int) -&gt; bool:\n    \"\"\"Set brightness of tunable bulb.\"\"\"\n    return await self.set_status(brightness=brightness)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.set_status","title":"set_status  <code>async</code>  \u21b2","text":"<pre><code>set_status(\n    brightness: int | None = None,\n    color_temp: int | None = None,\n) -&gt; bool\n</code></pre> <p>Set status of tunable bulb.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_status(\n    self, /, brightness: int | None = None, color_temp: int | None = None\n) -&gt; bool:\n    \"\"\"Set status of tunable bulb.\"\"\"\n    if brightness is not None:\n        if Validators.validate_zero_to_hundred(brightness):\n            brightness_update = int(brightness)\n        else:\n            logger.debug('Invalid brightness value')\n            return False\n    elif self.state.brightness is not None:\n        brightness_update = self.state.brightness\n    else:\n        brightness_update = 100\n    if color_temp is not None:\n        if Validators.validate_zero_to_hundred(color_temp):\n            color_temp_update = color_temp\n        else:\n            logger.debug('Invalid color temperature value')\n            return False\n    elif self.state.color_temp is not None:\n        color_temp_update = self.state.color_temp\n    else:\n        color_temp_update = 100\n    if (\n        self.state.device_status == DeviceStatus.ON\n        and brightness_update == self.state.brightness\n        and color_temp_update == self.state.color_temp\n    ):\n        logger.debug('Device already in requested state')\n        return True\n    light_dict: dict[str, NUMERIC_OPT | str] = {\n        'colorTempe': color_temp_update,\n        'brightness': brightness_update,\n        'action': DeviceStatus.ON,\n    }\n\n    r_dict = await self.call_bypassv1_api(\n        bulb_models.RequestESL100CWBase,\n        {'jsonCmd': {'light': light_dict}},\n        'bypass',\n        'bypass',\n    )\n\n    r = Helpers.process_dev_response(logger, 'set_brightness', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.brightness = brightness_update\n    self.state.color_temp = color_temp_update\n    self.state.device_status = DeviceStatus.ON\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    if action is None:\n        action = (\n            DeviceStatus.ON\n            if self.state.device_status == DeviceStatus.OFF\n            else DeviceStatus.OFF\n        )\n    if action not in [DeviceStatus.ON, DeviceStatus.OFF]:\n        logger.debug(\"Invalid action value - must be 'on' or 'off'\")\n        return False\n    update_dict = {\n        'action': action,\n        'counterTime': str(duration),\n        'status': '1',\n    }\n    r_dict = await self.call_bypassv1_api(\n        TimerModels.RequestV1SetTime, update_dict, 'addTimer', 'timer/addTimer'\n    )\n    result_model = process_bypassv1_result(\n        self, logger, 'set_timer', r_dict, TimerModels.ResultV1SetTimer\n    )\n    if result_model is None:\n        return False\n    self.state.timer = Timer(duration, action, int(result_model.timerID))\n    return True\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.set_white_mode","title":"set_white_mode  <code>async</code>  \u21b2","text":"<pre><code>set_white_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set white mode if supported by bulb.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\bulb_base.py</code> <pre><code>async def set_white_mode(self) -&gt; bool:\n    \"\"\"Set white mode if supported by bulb.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    if self.supports_multicolor:\n        logger.debug('White mode is not configured on this bulb.')\n    else:\n        logger.warning('White mode not supported by this bulb')\n    return False\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.toggle","title":"toggle  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>toggle(status: str) -&gt; bool\n</code></pre> Deprecated <p>toggle() is deprecated, use toggle_switch(toggle: bool | None = None) instead</p> <p>Deprecated - use toggle_switch().</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>@deprecated(\n    'toggle() is deprecated, use toggle_switch(toggle: bool | None = None) instead'\n)\nasync def toggle(self, status: str) -&gt; bool:\n    \"\"\"Deprecated - use toggle_switch().\"\"\"\n    status_bool = status == DeviceStatus.ON\n    return await self.toggle_switch(status_bool)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.device_status == DeviceStatus.OFF\n    status = DeviceStatus.ON if toggle else DeviceStatus.OFF\n\n    r_dict = await self.call_bypassv1_api(\n        bulb_models.RequestESL100CWBase,\n        {'jsonCmd': {'light': {'action': status}}},\n        'bypass',\n        'bypass',\n    )\n\n    r = Helpers.process_dev_response(logger, 'toggle', self, r_dict)\n    if r is None:\n        logger.debug('%s offline', self.device_name)\n        return False\n    self.state.device_status = status\n    return True\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100CW.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC","title":"pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC \u21b2","text":"<pre><code>VeSyncBulbESL100MC(\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: BulbMap,\n)\n</code></pre> <p>               Bases: <code>BypassV2Mixin</code>, <code>VeSyncBulb</code></p> <p>Etekcity ESL100 Multi Color Bulb device.</p> <p>Inherits from VeSyncBulb and VeSyncBaseDevice.</p> <p>The state of the bulb is stored in the <code>state</code> attribute, which is an of BulbState. The <code>state</code> attribute contains all settable states for the bulb.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>dict</code> <p>Dictionary of bulb state details.</p> required <code>manager</code> <code>VeSync</code> <p>Manager class used to make API calls.</p> required <code>feature_map</code> <code>BulbMap</code> <p>Device configuration map.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>BulbState</code> <p>Device state object Each device has a separate state base class in the base_devices module.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> Notes <p>The details dictionary contains the device information retreived by the <code>update()</code> method: <pre><code>details = {\n    'brightness': 50,\n    'colorMode': 'rgb',\n    'color' : Color(red=0, green=0, blue=0)\n}\n</code></pre> See pyvesync.helpers.color.Color for more information on the Color dataclass.</p> <p>Inherited From <code>VeSyncBulb</code></p> <p>Initialize VeSync device base class.</p> <p>Initialize VeSync smart bulb base class.</p> <p>Instantiate ESL100MC Multicolor Bulb.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>def __init__(\n    self, details: ResponseDeviceDetailsModel, manager: VeSync, feature_map: BulbMap\n) -&gt; None:\n    \"\"\"Instantiate ESL100MC Multicolor Bulb.\"\"\"\n    super().__init__(details, manager, feature_map)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: BulbState = BulbState(self, details, feature_map)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.supports_brightness","title":"supports_brightness  <code>property</code>  \u21b2","text":"<pre><code>supports_brightness: bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Return True if bulb supports brightness.</p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.supports_color_temp","title":"supports_color_temp  <code>property</code>  \u21b2","text":"<pre><code>supports_color_temp: bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Return True if bulb supports color temperature.</p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.supports_multicolor","title":"supports_multicolor  <code>property</code>  \u21b2","text":"<pre><code>supports_multicolor: bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Return True if bulb supports backlight.</p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC-functions","title":"Functions\u21b2","text":""},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.call_bypassv2_api","title":"call_bypassv2_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv2_api(\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p> <p>Send Bypass V2 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V2 API.</p> <p>Parameters:</p> Name Type Description Default <code>payload_method</code> <code>str</code> <p>The method to use in the payload dict.</p> required <code>data</code> <code>dict | None</code> <p>The data to send in the request.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypassV2'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the API url, defaults to <code>bypassV2</code>, e.g. <code>/cloud/v2/deviceManaged/bypassV2</code>.</p> <code>'bypassV2'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv2_api(\n    self,\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None:\n    \"\"\"Send Bypass V2 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V2 API.\n\n    Args:\n        payload_method (str): The method to use in the payload dict.\n        data (dict | None): The data to send in the request.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the API url, defaults to\n            `bypassV2`, e.g. `/cloud/v2/deviceManaged/bypassV2`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(payload_method, data, method)\n    endpoint = BYPASS_V2_BASE + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        endpoint, 'post', request, Helpers.req_header_bypass()\n    )\n    return resp_dict\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    \"\"\"Clear timer for device from API.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    logger.debug('Not implemented - clear_timer')\n    return False\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.enable_white_mode","title":"enable_white_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>enable_white_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> Deprecated <p>Use <code>set_white_mode</code> instead.</p> <p>Enable white mode if supported by bulb.</p> Source code in <code>src\\pyvesync\\base_devices\\bulb_base.py</code> <pre><code>@deprecated('Use `set_white_mode` instead.')\nasync def enable_white_mode(self) -&gt; bool:\n    \"\"\"Enable white mode if supported by bulb.\"\"\"\n    return await self.set_white_mode()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def get_details(self) -&gt; None:\n    r_dict = await self.call_bypassv2_api('getLightStatus')\n\n    result_model = process_bypassv2_result(\n        self, logger, 'get_details', r_dict, bulb_models.ResponseESL100MCResult\n    )\n    if result_model is None:\n        return\n    self._set_state(result_model)\n    return\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    \"\"\"Get timer for device from API and set the `state.Timer` attribute.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Note:\n        This method may not be implemented for all devices. Please\n        open an issue if there is an error.\n    \"\"\"\n    logger.debug('Not implemented - get_timer')\n    return None\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.set_brightness","title":"set_brightness  <code>async</code>  \u21b2","text":"<pre><code>set_brightness(brightness: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set brightness if supported by bulb.</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <code>NUMERIC_T</code> <p>Brightness 0-100</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_brightness(self, brightness: int) -&gt; bool:\n    return await self.set_status(brightness=brightness)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.set_color_mode","title":"set_color_mode  <code>async</code>  \u21b2","text":"<pre><code>set_color_mode(color_mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set color mode if supported by bulb.</p> <p>Parameters:</p> Name Type Description Default <code>color_mode</code> <code>str</code> <p>Color mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\bulb_base.py</code> <pre><code>async def set_color_mode(self, color_mode: str) -&gt; bool:\n    \"\"\"Set color mode if supported by bulb.\n\n    Args:\n        color_mode (str): Color mode to set.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del color_mode\n    if self.supports_multicolor:\n        logger.debug('Color mode is not configured on this bulb.')\n    else:\n        logger.warning('Color mode not supported by this bulb')\n    return False\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.set_color_temp","title":"set_color_temp  <code>async</code>  \u21b2","text":"<pre><code>set_color_temp(color_temp: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set color temperature if supported by bulb.</p> <p>Parameters:</p> Name Type Description Default <code>color_temp</code> <code>int</code> <p>Color temperature 0-100</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\bulb_base.py</code> <pre><code>async def set_color_temp(self, color_temp: int) -&gt; bool:\n    \"\"\"Set color temperature if supported by bulb.\n\n    Args:\n        color_temp (int): Color temperature 0-100\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del color_temp\n    if self.supports_color_temp:\n        logger.debug('Color temperature is not configured on this bulb.')\n    else:\n        logger.debug('Color temperature not supported by this bulb')\n    return False\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.set_hsv","title":"set_hsv  <code>async</code>  \u21b2","text":"<pre><code>set_hsv(\n    hue: float, saturation: float, value: float\n) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set HSV if supported by bulb.</p> <p>Parameters:</p> Name Type Description Default <code>hue</code> <code>float</code> <p>Hue 0-360</p> required <code>saturation</code> <code>float</code> <p>Saturation 0-100</p> required <code>value</code> <code>float</code> <p>Value 0-100</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_hsv(self, hue: float, saturation: float, value: float) -&gt; bool:\n    hsv = Color.from_hsv(hue=hue, saturation=saturation, value=value)\n    if hsv is not None:\n        return await self.set_status(\n            red=hsv.rgb.red, green=hsv.rgb.green, blue=hsv.rgb.blue\n        )\n    logger.debug('Invalid HSV values')\n    return False\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.set_rgb","title":"set_rgb  <code>async</code>  \u21b2","text":"<pre><code>set_rgb(red: float, green: float, blue: float) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set RGB if supported by bulb.</p> <p>Parameters:</p> Name Type Description Default <code>red</code> <code>float</code> <p>Red 0-255</p> required <code>green</code> <code>float</code> <p>green 0-255</p> required <code>blue</code> <code>float</code> <p>blue 0-255</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_rgb(self, red: float, green: float, blue: float) -&gt; bool:\n    return await self.set_status(red=red, green=green, blue=blue)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.set_status","title":"set_status  <code>async</code>  \u21b2","text":"<pre><code>set_status(\n    brightness: float | None = None,\n    red: float | None = None,\n    green: float | None = None,\n    blue: float | None = None,\n) -&gt; bool\n</code></pre> <p>Set color of VeSync ESL100MC.</p> <p>Brightness or RGB values must be provided. If RGB values are provided, brightness is ignored.</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <code>float | None</code> <p>Brightness of bulb (0-100).</p> <code>None</code> <code>red</code> <code>float | None</code> <p>Red value of RGB color, 0-255.</p> <code>None</code> <code>green</code> <code>float | None</code> <p>Green value of RGB color, 0-255.</p> <code>None</code> <code>blue</code> <code>float | None</code> <p>Blue value of RGB color, 0-255.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_status(\n    self,\n    brightness: float | None = None,\n    red: float | None = None,\n    green: float | None = None,\n    blue: float | None = None,\n) -&gt; bool:\n    \"\"\"Set color of VeSync ESL100MC.\n\n    Brightness or RGB values must be provided. If RGB values are provided,\n    brightness is ignored.\n\n    Args:\n        brightness (float | None): Brightness of bulb (0-100).\n        red (float | None): Red value of RGB color, 0-255.\n        green (float | None): Green value of RGB color, 0-255.\n        blue (float | None): Blue value of RGB color, 0-255.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    brightness_update = 100\n    if red is not None and green is not None and blue is not None:\n        new_color = Color.from_rgb(red, green, blue)\n        color_mode = 'color'\n        if (\n            self.state.device_status == DeviceStatus.ON\n            and new_color == self.state.color\n        ):\n            logger.debug('New color is same as current color')\n            return True\n    else:\n        logger.debug('RGB Values not provided')\n        new_color = None\n        if brightness is not None:\n            if Validators.validate_zero_to_hundred(brightness):\n                brightness_update = int(brightness)\n            else:\n                logger.debug('Invalid brightness value')\n                return False\n            if (\n                self.state.device_status == DeviceStatus.ON\n                and brightness_update == self.state.brightness\n            ):\n                logger.debug('Brightness already set to %s', brightness)\n                return True\n            color_mode = 'white'\n        else:\n            logger.debug('Brightness and RGB values are not set')\n            return False\n\n    data = {\n        'action': DeviceStatus.ON,\n        'speed': 0,\n        'brightness': brightness_update,\n        'red': 0 if new_color is None else int(new_color.rgb.red),\n        'green': 0 if new_color is None else int(new_color.rgb.green),\n        'blue': 0 if new_color is None else int(new_color.rgb.blue),\n        'colorMode': 'color' if new_color is not None else 'white',\n    }\n    r_dict = await self.call_bypassv2_api('setLightStatus', data)\n\n    r = Helpers.process_dev_response(logger, 'set_status', self, r_dict)\n    if r is None:\n        return False\n\n    if color_mode == 'color' and new_color is not None:\n        self.state.color_mode = 'color'\n        self.state.color = new_color\n    elif brightness is not None:\n        self.state.brightness = int(brightness_update)\n        self.state.color_mode = 'white'\n\n    self.state.device_status = DeviceStatus.ON\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    \"\"\"Set timer for device.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Args:\n        duration (int): Duration in seconds.\n        action (str | None): Action to take when timer expires.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del duration\n    del action\n    logger.debug('Not implemented - set_timer')\n    return False\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.set_white_mode","title":"set_white_mode  <code>async</code>  \u21b2","text":"<pre><code>set_white_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set white mode if supported by bulb.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_white_mode(self) -&gt; bool:\n    return await self.set_status(brightness=100)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.toggle","title":"toggle  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>toggle(status: str) -&gt; bool\n</code></pre> Deprecated <p>toggle() is deprecated, use toggle_switch(toggle: bool | None = None) instead</p> <p>Toggle switch of VeSync ESL100MC.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>@deprecated(\n    'toggle() is deprecated, use toggle_switch(toggle: bool | None = None) instead'\n)\nasync def toggle(self, status: str) -&gt; bool:\n    \"\"\"Toggle switch of VeSync ESL100MC.\"\"\"\n    status_bool = status == DeviceStatus.ON\n    return await self.toggle_switch(status_bool)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.device_status == DeviceStatus.OFF\n    data = {'id': 0, 'enabled': toggle}\n\n    r_dict = await self.call_bypassv2_api('setSwitch', data)\n\n    r = Helpers.process_dev_response(logger, 'toggle', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.device_status = DeviceStatus.ON if toggle else DeviceStatus.OFF\n    return True\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbESL100MC.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC","title":"pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC \u21b2","text":"<pre><code>VeSyncBulbValcenoA19MC(\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: BulbMap,\n)\n</code></pre> <p>               Bases: <code>VeSyncBulb</code></p> <p>VeSync Multicolor Bulb.</p> <p>This bulb only has the dimmable feature. Inherits from VeSyncBulb and VeSyncBaseToggleDevice.</p> <p>Device state is held in the <code>state</code> attribute, which is an instance of BulbState. The <code>state</code> attribute contains all settable states for the bulb.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>dict</code> <p>Dictionary of bulb state details.</p> required <code>manager</code> <code>VeSync</code> <p>Manager class used to make API calls</p> required <code>feature_map</code> <code>BulbMap</code> <p>Device configuration map.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>BulbState</code> <p>Device state object Each device has a separate state base class in the base_devices module.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <p>Inherited From <code>VeSyncBulb</code></p> <p>Initialize VeSync device base class.</p> <p>Initialize VeSync smart bulb base class.</p> <p>Initialize Multicolor bulb.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>def __init__(\n    self, details: ResponseDeviceDetailsModel, manager: VeSync, feature_map: BulbMap\n) -&gt; None:\n    \"\"\"Initialize Multicolor bulb.\"\"\"\n    super().__init__(details, manager, feature_map)\n    self.request_keys = [\n        'acceptLanguage',\n        'accountID',\n        'appVersion',\n        'cid',\n        'configModule',\n        'deviceRegion',\n        'debugMode',\n        'phoneBrand',\n        'phoneOS',\n        'timeZone',\n        'token',\n        'traceId',\n    ]\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager = manager\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.request_keys","title":"request_keys  <code>instance-attribute</code>  \u21b2","text":"<pre><code>request_keys = [\n    'acceptLanguage',\n    'accountID',\n    'appVersion',\n    'cid',\n    'configModule',\n    'deviceRegion',\n    'debugMode',\n    'phoneBrand',\n    'phoneOS',\n    'timeZone',\n    'token',\n    'traceId',\n]\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: BulbState = BulbState(self, details, feature_map)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.supports_brightness","title":"supports_brightness  <code>property</code>  \u21b2","text":"<pre><code>supports_brightness: bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Return True if bulb supports brightness.</p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.supports_color_temp","title":"supports_color_temp  <code>property</code>  \u21b2","text":"<pre><code>supports_color_temp: bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Return True if bulb supports color temperature.</p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.supports_multicolor","title":"supports_multicolor  <code>property</code>  \u21b2","text":"<pre><code>supports_multicolor: bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Return True if bulb supports backlight.</p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC-functions","title":"Functions\u21b2","text":""},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    \"\"\"Clear timer for device from API.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    logger.debug('Not implemented - clear_timer')\n    return False\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.enable_white_mode","title":"enable_white_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>enable_white_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> Deprecated <p>Use <code>set_white_mode</code> instead.</p> <p>Enable white mode if supported by bulb.</p> Source code in <code>src\\pyvesync\\base_devices\\bulb_base.py</code> <pre><code>@deprecated('Use `set_white_mode` instead.')\nasync def enable_white_mode(self) -&gt; bool:\n    \"\"\"Enable white mode if supported by bulb.\"\"\"\n    return await self.set_white_mode()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def get_details(self) -&gt; None:\n    r_dict = await self._call_valceno_api('getLightStatusV2', {})\n\n    if r_dict is None:\n        return\n\n    status = bulb_models.ResponseValcenoStatus.from_dict(r_dict)\n    self._interpret_apicall_result(status)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    \"\"\"Get timer for device from API and set the `state.Timer` attribute.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Note:\n        This method may not be implemented for all devices. Please\n        open an issue if there is an error.\n    \"\"\"\n    logger.debug('Not implemented - get_timer')\n    return None\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.set_brightness","title":"set_brightness  <code>async</code>  \u21b2","text":"<pre><code>set_brightness(brightness: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set brightness if supported by bulb.</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <code>NUMERIC_T</code> <p>Brightness 0-100</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> <p>Set brightness of multicolor bulb.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_brightness(self, brightness: int) -&gt; bool:\n    \"\"\"Set brightness of multicolor bulb.\"\"\"\n    return await self.set_status(brightness=brightness)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.set_color_hue","title":"set_color_hue  <code>async</code>  \u21b2","text":"<pre><code>set_color_hue(color_hue: float) -&gt; bool\n</code></pre> <p>Set Color Hue of Bulb (0 - 360).</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_color_hue(self, color_hue: float) -&gt; bool:\n    \"\"\"Set Color Hue of Bulb (0 - 360).\"\"\"\n    return await self.set_status(color_hue=color_hue)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.set_color_mode","title":"set_color_mode  <code>async</code>  \u21b2","text":"<pre><code>set_color_mode(color_mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set color mode if supported by bulb.</p> <p>Parameters:</p> Name Type Description Default <code>color_mode</code> <code>str</code> <p>Color mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> <p>Set Color Mode of Bulb (white / hsv).</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_color_mode(self, color_mode: str) -&gt; bool:\n    \"\"\"Set Color Mode of Bulb (white / hsv).\"\"\"\n    return await self.set_status(color_mode=color_mode)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.set_color_saturation","title":"set_color_saturation  <code>async</code>  \u21b2","text":"<pre><code>set_color_saturation(color_saturation: float) -&gt; bool\n</code></pre> <p>Set Color Saturation of Bulb in pct (1 - 100).</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_color_saturation(self, color_saturation: float) -&gt; bool:\n    \"\"\"Set Color Saturation of Bulb in pct (1 - 100).\"\"\"\n    return await self.set_status(color_saturation=color_saturation)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.set_color_temp","title":"set_color_temp  <code>async</code>  \u21b2","text":"<pre><code>set_color_temp(color_temp: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set color temperature if supported by bulb.</p> <p>Parameters:</p> Name Type Description Default <code>color_temp</code> <code>int</code> <p>Color temperature 0-100</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> <p>Set White Temperature of Bulb in pct (0 - 100).</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_color_temp(self, color_temp: int) -&gt; bool:\n    \"\"\"Set White Temperature of Bulb in pct (0 - 100).\"\"\"\n    return await self.set_status(color_temp=color_temp)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.set_color_value","title":"set_color_value  <code>async</code>  \u21b2","text":"<pre><code>set_color_value(color_value: float) -&gt; bool\n</code></pre> <p>Set Value of multicolor bulb in pct (1 - 100).</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_color_value(self, color_value: float) -&gt; bool:\n    \"\"\"Set Value of multicolor bulb in pct (1 - 100).\"\"\"\n    # Equivalent to brightness level, when in color mode.\n    return await self.set_status(color_value=color_value)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.set_hsv","title":"set_hsv  <code>async</code>  \u21b2","text":"<pre><code>set_hsv(\n    hue: float, saturation: float, value: float\n) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set HSV if supported by bulb.</p> <p>Parameters:</p> Name Type Description Default <code>hue</code> <code>float</code> <p>Hue 0-360</p> required <code>saturation</code> <code>float</code> <p>Saturation 0-100</p> required <code>value</code> <code>float</code> <p>Value 0-100</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_hsv(self, hue: float, saturation: float, value: float) -&gt; bool:\n    new_color = Color.from_hsv(hue=hue, saturation=saturation, value=value)\n    if new_color is None:\n        logger.warning('Invalid HSV values')\n        return False\n\n    # the api expects the hsv Value in the brightness parameter\n    payload_data = self._build_status_payload(\n        hue=hue,\n        saturation=saturation,\n        value=value,\n    )\n    if payload_data is None:\n        return False\n    resp = await self._call_valceno_api('setLightStatusV2', payload_data)\n    if resp is None:\n        return False\n\n    r_dict = Helpers.process_dev_response(logger, 'set_hsv', self, resp)\n    if r_dict is None:\n        return False\n\n    status = bulb_models.ResponseValcenoStatus.from_dict(r_dict)\n    self._interpret_apicall_result(status)\n    return True\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.set_rgb","title":"set_rgb  <code>async</code>  \u21b2","text":"<pre><code>set_rgb(red: float, green: float, blue: float) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set RGB if supported by bulb.</p> <p>Parameters:</p> Name Type Description Default <code>red</code> <code>float</code> <p>Red 0-255</p> required <code>green</code> <code>float</code> <p>green 0-255</p> required <code>blue</code> <code>float</code> <p>blue 0-255</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_rgb(self, red: float, green: float, blue: float) -&gt; bool:\n    new_color = Color.from_rgb(red=red, green=green, blue=blue)\n    if new_color is None:\n        logger.debug('Invalid RGB values')\n        return False\n\n    return await self.set_hsv(\n        hue=new_color.hsv.hue,\n        saturation=new_color.hsv.saturation,\n        value=new_color.hsv.value,\n    )\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.set_status","title":"set_status  <code>async</code>  \u21b2","text":"<pre><code>set_status(\n    *,\n    brightness: float | None = None,\n    color_temp: float | None = None,\n    color_hue: float | None = None,\n    color_saturation: float | None = None,\n    color_value: float | None = None,\n    color_mode: str | None = None,\n) -&gt; bool\n</code></pre> <p>Set multicolor bulb parameters.</p> <p>No arguments turns bulb on. Kwargs only</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <code>int</code> <p>brightness between 0 and 100</p> <code>None</code> <code>color_temp</code> <code>int</code> <p>color temperature between 0 and 100</p> <code>None</code> <code>color_mode</code> <code>int</code> <p>color mode hsv or white</p> <code>None</code> <code>color_hue</code> <code>float</code> <p>color hue between 0 and 360</p> <code>None</code> <code>color_saturation</code> <code>float</code> <p>color saturation between 0 and 100</p> <code>None</code> <code>color_value</code> <code>int</code> <p>color value between 0 and 100</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if call was successful, False otherwise</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_status(\n    self,\n    *,\n    brightness: float | None = None,\n    color_temp: float | None = None,\n    color_hue: float | None = None,\n    color_saturation: float | None = None,\n    color_value: float | None = None,\n    color_mode: str | None = None,\n) -&gt; bool:\n    \"\"\"Set multicolor bulb parameters.\n\n    No arguments turns bulb on. **Kwargs only**\n\n    Args:\n        brightness (int, optional): brightness between 0 and 100\n        color_temp (int, optional): color temperature between 0 and 100\n        color_mode (int, optional): color mode hsv or white\n        color_hue (float, optional): color hue between 0 and 360\n        color_saturation (float, optional): color saturation between 0 and 100\n        color_value (int, optional): color value between 0 and 100\n\n    Returns:\n        bool : True if call was successful, False otherwise\n    \"\"\"\n    payload_data = self._build_status_payload(\n        brightness=brightness,\n        color_temp=color_temp,\n        hue=color_hue,\n        saturation=color_saturation,\n        value=color_value,\n        color_mode=color_mode,\n    )\n    if payload_data == self._payload_base():\n        logger.debug('No state change.')\n        return False\n    if payload_data is None:\n        logger.debug('Invalid payload data')\n        return False\n\n    r_dict = await self._call_valceno_api('setLightStatusV2', payload_data)\n    if r_dict is None:\n        return False\n\n    r_dict = Helpers.process_dev_response(logger, 'set_status', self, r_dict)\n    if r_dict is None:\n        return False\n\n    r_model = bulb_models.ResponseValcenoStatus.from_dict(r_dict)\n    self._interpret_apicall_result(r_model)\n    return True\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    \"\"\"Set timer for device.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Args:\n        duration (int): Duration in seconds.\n        action (str | None): Action to take when timer expires.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del duration\n    del action\n    logger.debug('Not implemented - set_timer')\n    return False\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.set_white_mode","title":"set_white_mode  <code>async</code>  \u21b2","text":"<pre><code>set_white_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set white mode if supported by bulb.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def set_white_mode(self) -&gt; bool:\n    return await self.set_status(color_mode='white')\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.toggle","title":"toggle  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>toggle(status: str) -&gt; bool\n</code></pre> Deprecated <p>toggle() is deprecated, use toggle_switch(toggle: bool | None = None) instead</p> <p>Deprecated - use toggle_switch().</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>@deprecated(\n    'toggle() is deprecated, use toggle_switch(toggle: bool | None = None) instead'\n)\nasync def toggle(self, status: str) -&gt; bool:\n    \"\"\"Deprecated - use toggle_switch().\"\"\"\n    status_bool = status == DeviceStatus.ON\n    return await self.toggle_switch(status_bool)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncbulb.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.device_status == DeviceStatus.OFF\n\n    if toggle == self.state.device_status:\n        logger.debug('Device already in requested state')\n        return True\n\n    payload_data = {\n        'id': 0,\n        'enabled': toggle,\n    }\n    method = 'setSwitch'\n\n    r_dict = await self._call_valceno_api(method, payload_data)\n\n    if r_dict is None:\n        self.state.device_status = DeviceStatus.OFF\n        return False\n    self.state.device_status = DeviceStatus.ON if toggle else DeviceStatus.OFF\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.devices.vesyncbulb.VeSyncBulbValcenoA19MC.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb","title":"pyvesync.base_devices.bulb_base.VeSyncBulb \u21b2","text":"<pre><code>VeSyncBulb(\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: BulbMap,\n)\n</code></pre> <p>               Bases: <code>VeSyncBaseToggleDevice[BulbState]</code></p> <p>Base class for VeSync Bulbs.</p> <p>Abstract base class to provide methods for controlling and getting details of VeSync bulbs. Inherits from <code>VeSyncBaseDevice</code>. This class should not be used directly for devices, but rather subclassed for each bulb.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>Device details from API.</p> required <code>manager</code> <code>VeSync</code> <p>VeSync API manager.</p> required <code>feature_map</code> <code>BulbMap</code> <p>Feature map for bulb.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>BulbState</code> <p>Device state object Each device has a separate state base class in the base_devices module.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Initialize VeSync device base class.</p> <p>Initialize VeSync smart bulb base class.</p> Source code in <code>src\\pyvesync\\base_devices\\bulb_base.py</code> <pre><code>def __init__(\n    self, details: ResponseDeviceDetailsModel, manager: VeSync, feature_map: BulbMap\n) -&gt; None:\n    \"\"\"Initialize VeSync smart bulb base class.\"\"\"\n    super().__init__(details, manager, feature_map)\n    self.state: BulbState = BulbState(self, details, feature_map)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager = manager\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: BulbState = BulbState(self, details, feature_map)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.supports_brightness","title":"supports_brightness  <code>property</code>  \u21b2","text":"<pre><code>supports_brightness: bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Return True if bulb supports brightness.</p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.supports_color_temp","title":"supports_color_temp  <code>property</code>  \u21b2","text":"<pre><code>supports_color_temp: bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Return True if bulb supports color temperature.</p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.supports_multicolor","title":"supports_multicolor  <code>property</code>  \u21b2","text":"<pre><code>supports_multicolor: bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Return True if bulb supports backlight.</p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb-functions","title":"Functions\u21b2","text":""},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    \"\"\"Clear timer for device from API.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    logger.debug('Not implemented - clear_timer')\n    return False\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.enable_white_mode","title":"enable_white_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>enable_white_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> Deprecated <p>Use <code>set_white_mode</code> instead.</p> <p>Enable white mode if supported by bulb.</p> Source code in <code>src\\pyvesync\\base_devices\\bulb_base.py</code> <pre><code>@deprecated('Use `set_white_mode` instead.')\nasync def enable_white_mode(self) -&gt; bool:\n    \"\"\"Enable white mode if supported by bulb.\"\"\"\n    return await self.set_white_mode()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.get_details","title":"get_details  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>@abstractmethod\nasync def get_details(self) -&gt; None:\n    \"\"\"Get device details.\n\n    This method is defined in each device class to contain\n    the logic to pull the device state from the API and update\n    the device's `state` attribute. The `update()` method should\n    be called to update the device state.\n    \"\"\"\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    \"\"\"Get timer for device from API and set the `state.Timer` attribute.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Note:\n        This method may not be implemented for all devices. Please\n        open an issue if there is an error.\n    \"\"\"\n    logger.debug('Not implemented - get_timer')\n    return None\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.set_brightness","title":"set_brightness  <code>async</code>  \u21b2","text":"<pre><code>set_brightness(brightness: int) -&gt; bool\n</code></pre> <p>Set brightness if supported by bulb.</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <code>NUMERIC_T</code> <p>Brightness 0-100</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\bulb_base.py</code> <pre><code>async def set_brightness(self, brightness: int) -&gt; bool:\n    \"\"\"Set brightness if supported by bulb.\n\n    Args:\n        brightness (NUMERIC_T): Brightness 0-100\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del brightness\n    logger.warning('Brightness not supported/configured by this bulb')\n    return False\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.set_color_mode","title":"set_color_mode  <code>async</code>  \u21b2","text":"<pre><code>set_color_mode(color_mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set color mode if supported by bulb.</p> <p>Parameters:</p> Name Type Description Default <code>color_mode</code> <code>str</code> <p>Color mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\bulb_base.py</code> <pre><code>async def set_color_mode(self, color_mode: str) -&gt; bool:\n    \"\"\"Set color mode if supported by bulb.\n\n    Args:\n        color_mode (str): Color mode to set.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del color_mode\n    if self.supports_multicolor:\n        logger.debug('Color mode is not configured on this bulb.')\n    else:\n        logger.warning('Color mode not supported by this bulb')\n    return False\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.set_color_temp","title":"set_color_temp  <code>async</code>  \u21b2","text":"<pre><code>set_color_temp(color_temp: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set color temperature if supported by bulb.</p> <p>Parameters:</p> Name Type Description Default <code>color_temp</code> <code>int</code> <p>Color temperature 0-100</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\bulb_base.py</code> <pre><code>async def set_color_temp(self, color_temp: int) -&gt; bool:\n    \"\"\"Set color temperature if supported by bulb.\n\n    Args:\n        color_temp (int): Color temperature 0-100\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del color_temp\n    if self.supports_color_temp:\n        logger.debug('Color temperature is not configured on this bulb.')\n    else:\n        logger.debug('Color temperature not supported by this bulb')\n    return False\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.set_hsv","title":"set_hsv  <code>async</code>  \u21b2","text":"<pre><code>set_hsv(\n    hue: float, saturation: float, value: float\n) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set HSV if supported by bulb.</p> <p>Parameters:</p> Name Type Description Default <code>hue</code> <code>float</code> <p>Hue 0-360</p> required <code>saturation</code> <code>float</code> <p>Saturation 0-100</p> required <code>value</code> <code>float</code> <p>Value 0-100</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\bulb_base.py</code> <pre><code>async def set_hsv(self, hue: float, saturation: float, value: float) -&gt; bool:\n    \"\"\"Set HSV if supported by bulb.\n\n    Args:\n        hue (float): Hue 0-360\n        saturation (float): Saturation 0-100\n        value (float): Value 0-100\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del hue, saturation, value\n    if not self.supports_multicolor:\n        logger.debug('Color mode is not supported on this bulb.')\n    else:\n        logger.debug('set_hsv not configured for %s bulb', self.device_type)\n    return False\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.set_rgb","title":"set_rgb  <code>async</code>  \u21b2","text":"<pre><code>set_rgb(red: float, green: float, blue: float) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set RGB if supported by bulb.</p> <p>Parameters:</p> Name Type Description Default <code>red</code> <code>float</code> <p>Red 0-255</p> required <code>green</code> <code>float</code> <p>green 0-255</p> required <code>blue</code> <code>float</code> <p>blue 0-255</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\bulb_base.py</code> <pre><code>async def set_rgb(self, red: float, green: float, blue: float) -&gt; bool:\n    \"\"\"Set RGB if supported by bulb.\n\n    Args:\n        red (float): Red 0-255\n        green (float): green 0-255\n        blue (float): blue 0-255\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del red, green, blue\n    if not self.supports_multicolor:\n        logger.debug('Color mode is not supported on this bulb.')\n    else:\n        logger.debug('set_rgb not configured for %s bulb', self.device_type)\n    return False\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    \"\"\"Set timer for device.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Args:\n        duration (int): Duration in seconds.\n        action (str | None): Action to take when timer expires.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del duration\n    del action\n    logger.debug('Not implemented - set_timer')\n    return False\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.set_white_mode","title":"set_white_mode  <code>async</code>  \u21b2","text":"<pre><code>set_white_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBulb</code></p> <p>Set white mode if supported by bulb.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\bulb_base.py</code> <pre><code>async def set_white_mode(self) -&gt; bool:\n    \"\"\"Set white mode if supported by bulb.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    if self.supports_multicolor:\n        logger.debug('White mode is not configured on this bulb.')\n    else:\n        logger.warning('White mode not supported by this bulb')\n    return False\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.toggle_switch","title":"toggle_switch  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>@abstractmethod\nasync def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Toggle device power on or off.\n\n    Args:\n        toggle (bool | None): True to turn on, False to turn off, None to toggle.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/bulbs/#pyvesync.base_devices.bulb_base.VeSyncBulb.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/fans/","title":"VeSync Fans (NOT Purifiers or Humidifiers)\u21b2","text":""},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState","title":"pyvesync.base_devices.fan_base.FanState \u21b2","text":"<p>               Bases: <code>DeviceState</code></p> <p>Base state class for Purifiers.</p> <p>Not all attributes are supported by all devices.</p> <p>Attributes:</p> Name Type Description <code>display_set_status</code> <code>str</code> <p>Display set status.</p> <code>display_status</code> <code>str</code> <p>Display status.</p> <code>displaying_type</code> <code>str</code> <p>Displaying type.</p> <code>fan_level</code> <code>int</code> <p>Fan level.</p> <code>fan_set_level</code> <code>int</code> <p>Fan set level.</p> <code>humidity</code> <code>int</code> <p>Humidity level.</p> <code>mode</code> <code>str</code> <p>Mode of device.</p> <code>mute_set_status</code> <code>str</code> <p>Mute set status.</p> <code>mute_status</code> <code>str</code> <p>Mute status.</p> <code>oscillation_set_status</code> <code>str</code> <p>Oscillation set status.</p> <code>oscillation_status</code> <code>str</code> <p>Oscillation status.</p> <code>sleep_change_fan_level</code> <code>str</code> <p>Sleep change fan level.</p> <code>sleep_fallasleep_remain</code> <code>str</code> <p>Sleep fall asleep remain.</p> <code>sleep_oscillation_switch</code> <code>str</code> <p>Sleep oscillation switch.</p> <code>sleep_preference_type</code> <code>str</code> <p>Sleep preference type.</p> <code>temperature</code> <code>int</code> <p>Temperature.</p> <code>thermal_comfort</code> <code>int</code> <p>Thermal comfort.</p> <code>timer</code> <code>Timer</code> <p>Timer object.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>class FanState(DeviceState):\n    \"\"\"Base state class for Purifiers.\n\n    Not all attributes are supported by all devices.\n\n\n    Attributes:\n        display_set_status (str): Display set status.\n        display_status (str): Display status.\n        displaying_type (str): Displaying type.\n        fan_level (int): Fan level.\n        fan_set_level (int): Fan set level.\n        humidity (int): Humidity level.\n        mode (str): Mode of device.\n        mute_set_status (str): Mute set status.\n        mute_status (str): Mute status.\n        oscillation_set_status (str): Oscillation set status.\n        oscillation_status (str): Oscillation status.\n        sleep_change_fan_level (str): Sleep change fan level.\n        sleep_fallasleep_remain (str): Sleep fall asleep remain.\n        sleep_oscillation_switch (str): Sleep oscillation switch.\n        sleep_preference_type (str): Sleep preference type.\n        temperature (int): Temperature.\n        thermal_comfort (int): Thermal comfort.\n        timer (Timer): Timer object.\n    \"\"\"\n\n    __slots__ = (\n        'display_set_status',\n        'display_status',\n        'displaying_type',\n        'fan_level',\n        'fan_set_level',\n        'humidity',\n        'mode',\n        'mute_set_status',\n        'mute_status',\n        'oscillation_set_status',\n        'oscillation_status',\n        'sleep_change_fan_level',\n        'sleep_fallasleep_remain',\n        'sleep_oscillation_switch',\n        'sleep_preference_type',\n        'temperature',\n        'thermal_comfort',\n    )\n\n    def __init__(\n        self,\n        device: VeSyncFanBase,\n        details: ResponseDeviceDetailsModel,\n        feature_map: FanMap,\n    ) -&gt; None:\n        \"\"\"Initialize Purifier State.\n\n        Args:\n            device (VeSyncFanBase): Device object.\n            details (ResponseDeviceDetailsModel): Device details.\n            feature_map (FanMap): Feature map.\n        \"\"\"\n        super().__init__(device, details, feature_map)\n        self.mode: str = FanModes.UNKNOWN\n        self.fan_level: int | None = None\n        self.fan_set_level: int | None = None\n        self.humidity: int | None = None\n        self.temperature: int | None = None\n        self.thermal_comfort: int | None = None\n        self.sleep_preference_type: str | None = None\n        self.sleep_fallasleep_remain: str | None = None\n        self.sleep_oscillation_switch: str | None = None\n        self.sleep_change_fan_level: str | None = None\n        self.mute_status: str | None = None\n        self.mute_set_status: str | None = None\n        self.oscillation_status: str | None = None\n        self.oscillation_set_status: str | None = None\n        self.display_status: str | None = None\n        self.display_set_status: str | None = None\n        self.displaying_type: str | None = None\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.active_time","title":"active_time  <code>instance-attribute</code>  \u21b2","text":"<pre><code>active_time: int | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.connection_status","title":"connection_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_status: str = connectionStatus or UNKNOWN\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.device","title":"device  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device = device\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.device_status","title":"device_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_status: str = deviceStatus or UNKNOWN\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.display_set_status","title":"display_set_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>display_set_status: str | None = None\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.display_status","title":"display_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>display_status: str | None = None\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.displaying_type","title":"displaying_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>displaying_type: str | None = None\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.fan_level","title":"fan_level  <code>instance-attribute</code>  \u21b2","text":"<pre><code>fan_level: int | None = None\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.fan_set_level","title":"fan_set_level  <code>instance-attribute</code>  \u21b2","text":"<pre><code>fan_set_level: int | None = None\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features = features\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.humidity","title":"humidity  <code>instance-attribute</code>  \u21b2","text":"<pre><code>humidity: int | None = None\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.last_update_ts","title":"last_update_ts  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_update_ts: int | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.mode","title":"mode  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mode: str = UNKNOWN\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.mute_set_status","title":"mute_set_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mute_set_status: str | None = None\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.mute_status","title":"mute_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mute_status: str | None = None\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.oscillation_set_status","title":"oscillation_set_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>oscillation_set_status: str | None = None\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.oscillation_status","title":"oscillation_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>oscillation_status: str | None = None\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.sleep_change_fan_level","title":"sleep_change_fan_level  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sleep_change_fan_level: str | None = None\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.sleep_fallasleep_remain","title":"sleep_fallasleep_remain  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sleep_fallasleep_remain: str | None = None\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.sleep_oscillation_switch","title":"sleep_oscillation_switch  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sleep_oscillation_switch: str | None = None\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.sleep_preference_type","title":"sleep_preference_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sleep_preference_type: str | None = None\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.temperature","title":"temperature  <code>instance-attribute</code>  \u21b2","text":"<pre><code>temperature: int | None = None\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.thermal_comfort","title":"thermal_comfort  <code>instance-attribute</code>  \u21b2","text":"<pre><code>thermal_comfort: int | None = None\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.timer","title":"timer  <code>instance-attribute</code>  \u21b2","text":"<pre><code>timer: Timer | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState-functions","title":"Functions\u21b2","text":""},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.as_tuple","title":"as_tuple \u21b2","text":"<pre><code>as_tuple() -&gt; tuple[tuple[str, Any], ...]\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to tuple of (name, value) tuples.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def as_tuple(self) -&gt; tuple[tuple[str, Any], ...]:\n    \"\"\"Convert state to tuple of (name, value) tuples.\"\"\"\n    return tuple((k, v) for k, v in self._serialize().items())\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.display","title":"display \u21b2","text":"<pre><code>display() -&gt; None\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Print formatted state to stdout.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self) -&gt; None:\n    \"\"\"Print formatted state to stdout.\"\"\"\n    for name, val in self._serialize().items():\n        print(f'{name:.&lt;30} {val}')  # noqa: T201\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to dictionary.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Convert state to dictionary.\"\"\"\n    return self._serialize()\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(indent: bool = False) -&gt; str\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Dump state to JSON string.</p> <p>Parameters:</p> Name Type Description Default <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device state.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, indent: bool = False) -&gt; str:\n    \"\"\"Dump state to JSON string.\n\n    Args:\n        indent (bool): If True, indent JSON output, defaults to False.\n\n    Returns:\n        str: JSON formatted string of device state.\n    \"\"\"\n    return self.to_jsonb(indent=indent).decode()\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(indent: bool = False) -&gt; bytes\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to JSON bytes.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, indent: bool = False) -&gt; bytes:\n    \"\"\"Convert state to JSON bytes.\"\"\"\n    if indent:\n        return orjson.dumps(\n            self._serialize(), option=orjson.OPT_NON_STR_KEYS | orjson.OPT_INDENT_2\n        )\n    return orjson.dumps(self._serialize(), option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.FanState.update_ts","title":"update_ts \u21b2","text":"<pre><code>update_ts() -&gt; None\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Update last update timestamp as UTC timestamp.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def update_ts(self) -&gt; None:\n    \"\"\"Update last update timestamp as UTC timestamp.\"\"\"\n    self.last_update_ts = int(dt.now(tz=UTC).timestamp())\n</code></pre>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan","title":"pyvesync.devices.vesyncfan.VeSyncTowerFan \u21b2","text":"<pre><code>VeSyncTowerFan(\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: FanMap,\n)\n</code></pre> <p>               Bases: <code>BypassV2Mixin</code>, <code>VeSyncFanBase</code></p> <p>Levoit Tower Fan Device Class.</p> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Initialize VeSync device base class.</p> <p>Initialize VeSync Tower Fan Base Class.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>Device details.</p> required <code>manager</code> <code>VeSync</code> <p>Manager.</p> required <code>feature_map</code> <code>FanMap</code> <p>Feature map.</p> required See Also <p>See device_map for configured features and modes.</p> <p>Initialize the VeSync Base API V2 Fan Class.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.fan_levels","title":"fan_levels  <code>instance-attribute</code>  \u21b2","text":"<pre><code>fan_levels: list[int] = fan_levels\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.modes","title":"modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>modes: list[str] = modes\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.sleep_preferences","title":"sleep_preferences  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sleep_preferences: list[str] = sleep_preferences\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: FanState = FanState(self, details, feature_map)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.supports_displaying_type","title":"supports_displaying_type  <code>property</code>  \u21b2","text":"<pre><code>supports_displaying_type: bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Return True if device supports displaying type.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.supports_mute","title":"supports_mute  <code>property</code>  \u21b2","text":"<pre><code>supports_mute: bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Return True if device supports mute.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.supports_oscillation","title":"supports_oscillation  <code>property</code>  \u21b2","text":"<pre><code>supports_oscillation: bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Return True if device supports oscillation.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan-functions","title":"Functions\u21b2","text":""},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.advanced_sleep_mode","title":"advanced_sleep_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>advanced_sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> Deprecated <p>Use <code>set_advanced_sleep_mode</code> method instead</p> <p>Set advanced sleep mode.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.call_bypassv2_api","title":"call_bypassv2_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv2_api(\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p> <p>Send Bypass V2 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V2 API.</p> <p>Parameters:</p> Name Type Description Default <code>payload_method</code> <code>str</code> <p>The method to use in the payload dict.</p> required <code>data</code> <code>dict | None</code> <p>The data to send in the request.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypassV2'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the API url, defaults to <code>bypassV2</code>, e.g. <code>/cloud/v2/deviceManaged/bypassV2</code>.</p> <code>'bypassV2'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.manual_mode","title":"manual_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> Deprecated <p>Use <code>set_manual_mode</code> method instead</p> <p>Adapter to set mode to normal.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.mode_toggle","title":"mode_toggle  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>mode_toggle(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> Deprecated <p>Use <code>set_mode</code> method instead</p> <p>Set mode to specified mode.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.normal_mode","title":"normal_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>normal_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> Deprecated <p>Use <code>set_normal_mode</code> method instead</p> <p>Set mode to normal.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.set_advanced_sleep_mode","title":"set_advanced_sleep_mode  <code>async</code>  \u21b2","text":"<pre><code>set_advanced_sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set Purifier to Advanced Sleep Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>This method is not supported by all devices, will return false with warning debug message if not supported.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.set_auto_mode","title":"set_auto_mode  <code>async</code>  \u21b2","text":"<pre><code>set_auto_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set Purifier to Auto Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>This method is not supported by all devices, will return false with warning debug message if not supported.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.set_fan_speed","title":"set_fan_speed  <code>async</code>  \u21b2","text":"<pre><code>set_fan_speed(speed: int | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set Purifier Fan Speed.</p> <p>Parameters:</p> Name Type Description Default <code>speed</code> <code>int</code> <p>Fan speed level according to device specs.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.set_manual_mode","title":"set_manual_mode  <code>async</code>  \u21b2","text":"<pre><code>set_manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set Purifier to Manual Mode - Normal Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>This method is not supported by all devices, will return false with warning debug message if not supported.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.set_mode","title":"set_mode  <code>async</code>  \u21b2","text":"<pre><code>set_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set Purifier Mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Mode to set, varies by device type.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.set_normal_mode","title":"set_normal_mode  <code>async</code>  \u21b2","text":"<pre><code>set_normal_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set Purifier to Normal Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>This method is not supported by all devices, will return false with warning debug message if not supported.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.set_sleep_mode","title":"set_sleep_mode  <code>async</code>  \u21b2","text":"<pre><code>set_sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set Purifier to Sleep Mode.</p> <p>This is also referred to as Advanced Sleep Mode on some devices.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>This method is not supported by all devices, will return false with warning debug message if not supported.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.set_turbo_mode","title":"set_turbo_mode  <code>async</code>  \u21b2","text":"<pre><code>set_turbo_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set Purifier to Turbo Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>This method is not supported by all devices, will return false with warning debug message if not supported.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.sleep_mode","title":"sleep_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> Deprecated <p>Use <code>set_sleep_mode</code> method instead</p> <p>Adapter to set advanced sleep mode.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.toggle_display","title":"toggle_display  <code>async</code>  \u21b2","text":"<pre><code>toggle_display(toggle: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Toggle Display on/off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>Display state.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.toggle_displaying_type","title":"toggle_displaying_type  <code>async</code>  \u21b2","text":"<pre><code>toggle_displaying_type(toggle: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Toggle displaying type on/off.</p> <p>This functionality is unknown but was in the API calls.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>Displaying type state.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>true if success.</p> <p>Set displaying type on/off - Unknown functionality.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.toggle_mute","title":"toggle_mute  <code>async</code>  \u21b2","text":"<pre><code>toggle_mute(toggle: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Toggle mute on/off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>True to turn mute on, False to turn off</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False if not</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.toggle_oscillation","title":"toggle_oscillation  <code>async</code>  \u21b2","text":"<pre><code>toggle_oscillation(toggle: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Toggle Oscillation on/off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>Oscillation state.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>true if success.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.turn_off_display","title":"turn_off_display  <code>async</code>  \u21b2","text":"<pre><code>turn_off_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Turn off Display.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.turn_off_mute","title":"turn_off_mute  <code>async</code>  \u21b2","text":"<pre><code>turn_off_mute() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set toggle_mute to off.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.turn_off_oscillation","title":"turn_off_oscillation  <code>async</code>  \u21b2","text":"<pre><code>turn_off_oscillation() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set toggle_oscillation to off.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.turn_on_display","title":"turn_on_display  <code>async</code>  \u21b2","text":"<pre><code>turn_on_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Turn on Display.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.turn_on_mute","title":"turn_on_mute  <code>async</code>  \u21b2","text":"<pre><code>turn_on_mute() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set toggle_mute to on.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.turn_on_oscillation","title":"turn_on_oscillation  <code>async</code>  \u21b2","text":"<pre><code>turn_on_oscillation() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set toggle_oscillation to on.</p>"},{"location":"devices/fans/#pyvesync.devices.vesyncfan.VeSyncTowerFan.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase","title":"pyvesync.base_devices.fan_base.VeSyncFanBase \u21b2","text":"<p>               Bases: <code>VeSyncBaseToggleDevice</code></p> <p>Base device for VeSync tower fans.</p> <p>Inherits from VeSyncBaseToggleDevice and VeSyncBaseDevice.</p> <p>Attributes:</p> Name Type Description <code>fan_levels</code> <code>list[int]</code> <p>Fan levels supported by device.</p> <code>modes</code> <code>list[str]</code> <p>Modes supported by device.</p> <code>sleep_preferences</code> <code>list[str]</code> <p>Sleep preferences supported by device.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>class VeSyncFanBase(VeSyncBaseToggleDevice):\n    \"\"\"Base device for VeSync tower fans.\n\n    Inherits from\n    [VeSyncBaseToggleDevice][pyvesync.base_devices.vesyncbasedevice.VeSyncBaseToggleDevice]\n    and [VeSyncBaseDevice][pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice].\n\n    Attributes:\n        fan_levels (list[int]): Fan levels supported by device.\n        modes (list[str]): Modes supported by device.\n        sleep_preferences (list[str]): Sleep preferences supported by device.\n    \"\"\"\n\n    __slots__ = (\n        'fan_levels',\n        'modes',\n        'sleep_preferences',\n    )\n\n    def __init__(\n        self,\n        details: ResponseDeviceDetailsModel,\n        manager: VeSync,\n        feature_map: FanMap,\n    ) -&gt; None:\n        \"\"\"Initialize VeSync Tower Fan Base Class.\n\n        Args:\n            details (ResponseDeviceDetailsModel): Device details.\n            manager (VeSync): Manager.\n            feature_map (FanMap): Feature map.\n\n        See Also:\n            See [device_map][pyvesync.device_map] for configured features and modes.\n        \"\"\"\n        super().__init__(details, manager, feature_map)\n        self.features: list[str] = feature_map.features\n        self.state: FanState = FanState(self, details, feature_map)\n        self.modes: list[str] = feature_map.modes\n        self.fan_levels: list[int] = feature_map.fan_levels\n        self.sleep_preferences: list[str] = feature_map.sleep_preferences\n\n    @property\n    def supports_oscillation(self) -&gt; bool:\n        \"\"\"Return True if device supports oscillation.\"\"\"\n        return FanFeatures.OSCILLATION in self.features\n\n    @property\n    def supports_mute(self) -&gt; bool:\n        \"\"\"Return True if device supports mute.\"\"\"\n        return FanFeatures.SOUND in self.features\n\n    @property\n    def supports_displaying_type(self) -&gt; bool:\n        \"\"\"Return True if device supports displaying type.\"\"\"\n        return FanFeatures.DISPLAYING_TYPE in self.features\n\n    async def toggle_display(self, toggle: bool) -&gt; bool:\n        \"\"\"Toggle Display on/off.\n\n        Args:\n            toggle (bool): Display state.\n\n        Returns:\n            bool: Success of request.\n        \"\"\"\n        del toggle\n        return False\n\n    async def turn_on_display(self) -&gt; bool:\n        \"\"\"Turn on Display.\n\n        Returns:\n            bool: Success of request\n        \"\"\"\n        return await self.toggle_display(True)\n\n    async def turn_off_display(self) -&gt; bool:\n        \"\"\"Turn off Display.\n\n        Returns:\n            bool: Success of request\n        \"\"\"\n        return await self.toggle_display(False)\n\n    @abstractmethod\n    async def set_mode(self, mode: str) -&gt; bool:\n        \"\"\"Set Purifier Mode.\n\n        Args:\n            mode (str): Mode to set, varies by device type.\n\n        Returns:\n            bool: Success of request.\n        \"\"\"\n\n    @abstractmethod\n    async def set_fan_speed(self, speed: int | None = None) -&gt; bool:\n        \"\"\"Set Purifier Fan Speed.\n\n        Args:\n            speed (int, optional): Fan speed level according to device specs.\n\n        Returns:\n            bool: Success of request.\n        \"\"\"\n\n    async def set_auto_mode(self) -&gt; bool:\n        \"\"\"Set Purifier to Auto Mode.\n\n        Returns:\n            bool: Success of request.\n\n        Note:\n            This method is not supported by all devices, will return\n            false with warning debug message if not supported.\n        \"\"\"\n        if FanModes.AUTO in self.modes:\n            return await self.set_mode(FanModes.AUTO)\n        logger.warning('Auto mode not supported for this device.')\n        return False\n\n    async def set_advanced_sleep_mode(self) -&gt; bool:\n        \"\"\"Set Purifier to Advanced Sleep Mode.\n\n        Returns:\n            bool: Success of request.\n\n        Note:\n            This method is not supported by all devices, will return\n            false with warning debug message if not supported.\n        \"\"\"\n        if FanModes.ADVANCED_SLEEP in self.modes:\n            return await self.set_mode(FanModes.ADVANCED_SLEEP)\n        logger.warning('Advanced Sleep mode not supported for this device.')\n        return False\n\n    async def set_sleep_mode(self) -&gt; bool:\n        \"\"\"Set Purifier to Sleep Mode.\n\n        This is also referred to as Advanced Sleep Mode on some devices.\n\n        Returns:\n            bool: Success of request.\n\n        Note:\n            This method is not supported by all devices, will return\n            false with warning debug message if not supported.\n        \"\"\"\n        if FanModes.ADVANCED_SLEEP in self.modes:\n            return await self.set_mode(FanModes.ADVANCED_SLEEP)\n        logger.warning('Sleep mode not supported for this device.')\n        return False\n\n    async def set_manual_mode(self) -&gt; bool:\n        \"\"\"Set Purifier to Manual Mode - Normal Mode.\n\n        Returns:\n            bool: Success of request.\n\n        Note:\n            This method is not supported by all devices, will return\n            false with warning debug message if not supported.\n        \"\"\"\n        if FanModes.NORMAL in self.modes:\n            return await self.set_mode(FanModes.NORMAL)\n        logger.warning('Manual mode not supported for this device.')\n        return False\n\n    async def set_normal_mode(self) -&gt; bool:\n        \"\"\"Set Purifier to Normal Mode.\n\n        Returns:\n            bool: Success of request.\n\n        Note:\n            This method is not supported by all devices, will return\n            false with warning debug message if not supported.\n        \"\"\"\n        if FanModes.NORMAL in self.modes:\n            return await self.set_mode(FanModes.NORMAL)\n        logger.warning('Normal mode not supported for this device.')\n        return False\n\n    async def set_turbo_mode(self) -&gt; bool:\n        \"\"\"Set Purifier to Turbo Mode.\n\n        Returns:\n            bool: Success of request.\n\n        Note:\n            This method is not supported by all devices, will return\n            false with warning debug message if not supported.\n        \"\"\"\n        if FanModes.TURBO in self.modes:\n            return await self.set_mode(FanModes.TURBO)\n        logger.warning('Turbo mode not supported for this device.')\n        return False\n\n    async def toggle_oscillation(self, toggle: bool) -&gt; bool:\n        \"\"\"Toggle Oscillation on/off.\n\n        Args:\n            toggle (bool): Oscillation state.\n\n        Returns:\n            bool: true if success.\n        \"\"\"\n        del toggle\n        if self.supports_oscillation:\n            logger.debug('Oscillation not configured for this device.')\n        else:\n            logger.debug('Oscillation not supported for this device.')\n        return False\n\n    async def turn_on_oscillation(self) -&gt; bool:\n        \"\"\"Set toggle_oscillation to on.\"\"\"\n        return await self.toggle_oscillation(True)\n\n    async def turn_off_oscillation(self) -&gt; bool:\n        \"\"\"Set toggle_oscillation to off.\"\"\"\n        return await self.toggle_oscillation(False)\n\n    async def toggle_mute(self, toggle: bool) -&gt; bool:\n        \"\"\"Toggle mute on/off.\n\n        Parameters:\n            toggle (bool): True to turn mute on, False to turn off\n\n        Returns:\n            bool : True if successful, False if not\n        \"\"\"\n        del toggle\n        if self.supports_mute:\n            logger.debug('Mute not configured for this device.')\n        else:\n            logger.debug('Mute not supported for this device.')\n        return False\n\n    async def turn_on_mute(self) -&gt; bool:\n        \"\"\"Set toggle_mute to on.\"\"\"\n        return await self.toggle_mute(True)\n\n    async def turn_off_mute(self) -&gt; bool:\n        \"\"\"Set toggle_mute to off.\"\"\"\n        return await self.toggle_mute(False)\n\n    async def toggle_displaying_type(self, toggle: bool) -&gt; bool:\n        \"\"\"Toggle displaying type on/off.\n\n        This functionality is unknown but was in the API calls.\n\n        Args:\n            toggle (bool): Displaying type state.\n\n        Returns:\n            bool: true if success.\n        \"\"\"\n        del toggle\n        if self.supports_displaying_type:\n            logger.debug('Displaying type not configured for this device.')\n        else:\n            logger.debug('Displaying type not supported for this device.')\n        return False\n\n    @deprecated('Use `set_normal_mode` method instead')\n    async def normal_mode(self) -&gt; bool:\n        \"\"\"Set mode to normal.\"\"\"\n        return await self.set_normal_mode()\n\n    @deprecated('Use `set_manual_mode` method instead')\n    async def manual_mode(self) -&gt; bool:\n        \"\"\"Adapter to set mode to normal.\"\"\"\n        return await self.set_normal_mode()\n\n    @deprecated('Use `set_advanced_sleep_mode` method instead')\n    async def advanced_sleep_mode(self) -&gt; bool:\n        \"\"\"Set advanced sleep mode.\"\"\"\n        return await self.set_mode('advancedSleep')\n\n    @deprecated('Use `set_sleep_mode` method instead')\n    async def sleep_mode(self) -&gt; bool:\n        \"\"\"Adapter to set advanced sleep mode.\"\"\"\n        return await self.set_advanced_sleep_mode()\n\n    @deprecated('Use `set_mode` method instead')\n    async def mode_toggle(self, mode: str) -&gt; bool:\n        \"\"\"Set mode to specified mode.\"\"\"\n        return await self.set_mode(mode)\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.fan_levels","title":"fan_levels  <code>instance-attribute</code>  \u21b2","text":"<pre><code>fan_levels: list[int] = fan_levels\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager = manager\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.modes","title":"modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>modes: list[str] = modes\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.sleep_preferences","title":"sleep_preferences  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sleep_preferences: list[str] = sleep_preferences\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: FanState = FanState(self, details, feature_map)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.supports_displaying_type","title":"supports_displaying_type  <code>property</code>  \u21b2","text":"<pre><code>supports_displaying_type: bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Return True if device supports displaying type.</p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.supports_mute","title":"supports_mute  <code>property</code>  \u21b2","text":"<pre><code>supports_mute: bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Return True if device supports mute.</p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.supports_oscillation","title":"supports_oscillation  <code>property</code>  \u21b2","text":"<pre><code>supports_oscillation: bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Return True if device supports oscillation.</p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase-functions","title":"Functions\u21b2","text":""},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.advanced_sleep_mode","title":"advanced_sleep_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>advanced_sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> Deprecated <p>Use <code>set_advanced_sleep_mode</code> method instead</p> <p>Set advanced sleep mode.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>@deprecated('Use `set_advanced_sleep_mode` method instead')\nasync def advanced_sleep_mode(self) -&gt; bool:\n    \"\"\"Set advanced sleep mode.\"\"\"\n    return await self.set_mode('advancedSleep')\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    \"\"\"Clear timer for device from API.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    logger.debug('Not implemented - clear_timer')\n    return False\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.get_details","title":"get_details  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>@abstractmethod\nasync def get_details(self) -&gt; None:\n    \"\"\"Get device details.\n\n    This method is defined in each device class to contain\n    the logic to pull the device state from the API and update\n    the device's `state` attribute. The `update()` method should\n    be called to update the device state.\n    \"\"\"\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    \"\"\"Get timer for device from API and set the `state.Timer` attribute.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Note:\n        This method may not be implemented for all devices. Please\n        open an issue if there is an error.\n    \"\"\"\n    logger.debug('Not implemented - get_timer')\n    return None\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.manual_mode","title":"manual_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> Deprecated <p>Use <code>set_manual_mode</code> method instead</p> <p>Adapter to set mode to normal.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>@deprecated('Use `set_manual_mode` method instead')\nasync def manual_mode(self) -&gt; bool:\n    \"\"\"Adapter to set mode to normal.\"\"\"\n    return await self.set_normal_mode()\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.mode_toggle","title":"mode_toggle  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>mode_toggle(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> Deprecated <p>Use <code>set_mode</code> method instead</p> <p>Set mode to specified mode.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>@deprecated('Use `set_mode` method instead')\nasync def mode_toggle(self, mode: str) -&gt; bool:\n    \"\"\"Set mode to specified mode.\"\"\"\n    return await self.set_mode(mode)\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.normal_mode","title":"normal_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>normal_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> Deprecated <p>Use <code>set_normal_mode</code> method instead</p> <p>Set mode to normal.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>@deprecated('Use `set_normal_mode` method instead')\nasync def normal_mode(self) -&gt; bool:\n    \"\"\"Set mode to normal.\"\"\"\n    return await self.set_normal_mode()\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.set_advanced_sleep_mode","title":"set_advanced_sleep_mode  <code>async</code>  \u21b2","text":"<pre><code>set_advanced_sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set Purifier to Advanced Sleep Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>This method is not supported by all devices, will return false with warning debug message if not supported.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>async def set_advanced_sleep_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Advanced Sleep Mode.\n\n    Returns:\n        bool: Success of request.\n\n    Note:\n        This method is not supported by all devices, will return\n        false with warning debug message if not supported.\n    \"\"\"\n    if FanModes.ADVANCED_SLEEP in self.modes:\n        return await self.set_mode(FanModes.ADVANCED_SLEEP)\n    logger.warning('Advanced Sleep mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.set_auto_mode","title":"set_auto_mode  <code>async</code>  \u21b2","text":"<pre><code>set_auto_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set Purifier to Auto Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>This method is not supported by all devices, will return false with warning debug message if not supported.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>async def set_auto_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Auto Mode.\n\n    Returns:\n        bool: Success of request.\n\n    Note:\n        This method is not supported by all devices, will return\n        false with warning debug message if not supported.\n    \"\"\"\n    if FanModes.AUTO in self.modes:\n        return await self.set_mode(FanModes.AUTO)\n    logger.warning('Auto mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.set_fan_speed","title":"set_fan_speed  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>set_fan_speed(speed: int | None = None) -&gt; bool\n</code></pre> <p>Set Purifier Fan Speed.</p> <p>Parameters:</p> Name Type Description Default <code>speed</code> <code>int</code> <p>Fan speed level according to device specs.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>@abstractmethod\nasync def set_fan_speed(self, speed: int | None = None) -&gt; bool:\n    \"\"\"Set Purifier Fan Speed.\n\n    Args:\n        speed (int, optional): Fan speed level according to device specs.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.set_manual_mode","title":"set_manual_mode  <code>async</code>  \u21b2","text":"<pre><code>set_manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set Purifier to Manual Mode - Normal Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>This method is not supported by all devices, will return false with warning debug message if not supported.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>async def set_manual_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Manual Mode - Normal Mode.\n\n    Returns:\n        bool: Success of request.\n\n    Note:\n        This method is not supported by all devices, will return\n        false with warning debug message if not supported.\n    \"\"\"\n    if FanModes.NORMAL in self.modes:\n        return await self.set_mode(FanModes.NORMAL)\n    logger.warning('Manual mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.set_mode","title":"set_mode  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>set_mode(mode: str) -&gt; bool\n</code></pre> <p>Set Purifier Mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Mode to set, varies by device type.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>@abstractmethod\nasync def set_mode(self, mode: str) -&gt; bool:\n    \"\"\"Set Purifier Mode.\n\n    Args:\n        mode (str): Mode to set, varies by device type.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.set_normal_mode","title":"set_normal_mode  <code>async</code>  \u21b2","text":"<pre><code>set_normal_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set Purifier to Normal Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>This method is not supported by all devices, will return false with warning debug message if not supported.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>async def set_normal_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Normal Mode.\n\n    Returns:\n        bool: Success of request.\n\n    Note:\n        This method is not supported by all devices, will return\n        false with warning debug message if not supported.\n    \"\"\"\n    if FanModes.NORMAL in self.modes:\n        return await self.set_mode(FanModes.NORMAL)\n    logger.warning('Normal mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.set_sleep_mode","title":"set_sleep_mode  <code>async</code>  \u21b2","text":"<pre><code>set_sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set Purifier to Sleep Mode.</p> <p>This is also referred to as Advanced Sleep Mode on some devices.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>This method is not supported by all devices, will return false with warning debug message if not supported.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>async def set_sleep_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Sleep Mode.\n\n    This is also referred to as Advanced Sleep Mode on some devices.\n\n    Returns:\n        bool: Success of request.\n\n    Note:\n        This method is not supported by all devices, will return\n        false with warning debug message if not supported.\n    \"\"\"\n    if FanModes.ADVANCED_SLEEP in self.modes:\n        return await self.set_mode(FanModes.ADVANCED_SLEEP)\n    logger.warning('Sleep mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    \"\"\"Set timer for device.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Args:\n        duration (int): Duration in seconds.\n        action (str | None): Action to take when timer expires.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del duration\n    del action\n    logger.debug('Not implemented - set_timer')\n    return False\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.set_turbo_mode","title":"set_turbo_mode  <code>async</code>  \u21b2","text":"<pre><code>set_turbo_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set Purifier to Turbo Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>This method is not supported by all devices, will return false with warning debug message if not supported.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>async def set_turbo_mode(self) -&gt; bool:\n    \"\"\"Set Purifier to Turbo Mode.\n\n    Returns:\n        bool: Success of request.\n\n    Note:\n        This method is not supported by all devices, will return\n        false with warning debug message if not supported.\n    \"\"\"\n    if FanModes.TURBO in self.modes:\n        return await self.set_mode(FanModes.TURBO)\n    logger.warning('Turbo mode not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.sleep_mode","title":"sleep_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> Deprecated <p>Use <code>set_sleep_mode</code> method instead</p> <p>Adapter to set advanced sleep mode.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>@deprecated('Use `set_sleep_mode` method instead')\nasync def sleep_mode(self) -&gt; bool:\n    \"\"\"Adapter to set advanced sleep mode.\"\"\"\n    return await self.set_advanced_sleep_mode()\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.toggle_display","title":"toggle_display  <code>async</code>  \u21b2","text":"<pre><code>toggle_display(toggle: bool) -&gt; bool\n</code></pre> <p>Toggle Display on/off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>Display state.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>async def toggle_display(self, toggle: bool) -&gt; bool:\n    \"\"\"Toggle Display on/off.\n\n    Args:\n        toggle (bool): Display state.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    del toggle\n    return False\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.toggle_displaying_type","title":"toggle_displaying_type  <code>async</code>  \u21b2","text":"<pre><code>toggle_displaying_type(toggle: bool) -&gt; bool\n</code></pre> <p>Toggle displaying type on/off.</p> <p>This functionality is unknown but was in the API calls.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>Displaying type state.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>true if success.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>async def toggle_displaying_type(self, toggle: bool) -&gt; bool:\n    \"\"\"Toggle displaying type on/off.\n\n    This functionality is unknown but was in the API calls.\n\n    Args:\n        toggle (bool): Displaying type state.\n\n    Returns:\n        bool: true if success.\n    \"\"\"\n    del toggle\n    if self.supports_displaying_type:\n        logger.debug('Displaying type not configured for this device.')\n    else:\n        logger.debug('Displaying type not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.toggle_mute","title":"toggle_mute  <code>async</code>  \u21b2","text":"<pre><code>toggle_mute(toggle: bool) -&gt; bool\n</code></pre> <p>Toggle mute on/off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>True to turn mute on, False to turn off</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False if not</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>async def toggle_mute(self, toggle: bool) -&gt; bool:\n    \"\"\"Toggle mute on/off.\n\n    Parameters:\n        toggle (bool): True to turn mute on, False to turn off\n\n    Returns:\n        bool : True if successful, False if not\n    \"\"\"\n    del toggle\n    if self.supports_mute:\n        logger.debug('Mute not configured for this device.')\n    else:\n        logger.debug('Mute not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.toggle_oscillation","title":"toggle_oscillation  <code>async</code>  \u21b2","text":"<pre><code>toggle_oscillation(toggle: bool) -&gt; bool\n</code></pre> <p>Toggle Oscillation on/off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>Oscillation state.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>true if success.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>async def toggle_oscillation(self, toggle: bool) -&gt; bool:\n    \"\"\"Toggle Oscillation on/off.\n\n    Args:\n        toggle (bool): Oscillation state.\n\n    Returns:\n        bool: true if success.\n    \"\"\"\n    del toggle\n    if self.supports_oscillation:\n        logger.debug('Oscillation not configured for this device.')\n    else:\n        logger.debug('Oscillation not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.toggle_switch","title":"toggle_switch  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>@abstractmethod\nasync def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Toggle device power on or off.\n\n    Args:\n        toggle (bool | None): True to turn on, False to turn off, None to toggle.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.turn_off_display","title":"turn_off_display  <code>async</code>  \u21b2","text":"<pre><code>turn_off_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Turn off Display.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>async def turn_off_display(self) -&gt; bool:\n    \"\"\"Turn off Display.\n\n    Returns:\n        bool: Success of request\n    \"\"\"\n    return await self.toggle_display(False)\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.turn_off_mute","title":"turn_off_mute  <code>async</code>  \u21b2","text":"<pre><code>turn_off_mute() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set toggle_mute to off.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>async def turn_off_mute(self) -&gt; bool:\n    \"\"\"Set toggle_mute to off.\"\"\"\n    return await self.toggle_mute(False)\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.turn_off_oscillation","title":"turn_off_oscillation  <code>async</code>  \u21b2","text":"<pre><code>turn_off_oscillation() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set toggle_oscillation to off.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>async def turn_off_oscillation(self) -&gt; bool:\n    \"\"\"Set toggle_oscillation to off.\"\"\"\n    return await self.toggle_oscillation(False)\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.turn_on_display","title":"turn_on_display  <code>async</code>  \u21b2","text":"<pre><code>turn_on_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Turn on Display.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>async def turn_on_display(self) -&gt; bool:\n    \"\"\"Turn on Display.\n\n    Returns:\n        bool: Success of request\n    \"\"\"\n    return await self.toggle_display(True)\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.turn_on_mute","title":"turn_on_mute  <code>async</code>  \u21b2","text":"<pre><code>turn_on_mute() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set toggle_mute to on.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>async def turn_on_mute(self) -&gt; bool:\n    \"\"\"Set toggle_mute to on.\"\"\"\n    return await self.toggle_mute(True)\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.turn_on_oscillation","title":"turn_on_oscillation  <code>async</code>  \u21b2","text":"<pre><code>turn_on_oscillation() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncFanBase</code></p> <p>Set toggle_oscillation to on.</p> Source code in <code>src\\pyvesync\\base_devices\\fan_base.py</code> <pre><code>async def turn_on_oscillation(self) -&gt; bool:\n    \"\"\"Set toggle_oscillation to on.\"\"\"\n    return await self.toggle_oscillation(True)\n</code></pre>"},{"location":"devices/fans/#pyvesync.base_devices.fan_base.VeSyncFanBase.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/humidifiers/","title":"VeSync Humidifiers\u21b2","text":""},{"location":"devices/humidifiers/#contents","title":"Contents\u21b2","text":"<ul> <li>HumidifierState Class</li> <li>VeSync 300S Humidifiers - Includes OasisMist 4.5L devices</li> <li>VeSync 200S Humidifiers - Same as 300S class with override for toggle display method</li> <li>VeSync Superior 6000S Humidifiers</li> <li>VeSync OasisMist 1000S Humidifiers</li> <li>VeSync Humidifier Base Class - Abstract base class</li> </ul>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState","title":"pyvesync.base_devices.humidifier_base.HumidifierState \u21b2","text":"<p>               Bases: <code>DeviceState</code></p> <p>State Class for VeSync Humidifiers.</p> <p>This is the state class for all vesync humidifiers. If there are new features or state attributes.</p> <p>Attributes:</p> Name Type Description <code>auto_preference</code> <code>int</code> <p>Auto preference level.</p> <code>auto_stop_target_reached</code> <code>bool</code> <p>Automatic stop target reached.</p> <code>auto_target_humidity</code> <code>int</code> <p>Target humidity level.</p> <code>automatic_stop_config</code> <code>bool</code> <p>Automatic stop configuration.</p> <code>display_set_status</code> <code>str</code> <p>Display set status.</p> <code>display_status</code> <code>str</code> <p>Display status.</p> <code>drying_mode_auto_switch</code> <code>str</code> <p>Drying mode auto switch status.</p> <code>drying_mode_level</code> <code>int</code> <p>Drying mode level.</p> <code>drying_mode_status</code> <code>str</code> <p>Drying mode status.</p> <code>drying_mode_time_remain</code> <code>int</code> <p>Drying mode time remaining.</p> <code>filter_life_percent</code> <code>int</code> <p>Filter life percentage.</p> <code>humidity</code> <code>int</code> <p>Current humidity level.</p> <code>humidity_high</code> <code>bool</code> <p>High humidity status.</p> <code>mist_level</code> <code>int</code> <p>Mist level.</p> <code>mist_virtual_level</code> <code>int</code> <p>Mist virtual level.</p> <code>mode</code> <code>str</code> <p>Current mode.</p> <code>nightlight_brightness</code> <code>int</code> <p>Nightlight brightness level.</p> <code>nightlight_status</code> <code>str</code> <p>Nightlight status.</p> <code>temperature</code> <code>int</code> <p>Current temperature.</p> <code>warm_mist_enabled</code> <code>bool</code> <p>Warm mist enabled status.</p> <code>warm_mist_level</code> <code>int</code> <p>Warm mist level.</p> <code>water_lacks</code> <code>bool</code> <p>Water lacks status.</p> <code>water_tank_lifted</code> <code>bool</code> <p>Water tank lifted status.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>class HumidifierState(DeviceState):\n    \"\"\"State Class for VeSync Humidifiers.\n\n    This is the state class for all vesync humidifiers. If there are\n    new features or state attributes.\n\n    Attributes:\n        auto_preference (int): Auto preference level.\n        auto_stop_target_reached (bool): Automatic stop target reached.\n        auto_target_humidity (int): Target humidity level.\n        automatic_stop_config (bool): Automatic stop configuration.\n        display_set_status (str): Display set status.\n        display_status (str): Display status.\n        drying_mode_auto_switch (str): Drying mode auto switch status.\n        drying_mode_level (int): Drying mode level.\n        drying_mode_status (str): Drying mode status.\n        drying_mode_time_remain (int): Drying mode time remaining.\n        filter_life_percent (int): Filter life percentage.\n        humidity (int): Current humidity level.\n        humidity_high (bool): High humidity status.\n        mist_level (int): Mist level.\n        mist_virtual_level (int): Mist virtual level.\n        mode (str): Current mode.\n        nightlight_brightness (int): Nightlight brightness level.\n        nightlight_status (str): Nightlight status.\n        temperature (int): Current temperature.\n        warm_mist_enabled (bool): Warm mist enabled status.\n        warm_mist_level (int): Warm mist level.\n        water_lacks (bool): Water lacks status.\n        water_tank_lifted (bool): Water tank lifted status.\n    \"\"\"\n\n    __slots__ = (\n        'auto_preference',\n        'auto_stop_target_reached',\n        'auto_target_humidity',\n        'automatic_stop_config',\n        'display_set_status',\n        'display_status',\n        'drying_mode_auto_switch',\n        'drying_mode_level',\n        'drying_mode_status',\n        'drying_mode_time_remain',\n        'filter_life_percent',\n        'humidity',\n        'humidity_high',\n        'mist_level',\n        'mist_virtual_level',\n        'mode',\n        'nightlight_brightness',\n        'nightlight_status',\n        'temperature',\n        'warm_mist_enabled',\n        'warm_mist_level',\n        'water_lacks',\n        'water_tank_lifted',\n    )\n\n    def __init__(\n        self,\n        device: VeSyncHumidifier,\n        details: ResponseDeviceDetailsModel,\n        feature_map: HumidifierMap,\n    ) -&gt; None:\n        \"\"\"Initialize VeSync Humidifier State.\n\n        This state class is used to store the current state of the humidifier.\n\n        Args:\n            device (VeSyncHumidifier): The device object.\n            details (ResponseDeviceDetailsModel): The device details.\n            feature_map (HumidifierMap): The feature map for the device.\n        \"\"\"\n        super().__init__(device, details, feature_map)\n        self.auto_stop_target_reached: bool = False\n        self.auto_target_humidity: int | None = None\n        self.automatic_stop_config: bool = False\n        self.display_set_status: str = DeviceStatus.UNKNOWN\n        self.display_status: str = DeviceStatus.UNKNOWN\n        self.humidity: int | None = None\n        self.humidity_high: bool = False\n        self.mist_level: int | None = None\n        self.mist_virtual_level: int | None = None\n        self.mode: str | None = None\n        self.nightlight_brightness: int | None = None\n        self.nightlight_status: str | None = None\n        self.warm_mist_enabled: bool | None = None\n        self.warm_mist_level: int | None = None\n        self.water_lacks: bool = False\n        self.water_tank_lifted: bool = False\n        self.temperature: int | None = None\n        # Superior 6000S States\n        self.auto_preference: int | None = None\n        self.filter_life_percent: int | None = None\n        self.drying_mode_level: int | None = None\n        self.drying_mode_auto_switch: str | None = None\n        self.drying_mode_status: str | None = None\n        self.drying_mode_time_remain: int | None = None\n\n    @property\n    def automatic_stop(self) -&gt; bool:\n        \"\"\"Return the automatic stop status.\n\n        Returns:\n            bool: True if automatic stop is enabled, False otherwise.\n        \"\"\"\n        return self.automatic_stop_config\n\n    @property\n    @deprecated('Use auto_stop_target_reached instead.')\n    def automatic_stop_target_reached(self) -&gt; bool:\n        \"\"\"Deprecated function.\n\n        Returns:\n            bool: True if automatic stop target is reached, False otherwise.\n        \"\"\"\n        return self.auto_stop_target_reached\n\n    @property\n    def target_humidity(self) -&gt; int | None:\n        \"\"\"Return the target humidity level.\n\n        Returns:\n            int: Target humidity level.\n        \"\"\"\n        return self.auto_target_humidity\n\n    @property\n    def auto_humidity(self) -&gt; int | None:\n        \"\"\"Return the auto humidity level.\n\n        Returns:\n            int: Auto humidity level.\n        \"\"\"\n        return self.auto_target_humidity\n\n    @property\n    def auto_enabled(self) -&gt; bool:\n        \"\"\"Return True if auto mode is enabled.\"\"\"\n        return self.mode in [HumidifierModes.AUTO, self.mode, HumidifierModes.HUMIDITY]\n\n    @property\n    @deprecated('Use humidity property instead.')\n    def humidity_level(self) -&gt; int | None:\n        \"\"\"Deprecated function.\n\n        Returns:\n            int | None: Humidity level.\n        \"\"\"\n        return self.humidity\n\n    @property\n    def drying_mode_state(self) -&gt; str | None:\n        \"\"\"Return the drying mode state.\n\n        Returns:\n            str | None: Drying mode state.\n        \"\"\"\n        return self.drying_mode_status\n\n    @property\n    def drying_mode_seconds_remaining(self) -&gt; int | None:\n        \"\"\"Return the drying mode seconds remaining.\n\n        Return:\n            int | None: Drying mode seconds remaining.\n        \"\"\"\n        return self.drying_mode_time_remain\n\n    @property\n    def drying_mode_enabled(self) -&gt; bool:\n        \"\"\"Return True if drying mode is enabled.\n\n        Returns:\n            bool | None: True if drying mode is enabled, False otherwise.\n        \"\"\"\n        return self.drying_mode_status == DeviceStatus.ON\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.active_time","title":"active_time  <code>instance-attribute</code>  \u21b2","text":"<pre><code>active_time: int | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.auto_enabled","title":"auto_enabled  <code>property</code>  \u21b2","text":"<pre><code>auto_enabled: bool\n</code></pre> <p>Return True if auto mode is enabled.</p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.auto_humidity","title":"auto_humidity  <code>property</code>  \u21b2","text":"<pre><code>auto_humidity: int | None\n</code></pre> <p>Return the auto humidity level.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int | None</code> <p>Auto humidity level.</p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.auto_preference","title":"auto_preference  <code>instance-attribute</code>  \u21b2","text":"<pre><code>auto_preference: int | None = None\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.auto_stop_target_reached","title":"auto_stop_target_reached  <code>instance-attribute</code>  \u21b2","text":"<pre><code>auto_stop_target_reached: bool = False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.auto_target_humidity","title":"auto_target_humidity  <code>instance-attribute</code>  \u21b2","text":"<pre><code>auto_target_humidity: int | None = None\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.automatic_stop","title":"automatic_stop  <code>property</code>  \u21b2","text":"<pre><code>automatic_stop: bool\n</code></pre> <p>Return the automatic stop status.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if automatic stop is enabled, False otherwise.</p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.automatic_stop_config","title":"automatic_stop_config  <code>instance-attribute</code>  \u21b2","text":"<pre><code>automatic_stop_config: bool = False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.automatic_stop_target_reached","title":"automatic_stop_target_reached  <code>property</code>  \u21b2","text":"<pre><code>automatic_stop_target_reached: bool\n</code></pre> <p>Deprecated function.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if automatic stop target is reached, False otherwise.</p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.connection_status","title":"connection_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_status: str = connectionStatus or UNKNOWN\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.device","title":"device  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device = device\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.device_status","title":"device_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_status: str = deviceStatus or UNKNOWN\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.display_set_status","title":"display_set_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>display_set_status: str = UNKNOWN\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.display_status","title":"display_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>display_status: str = UNKNOWN\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.drying_mode_auto_switch","title":"drying_mode_auto_switch  <code>instance-attribute</code>  \u21b2","text":"<pre><code>drying_mode_auto_switch: str | None = None\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.drying_mode_enabled","title":"drying_mode_enabled  <code>property</code>  \u21b2","text":"<pre><code>drying_mode_enabled: bool\n</code></pre> <p>Return True if drying mode is enabled.</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool | None: True if drying mode is enabled, False otherwise.</p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.drying_mode_level","title":"drying_mode_level  <code>instance-attribute</code>  \u21b2","text":"<pre><code>drying_mode_level: int | None = None\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.drying_mode_seconds_remaining","title":"drying_mode_seconds_remaining  <code>property</code>  \u21b2","text":"<pre><code>drying_mode_seconds_remaining: int | None\n</code></pre> <p>Return the drying mode seconds remaining.</p> Return <p>int | None: Drying mode seconds remaining.</p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.drying_mode_state","title":"drying_mode_state  <code>property</code>  \u21b2","text":"<pre><code>drying_mode_state: str | None\n</code></pre> <p>Return the drying mode state.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>str | None: Drying mode state.</p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.drying_mode_status","title":"drying_mode_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>drying_mode_status: str | None = None\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.drying_mode_time_remain","title":"drying_mode_time_remain  <code>instance-attribute</code>  \u21b2","text":"<pre><code>drying_mode_time_remain: int | None = None\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features = features\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.filter_life_percent","title":"filter_life_percent  <code>instance-attribute</code>  \u21b2","text":"<pre><code>filter_life_percent: int | None = None\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.humidity","title":"humidity  <code>instance-attribute</code>  \u21b2","text":"<pre><code>humidity: int | None = None\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.humidity_high","title":"humidity_high  <code>instance-attribute</code>  \u21b2","text":"<pre><code>humidity_high: bool = False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.humidity_level","title":"humidity_level  <code>property</code>  \u21b2","text":"<pre><code>humidity_level: int | None\n</code></pre> <p>Deprecated function.</p> <p>Returns:</p> Type Description <code>int | None</code> <p>int | None: Humidity level.</p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.last_update_ts","title":"last_update_ts  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_update_ts: int | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.mist_level","title":"mist_level  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mist_level: int | None = None\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.mist_virtual_level","title":"mist_virtual_level  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mist_virtual_level: int | None = None\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.mode","title":"mode  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mode: str | None = None\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.nightlight_brightness","title":"nightlight_brightness  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_brightness: int | None = None\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.nightlight_status","title":"nightlight_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_status: str | None = None\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.target_humidity","title":"target_humidity  <code>property</code>  \u21b2","text":"<pre><code>target_humidity: int | None\n</code></pre> <p>Return the target humidity level.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int | None</code> <p>Target humidity level.</p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.temperature","title":"temperature  <code>instance-attribute</code>  \u21b2","text":"<pre><code>temperature: int | None = None\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.timer","title":"timer  <code>instance-attribute</code>  \u21b2","text":"<pre><code>timer: Timer | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.warm_mist_enabled","title":"warm_mist_enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>warm_mist_enabled: bool | None = None\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.warm_mist_level","title":"warm_mist_level  <code>instance-attribute</code>  \u21b2","text":"<pre><code>warm_mist_level: int | None = None\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.water_lacks","title":"water_lacks  <code>instance-attribute</code>  \u21b2","text":"<pre><code>water_lacks: bool = False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.water_tank_lifted","title":"water_tank_lifted  <code>instance-attribute</code>  \u21b2","text":"<pre><code>water_tank_lifted: bool = False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState-functions","title":"Functions\u21b2","text":""},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.as_tuple","title":"as_tuple \u21b2","text":"<pre><code>as_tuple() -&gt; tuple[tuple[str, Any], ...]\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to tuple of (name, value) tuples.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def as_tuple(self) -&gt; tuple[tuple[str, Any], ...]:\n    \"\"\"Convert state to tuple of (name, value) tuples.\"\"\"\n    return tuple((k, v) for k, v in self._serialize().items())\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.display","title":"display \u21b2","text":"<pre><code>display() -&gt; None\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Print formatted state to stdout.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self) -&gt; None:\n    \"\"\"Print formatted state to stdout.\"\"\"\n    for name, val in self._serialize().items():\n        print(f'{name:.&lt;30} {val}')  # noqa: T201\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to dictionary.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Convert state to dictionary.\"\"\"\n    return self._serialize()\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(indent: bool = False) -&gt; str\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Dump state to JSON string.</p> <p>Parameters:</p> Name Type Description Default <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device state.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, indent: bool = False) -&gt; str:\n    \"\"\"Dump state to JSON string.\n\n    Args:\n        indent (bool): If True, indent JSON output, defaults to False.\n\n    Returns:\n        str: JSON formatted string of device state.\n    \"\"\"\n    return self.to_jsonb(indent=indent).decode()\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(indent: bool = False) -&gt; bytes\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to JSON bytes.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, indent: bool = False) -&gt; bytes:\n    \"\"\"Convert state to JSON bytes.\"\"\"\n    if indent:\n        return orjson.dumps(\n            self._serialize(), option=orjson.OPT_NON_STR_KEYS | orjson.OPT_INDENT_2\n        )\n    return orjson.dumps(self._serialize(), option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.HumidifierState.update_ts","title":"update_ts \u21b2","text":"<pre><code>update_ts() -&gt; None\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Update last update timestamp as UTC timestamp.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def update_ts(self) -&gt; None:\n    \"\"\"Update last update timestamp as UTC timestamp.\"\"\"\n    self.last_update_ts = int(dt.now(tz=UTC).timestamp())\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S","title":"pyvesync.devices.vesynchumidifier.VeSyncHumid200300S \u21b2","text":"<pre><code>VeSyncHumid200300S(\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: HumidifierMap,\n)\n</code></pre> <p>               Bases: <code>BypassV2Mixin</code>, <code>VeSyncHumidifier</code></p> <p>300S Humidifier Class.</p> <p>Primary class for VeSync humidifier devices.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The device details.</p> required <code>manager</code> <code>VeSync</code> <p>The manager object for API calls.</p> required <code>feature_map</code> <code>HumidifierMap</code> <p>The feature map for the device.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>HumidifierState</code> <p>The state of the humidifier.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response info from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <code>mist_levels</code> <code>list</code> <p>List of mist levels.</p> <code>mist_modes</code> <code>list</code> <p>List of mist modes.</p> <code>target_minmax</code> <code>tuple</code> <p>Tuple of target min and max values.</p> <code>warm_mist_levels</code> <code>list</code> <p>List of warm mist levels.</p> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Initialize VeSync device base class.</p> <p>Initialize VeSync Humidifier Class.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The device details.</p> required <code>manager</code> <code>VeSync</code> <p>The VeSync manager.</p> required <code>feature_map</code> <code>HumidifierMap</code> <p>The feature map for the device.</p> required <p>Initialize 200S/300S Humidifier class.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>def __init__(\n    self,\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: HumidifierMap,\n) -&gt; None:\n    \"\"\"Initialize 200S/300S Humidifier class.\"\"\"\n    super().__init__(details, manager, feature_map)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.mist_levels","title":"mist_levels  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mist_levels: list[str | int] = mist_levels\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.mist_modes","title":"mist_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mist_modes: dict[str, str] = mist_modes\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: HumidifierState = HumidifierState(\n    self, details, feature_map\n)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.supports_drying_mode","title":"supports_drying_mode  <code>property</code>  \u21b2","text":"<pre><code>supports_drying_mode: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports drying mode.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.supports_nightlight","title":"supports_nightlight  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports nightlight.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if nightlight is supported, False otherwise.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.supports_nightlight_brightness","title":"supports_nightlight_brightness  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight_brightness: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports nightlight brightness.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.supports_warm_mist","title":"supports_warm_mist  <code>property</code>  \u21b2","text":"<pre><code>supports_warm_mist: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports warm mist.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if warm mist is supported, False otherwise.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.target_minmax","title":"target_minmax  <code>instance-attribute</code>  \u21b2","text":"<pre><code>target_minmax: tuple[int, int] = target_minmax\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.warm_mist_levels","title":"warm_mist_levels  <code>instance-attribute</code>  \u21b2","text":"<pre><code>warm_mist_levels: list[int | str] = warm_mist_levels\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S-functions","title":"Functions\u21b2","text":""},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.automatic_stop_off","title":"automatic_stop_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>automatic_stop_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> Deprecated <p>Use turn_off_automatic_stop() instead.</p> <p>Turn 200S/300S Humidifier automatic stop on.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>@deprecated('Use turn_off_automatic_stop() instead.')\nasync def automatic_stop_off(self) -&gt; bool:\n    \"\"\"Turn 200S/300S Humidifier automatic stop on.\"\"\"\n    return await self.toggle_automatic_stop(False)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.automatic_stop_on","title":"automatic_stop_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>automatic_stop_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> Deprecated <p>Use turn_on_automatic_stop() instead.</p> <p>Turn 200S/300S Humidifier automatic stop on.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>@deprecated('Use turn_on_automatic_stop() instead.')\nasync def automatic_stop_on(self) -&gt; bool:\n    \"\"\"Turn 200S/300S Humidifier automatic stop on.\"\"\"\n    return await self.toggle_automatic_stop(True)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.call_bypassv2_api","title":"call_bypassv2_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv2_api(\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p> <p>Send Bypass V2 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V2 API.</p> <p>Parameters:</p> Name Type Description Default <code>payload_method</code> <code>str</code> <p>The method to use in the payload dict.</p> required <code>data</code> <code>dict | None</code> <p>The data to send in the request.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypassV2'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the API url, defaults to <code>bypassV2</code>, e.g. <code>/cloud/v2/deviceManaged/bypassV2</code>.</p> <code>'bypassV2'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv2_api(\n    self,\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None:\n    \"\"\"Send Bypass V2 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V2 API.\n\n    Args:\n        payload_method (str): The method to use in the payload dict.\n        data (dict | None): The data to send in the request.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the API url, defaults to\n            `bypassV2`, e.g. `/cloud/v2/deviceManaged/bypassV2`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(payload_method, data, method)\n    endpoint = BYPASS_V2_BASE + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        endpoint, 'post', request, Helpers.req_header_bypass()\n    )\n    return resp_dict\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    if self.state.timer is None:\n        logger.debug('No timer to clear, run get_timer() first.')\n        return False\n    payload = {\n        'id': self.state.timer.id,\n    }\n    r_dict = await self.call_bypassv2_api('delTimer', payload)\n    r = Helpers.process_dev_response(logger, 'clear_timer', self, r_dict)\n    if r is None:\n        return False\n    self.state.timer = None\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def get_details(self) -&gt; None:\n    r_dict = await self.call_bypassv2_api('getHumidifierStatus')\n    r_model = process_bypassv2_result(\n        self, logger, 'get_details', r_dict, ClassicLVHumidResult\n    )\n    if r_model is None:\n        return\n    self._set_state(r_model)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    r_dict = await self.call_bypassv2_api('getTimer')\n    result_model = process_bypassv2_result(\n        self, logger, 'get_timer', r_dict, ResultV2GetTimer\n    )\n    if result_model is None:\n        return None\n    if not result_model.timers:\n        logger.debug('No timers found')\n        return None\n    timer = result_model.timers[0]\n    self.state.timer = Timer(\n        timer_duration=timer.total,\n        action=timer.action,\n        id=timer.id,\n    )\n    return self.state.timer\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.set_auto_mode","title":"set_auto_mode  <code>async</code>  \u21b2","text":"<pre><code>set_auto_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier to Auto Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_auto_mode(self) -&gt; bool:\n    \"\"\"Set Humidifier to Auto Mode.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    if HumidifierModes.AUTO in self.mist_modes:\n        return await self.set_mode(HumidifierModes.AUTO)\n    logger.debug('Auto mode not supported for this device.')\n    return await self.set_mode(HumidifierModes.AUTO)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.set_automatic_stop","title":"set_automatic_stop  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_automatic_stop(mode: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> Deprecated <p>Use toggle_automatic_stop(toggle: bool) instead.</p> <p>Set 200S/300S Humidifier to automatic stop.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>@deprecated('Use toggle_automatic_stop(toggle: bool) instead.')\nasync def set_automatic_stop(self, mode: bool) -&gt; bool:\n    \"\"\"Set 200S/300S Humidifier to automatic stop.\"\"\"\n    return await self.toggle_automatic_stop(mode)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.set_display","title":"set_display  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_display(toggle: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> Deprecated <p>Use toggle_display(toggle: bool) instead.</p> <p>Deprecated method to toggle display on/off.</p> <p>Use toggle_display(toggle: bool) instead.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>@deprecated('Use toggle_display(toggle: bool) instead.')\nasync def set_display(self, toggle: bool) -&gt; bool:\n    \"\"\"Deprecated method to toggle display on/off.\n\n    Use toggle_display(toggle: bool) instead.\n    \"\"\"\n    return await self.toggle_display(toggle)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.set_humidity","title":"set_humidity  <code>async</code>  \u21b2","text":"<pre><code>set_humidity(humidity: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier Target Humidity.</p> <p>Parameters:</p> Name Type Description Default <code>humidity</code> <code>int</code> <p>Target humidity level.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_humidity(self, humidity: int) -&gt; bool:\n    if not Validators.validate_range(humidity, *self.target_minmax):\n        logger.debug(\n            'Invalid humidity, must be between %s and %s', *self.target_minmax\n        )\n        return False\n\n    payload_data = {'target_humidity': humidity}\n    r_dict = await self.call_bypassv2_api('setTargetHumidity', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_humidity', self, r_dict)\n    if r is None:\n        return False\n    self.state.auto_target_humidity = humidity\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.set_humidity_mode","title":"set_humidity_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_humidity_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> Deprecated <p>Use set_mode(mode: str) instead.</p> <p>Deprecated - set humidifier mode.</p> <p>Use <code>set_mode(mode: str)</code> instead.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>@deprecated('Use set_mode(mode: str) instead.')\nasync def set_humidity_mode(self, mode: str) -&gt; bool:\n    \"\"\"Deprecated - set humidifier mode.\n\n    Use `set_mode(mode: str)` instead.\n    \"\"\"\n    return await self.set_mode(mode)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.set_manual_mode","title":"set_manual_mode  <code>async</code>  \u21b2","text":"<pre><code>set_manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier to Manual Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_manual_mode(self) -&gt; bool:\n    \"\"\"Set Humidifier to Manual Mode.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    if HumidifierModes.MANUAL in self.mist_modes:\n        return await self.set_mode(HumidifierModes.MANUAL)\n    logger.debug('Manual mode not supported for this device.')\n    return await self.set_mode(HumidifierModes.MANUAL)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.set_mist_level","title":"set_mist_level  <code>async</code>  \u21b2","text":"<pre><code>set_mist_level(level: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Mist Level for Humidifier.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>Mist level.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>Mist levels are defined in <code>self.mist_levels</code>.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_mist_level(self, level: int) -&gt; bool:\n    if level not in self.mist_levels:\n        logger.debug(\n            'Humidifier mist level must be between %s and %s',\n            self.mist_levels[0],\n            self.mist_levels[-1],\n        )\n        return False\n\n    payload_data = {'id': 0, 'level': level, 'type': 'mist'}\n    r_dict = await self.call_bypassv2_api('setVirtualLevel', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_mist_level', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.mist_virtual_level = level\n    self.state.mist_level = level\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.set_mode","title":"set_mode  <code>async</code>  \u21b2","text":"<pre><code>set_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier Mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Humidifier mode.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>Modes for device are defined in <code>self.mist_modes</code>.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_mode(self, mode: str) -&gt; bool:\n    if mode.lower() not in self.mist_modes:\n        logger.debug('Invalid humidity mode used - %s', mode)\n        logger.debug(\n            'Proper modes for this device are - %s',\n            orjson.dumps(\n                self.mist_modes, option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS\n            ),\n        )\n        return False\n\n    payload_data = {'mode': self.mist_modes[mode.lower()]}\n    r_dict = await self.call_bypassv2_api('setHumidityMode', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_humidity_mode', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.mode = mode\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.set_nightlight_brightness","title":"set_nightlight_brightness  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_brightness(brightness: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier night light brightness.</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <code>int</code> <p>Target night light brightness.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_nightlight_brightness(self, brightness: int) -&gt; bool:\n    if not self.supports_nightlight:\n        logger.debug(\n            '%s is a %s does not have a nightlight',\n            self.device_name,\n            self.device_type,\n        )\n        return False\n\n    if not Validators.validate_zero_to_hundred(brightness):\n        logger.debug('Brightness value must be set between 0 and 100')\n        return False\n\n    payload_data = {'night_light_brightness': brightness}\n    r_dict = await self.call_bypassv2_api('setNightLightBrightness', payload_data)\n    r = Helpers.process_dev_response(\n        logger, 'set_night_light_brightness', self, r_dict\n    )\n    if r is None:\n        return False\n    self.state.nightlight_brightness = brightness\n    self.state.nightlight_status = (\n        DeviceStatus.ON if brightness &gt; 0 else DeviceStatus.OFF\n    )\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.set_sleep_mode","title":"set_sleep_mode  <code>async</code>  \u21b2","text":"<pre><code>set_sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier to Sleep Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_sleep_mode(self) -&gt; bool:\n    \"\"\"Set Humidifier to Sleep Mode.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    if HumidifierModes.SLEEP in self.mist_modes:\n        return await self.set_mode(HumidifierModes.SLEEP)\n    logger.debug('Sleep mode not supported for this device.')\n    return await self.set_mode(HumidifierModes.SLEEP)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    if action is None:\n        action = (\n            DeviceStatus.OFF\n            if self.state.device_status == DeviceStatus.ON\n            else DeviceStatus.ON\n        )\n    payload_data = {\n        'action': str(action),\n        'total': duration,\n    }\n    r_dict = await self.call_bypassv2_api('addTimer', payload_data)\n    r = process_bypassv2_result(self, logger, 'set_timer', r_dict, ResultV2SetTimer)\n    if r is None:\n        return False\n\n    self.state.timer = Timer(\n        timer_duration=duration, action=action, id=r.id, remaining=0\n    )\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.set_warm_level","title":"set_warm_level  <code>async</code>  \u21b2","text":"<pre><code>set_warm_level(warm_level: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier Warm Level.</p> <p>Parameters:</p> Name Type Description Default <code>warm_level</code> <code>int</code> <p>Target warm level.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_warm_level(self, warm_level: int) -&gt; bool:\n    if not self.supports_warm_mist:\n        logger.debug(\n            '%s is a %s does not have a mist warmer',\n            self.device_name,\n            self.device_type,\n        )\n        return False\n\n    if warm_level not in self.warm_mist_levels:\n        logger.debug('warm_level value must be - %s', str(self.warm_mist_levels))\n        return False\n\n    payload_data = {'type': 'warm', 'level': warm_level, 'id': 0}\n    r_dict = await self.call_bypassv2_api('setVirtualLevel', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_warm_level', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.warm_mist_level = warm_level\n    self.state.warm_mist_enabled = True\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.toggle_automatic_stop","title":"toggle_automatic_stop  <code>async</code>  \u21b2","text":"<pre><code>toggle_automatic_stop(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Toggle automatic stop.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to enable automatic stop, False to disable.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def toggle_automatic_stop(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.automatic_stop_config != DeviceStatus.ON\n\n    payload_data = {'enabled': toggle}\n    r_dict = await self.call_bypassv2_api('setAutomaticStop', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_automatic_stop', self, r_dict)\n    if r is None:\n        return False\n    self.state.automatic_stop_config = toggle\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.toggle_display","title":"toggle_display  <code>async</code>  \u21b2","text":"<pre><code>toggle_display(toggle: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Toggle the display on/off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>True to turn on the display, False to turn off.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def toggle_display(self, toggle: bool) -&gt; bool:\n    payload_data = {'state': toggle}\n    r_dict = await self.call_bypassv2_api('setDisplay', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_display', self, r_dict)\n    if r is None:\n        return False\n    self.state.display_set_status = DeviceStatus.from_bool(toggle)\n    self.state.display_status = DeviceStatus.from_bool(toggle)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.toggle_drying_mode","title":"toggle_drying_mode  <code>async</code>  \u21b2","text":"<pre><code>toggle_drying_mode(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>enable/disable drying filters after turning off.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def toggle_drying_mode(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"enable/disable drying filters after turning off.\"\"\"\n    del toggle\n    if self.supports_drying_mode:\n        logger.debug('Drying mode is not configured for this device.')\n        return False\n    logger.debug('Drying mode is not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.device_status == DeviceStatus.ON\n\n    payload_data = {'enabled': toggle, 'id': 0}\n    r_dict = await self.call_bypassv2_api('setSwitch', payload_data)\n    r = Helpers.process_dev_response(logger, 'toggle_switch', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.device_status = DeviceStatus.from_bool(toggle)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.turn_off_automatic_stop","title":"turn_off_automatic_stop  <code>async</code>  \u21b2","text":"<pre><code>turn_off_automatic_stop() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn off automatic stop.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_off_automatic_stop(self) -&gt; bool:\n    \"\"\"Turn off automatic stop.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_automatic_stop(False)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.turn_off_display","title":"turn_off_display  <code>async</code>  \u21b2","text":"<pre><code>turn_off_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn off the display.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_off_display(self) -&gt; bool:\n    \"\"\"Turn off the display.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_display(False)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.turn_on_automatic_stop","title":"turn_on_automatic_stop  <code>async</code>  \u21b2","text":"<pre><code>turn_on_automatic_stop() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn on automatic stop.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_on_automatic_stop(self) -&gt; bool:\n    \"\"\"Turn on automatic stop.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_automatic_stop(True)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.turn_on_display","title":"turn_on_display  <code>async</code>  \u21b2","text":"<pre><code>turn_on_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn on the display.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_on_display(self) -&gt; bool:\n    \"\"\"Turn on the display.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_display(True)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200300S.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S","title":"pyvesync.devices.vesynchumidifier.VeSyncHumid200S \u21b2","text":"<pre><code>VeSyncHumid200S(\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: HumidifierMap,\n)\n</code></pre> <p>               Bases: <code>VeSyncHumid200300S</code></p> <p>Levoit Classic 200S Specific class.</p> <p>Overrides the <code>toggle_display(toggle: bool)</code> method of the VeSyncHumid200300S class.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The device details.</p> required <code>manager</code> <code>VeSync</code> <p>The manager object for API calls.</p> required <code>feature_map</code> <code>HumidifierMap</code> <p>The feature map for the device.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>HumidifierState</code> <p>The state of the humidifier.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <code>mist_levels</code> <code>list</code> <p>List of mist levels.</p> <code>mist_modes</code> <code>list</code> <p>List of mist modes.</p> <code>target_minmax</code> <code>tuple</code> <p>Tuple of target min and max values.</p> <code>warm_mist_levels</code> <code>list</code> <p>List of warm mist levels.</p> <p>Inherited From <code>VeSyncHumid200300S</code></p> <p>Initialize VeSync device base class.</p> <p>Initialize VeSync Humidifier Class.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The device details.</p> required <code>manager</code> <code>VeSync</code> <p>The VeSync manager.</p> required <code>feature_map</code> <code>HumidifierMap</code> <p>The feature map for the device.</p> required <p>Initialize 200S/300S Humidifier class.</p> <p>Initialize levoit 200S device class.</p> <p>This overrides the <code>toggle_display(toggle: bool)</code> method of the VeSyncHumid200300S class.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>def __init__(\n    self,\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: HumidifierMap,\n) -&gt; None:\n    \"\"\"Initialize levoit 200S device class.\n\n    This overrides the `toggle_display(toggle: bool)` method of the\n    VeSyncHumid200300S class.\n    \"\"\"\n    super().__init__(details, manager, feature_map)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.mist_levels","title":"mist_levels  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mist_levels: list[str | int] = mist_levels\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.mist_modes","title":"mist_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mist_modes: dict[str, str] = mist_modes\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: HumidifierState = HumidifierState(\n    self, details, feature_map\n)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.supports_drying_mode","title":"supports_drying_mode  <code>property</code>  \u21b2","text":"<pre><code>supports_drying_mode: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports drying mode.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.supports_nightlight","title":"supports_nightlight  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports nightlight.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if nightlight is supported, False otherwise.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.supports_nightlight_brightness","title":"supports_nightlight_brightness  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight_brightness: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports nightlight brightness.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.supports_warm_mist","title":"supports_warm_mist  <code>property</code>  \u21b2","text":"<pre><code>supports_warm_mist: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports warm mist.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if warm mist is supported, False otherwise.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.target_minmax","title":"target_minmax  <code>instance-attribute</code>  \u21b2","text":"<pre><code>target_minmax: tuple[int, int] = target_minmax\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.warm_mist_levels","title":"warm_mist_levels  <code>instance-attribute</code>  \u21b2","text":"<pre><code>warm_mist_levels: list[int | str] = warm_mist_levels\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S-functions","title":"Functions\u21b2","text":""},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.automatic_stop_off","title":"automatic_stop_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>automatic_stop_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> Deprecated <p>Use turn_off_automatic_stop() instead.</p> <p>Turn 200S/300S Humidifier automatic stop on.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>@deprecated('Use turn_off_automatic_stop() instead.')\nasync def automatic_stop_off(self) -&gt; bool:\n    \"\"\"Turn 200S/300S Humidifier automatic stop on.\"\"\"\n    return await self.toggle_automatic_stop(False)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.automatic_stop_on","title":"automatic_stop_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>automatic_stop_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> Deprecated <p>Use turn_on_automatic_stop() instead.</p> <p>Turn 200S/300S Humidifier automatic stop on.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>@deprecated('Use turn_on_automatic_stop() instead.')\nasync def automatic_stop_on(self) -&gt; bool:\n    \"\"\"Turn 200S/300S Humidifier automatic stop on.\"\"\"\n    return await self.toggle_automatic_stop(True)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.call_bypassv2_api","title":"call_bypassv2_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv2_api(\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p> <p>Send Bypass V2 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V2 API.</p> <p>Parameters:</p> Name Type Description Default <code>payload_method</code> <code>str</code> <p>The method to use in the payload dict.</p> required <code>data</code> <code>dict | None</code> <p>The data to send in the request.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypassV2'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the API url, defaults to <code>bypassV2</code>, e.g. <code>/cloud/v2/deviceManaged/bypassV2</code>.</p> <code>'bypassV2'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv2_api(\n    self,\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None:\n    \"\"\"Send Bypass V2 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V2 API.\n\n    Args:\n        payload_method (str): The method to use in the payload dict.\n        data (dict | None): The data to send in the request.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the API url, defaults to\n            `bypassV2`, e.g. `/cloud/v2/deviceManaged/bypassV2`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(payload_method, data, method)\n    endpoint = BYPASS_V2_BASE + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        endpoint, 'post', request, Helpers.req_header_bypass()\n    )\n    return resp_dict\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    if self.state.timer is None:\n        logger.debug('No timer to clear, run get_timer() first.')\n        return False\n    payload = {\n        'id': self.state.timer.id,\n    }\n    r_dict = await self.call_bypassv2_api('delTimer', payload)\n    r = Helpers.process_dev_response(logger, 'clear_timer', self, r_dict)\n    if r is None:\n        return False\n    self.state.timer = None\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def get_details(self) -&gt; None:\n    r_dict = await self.call_bypassv2_api('getHumidifierStatus')\n    r_model = process_bypassv2_result(\n        self, logger, 'get_details', r_dict, ClassicLVHumidResult\n    )\n    if r_model is None:\n        return\n    self._set_state(r_model)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    r_dict = await self.call_bypassv2_api('getTimer')\n    result_model = process_bypassv2_result(\n        self, logger, 'get_timer', r_dict, ResultV2GetTimer\n    )\n    if result_model is None:\n        return None\n    if not result_model.timers:\n        logger.debug('No timers found')\n        return None\n    timer = result_model.timers[0]\n    self.state.timer = Timer(\n        timer_duration=timer.total,\n        action=timer.action,\n        id=timer.id,\n    )\n    return self.state.timer\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.set_auto_mode","title":"set_auto_mode  <code>async</code>  \u21b2","text":"<pre><code>set_auto_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier to Auto Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_auto_mode(self) -&gt; bool:\n    \"\"\"Set Humidifier to Auto Mode.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    if HumidifierModes.AUTO in self.mist_modes:\n        return await self.set_mode(HumidifierModes.AUTO)\n    logger.debug('Auto mode not supported for this device.')\n    return await self.set_mode(HumidifierModes.AUTO)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.set_automatic_stop","title":"set_automatic_stop  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_automatic_stop(mode: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> Deprecated <p>Use toggle_automatic_stop(toggle: bool) instead.</p> <p>Set 200S/300S Humidifier to automatic stop.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>@deprecated('Use toggle_automatic_stop(toggle: bool) instead.')\nasync def set_automatic_stop(self, mode: bool) -&gt; bool:\n    \"\"\"Set 200S/300S Humidifier to automatic stop.\"\"\"\n    return await self.toggle_automatic_stop(mode)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.set_display","title":"set_display  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_display(toggle: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> Deprecated <p>Use toggle_display(toggle: bool) instead.</p> <p>Deprecated method to toggle display on/off.</p> <p>Use toggle_display(toggle: bool) instead.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>@deprecated('Use toggle_display(toggle: bool) instead.')\nasync def set_display(self, toggle: bool) -&gt; bool:\n    \"\"\"Deprecated method to toggle display on/off.\n\n    Use toggle_display(toggle: bool) instead.\n    \"\"\"\n    return await self.toggle_display(toggle)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.set_humidity","title":"set_humidity  <code>async</code>  \u21b2","text":"<pre><code>set_humidity(humidity: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier Target Humidity.</p> <p>Parameters:</p> Name Type Description Default <code>humidity</code> <code>int</code> <p>Target humidity level.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_humidity(self, humidity: int) -&gt; bool:\n    if not Validators.validate_range(humidity, *self.target_minmax):\n        logger.debug(\n            'Invalid humidity, must be between %s and %s', *self.target_minmax\n        )\n        return False\n\n    payload_data = {'target_humidity': humidity}\n    r_dict = await self.call_bypassv2_api('setTargetHumidity', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_humidity', self, r_dict)\n    if r is None:\n        return False\n    self.state.auto_target_humidity = humidity\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.set_humidity_mode","title":"set_humidity_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_humidity_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> Deprecated <p>Use set_mode(mode: str) instead.</p> <p>Deprecated - set humidifier mode.</p> <p>Use <code>set_mode(mode: str)</code> instead.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>@deprecated('Use set_mode(mode: str) instead.')\nasync def set_humidity_mode(self, mode: str) -&gt; bool:\n    \"\"\"Deprecated - set humidifier mode.\n\n    Use `set_mode(mode: str)` instead.\n    \"\"\"\n    return await self.set_mode(mode)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.set_manual_mode","title":"set_manual_mode  <code>async</code>  \u21b2","text":"<pre><code>set_manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier to Manual Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_manual_mode(self) -&gt; bool:\n    \"\"\"Set Humidifier to Manual Mode.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    if HumidifierModes.MANUAL in self.mist_modes:\n        return await self.set_mode(HumidifierModes.MANUAL)\n    logger.debug('Manual mode not supported for this device.')\n    return await self.set_mode(HumidifierModes.MANUAL)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.set_mist_level","title":"set_mist_level  <code>async</code>  \u21b2","text":"<pre><code>set_mist_level(level: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Mist Level for Humidifier.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>Mist level.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>Mist levels are defined in <code>self.mist_levels</code>.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_mist_level(self, level: int) -&gt; bool:\n    if level not in self.mist_levels:\n        logger.debug(\n            'Humidifier mist level must be between %s and %s',\n            self.mist_levels[0],\n            self.mist_levels[-1],\n        )\n        return False\n\n    payload_data = {'id': 0, 'level': level, 'type': 'mist'}\n    r_dict = await self.call_bypassv2_api('setVirtualLevel', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_mist_level', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.mist_virtual_level = level\n    self.state.mist_level = level\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.set_mode","title":"set_mode  <code>async</code>  \u21b2","text":"<pre><code>set_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier Mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Humidifier mode.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>Modes for device are defined in <code>self.mist_modes</code>.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_mode(self, mode: str) -&gt; bool:\n    if mode.lower() not in self.mist_modes:\n        logger.debug('Invalid humidity mode used - %s', mode)\n        logger.debug(\n            'Proper modes for this device are - %s',\n            orjson.dumps(\n                self.mist_modes, option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS\n            ),\n        )\n        return False\n\n    payload_data = {'mode': self.mist_modes[mode.lower()]}\n    r_dict = await self.call_bypassv2_api('setHumidityMode', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_humidity_mode', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.mode = mode\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.set_nightlight_brightness","title":"set_nightlight_brightness  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_brightness(brightness: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier night light brightness.</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <code>int</code> <p>Target night light brightness.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_nightlight_brightness(self, brightness: int) -&gt; bool:\n    if not self.supports_nightlight:\n        logger.debug(\n            '%s is a %s does not have a nightlight',\n            self.device_name,\n            self.device_type,\n        )\n        return False\n\n    if not Validators.validate_zero_to_hundred(brightness):\n        logger.debug('Brightness value must be set between 0 and 100')\n        return False\n\n    payload_data = {'night_light_brightness': brightness}\n    r_dict = await self.call_bypassv2_api('setNightLightBrightness', payload_data)\n    r = Helpers.process_dev_response(\n        logger, 'set_night_light_brightness', self, r_dict\n    )\n    if r is None:\n        return False\n    self.state.nightlight_brightness = brightness\n    self.state.nightlight_status = (\n        DeviceStatus.ON if brightness &gt; 0 else DeviceStatus.OFF\n    )\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.set_sleep_mode","title":"set_sleep_mode  <code>async</code>  \u21b2","text":"<pre><code>set_sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier to Sleep Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_sleep_mode(self) -&gt; bool:\n    \"\"\"Set Humidifier to Sleep Mode.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    if HumidifierModes.SLEEP in self.mist_modes:\n        return await self.set_mode(HumidifierModes.SLEEP)\n    logger.debug('Sleep mode not supported for this device.')\n    return await self.set_mode(HumidifierModes.SLEEP)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    if action is None:\n        action = (\n            DeviceStatus.OFF\n            if self.state.device_status == DeviceStatus.ON\n            else DeviceStatus.ON\n        )\n    payload_data = {\n        'action': str(action),\n        'total': duration,\n    }\n    r_dict = await self.call_bypassv2_api('addTimer', payload_data)\n    r = process_bypassv2_result(self, logger, 'set_timer', r_dict, ResultV2SetTimer)\n    if r is None:\n        return False\n\n    self.state.timer = Timer(\n        timer_duration=duration, action=action, id=r.id, remaining=0\n    )\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.set_warm_level","title":"set_warm_level  <code>async</code>  \u21b2","text":"<pre><code>set_warm_level(warm_level: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier Warm Level.</p> <p>Parameters:</p> Name Type Description Default <code>warm_level</code> <code>int</code> <p>Target warm level.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_warm_level(self, warm_level: int) -&gt; bool:\n    if not self.supports_warm_mist:\n        logger.debug(\n            '%s is a %s does not have a mist warmer',\n            self.device_name,\n            self.device_type,\n        )\n        return False\n\n    if warm_level not in self.warm_mist_levels:\n        logger.debug('warm_level value must be - %s', str(self.warm_mist_levels))\n        return False\n\n    payload_data = {'type': 'warm', 'level': warm_level, 'id': 0}\n    r_dict = await self.call_bypassv2_api('setVirtualLevel', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_warm_level', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.warm_mist_level = warm_level\n    self.state.warm_mist_enabled = True\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.toggle_automatic_stop","title":"toggle_automatic_stop  <code>async</code>  \u21b2","text":"<pre><code>toggle_automatic_stop(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Toggle automatic stop.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to enable automatic stop, False to disable.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def toggle_automatic_stop(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.automatic_stop_config != DeviceStatus.ON\n\n    payload_data = {'enabled': toggle}\n    r_dict = await self.call_bypassv2_api('setAutomaticStop', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_automatic_stop', self, r_dict)\n    if r is None:\n        return False\n    self.state.automatic_stop_config = toggle\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.toggle_display","title":"toggle_display  <code>async</code>  \u21b2","text":"<pre><code>toggle_display(toggle: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> <p>Toggle the display on/off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>True to turn on the display, False to turn off.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def toggle_display(self, toggle: bool) -&gt; bool:\n    payload_data = {'enabled': toggle, 'id': 0}\n    r_dict = await self.call_bypassv2_api('setIndicatorLightSwitch', payload_data)\n    r = Helpers.process_dev_response(logger, 'toggle_display', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.display_set_status = DeviceStatus.from_bool(toggle)\n    self.state.display_status = DeviceStatus.from_bool(toggle)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.toggle_drying_mode","title":"toggle_drying_mode  <code>async</code>  \u21b2","text":"<pre><code>toggle_drying_mode(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>enable/disable drying filters after turning off.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def toggle_drying_mode(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"enable/disable drying filters after turning off.\"\"\"\n    del toggle\n    if self.supports_drying_mode:\n        logger.debug('Drying mode is not configured for this device.')\n        return False\n    logger.debug('Drying mode is not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.device_status == DeviceStatus.ON\n\n    payload_data = {'enabled': toggle, 'id': 0}\n    r_dict = await self.call_bypassv2_api('setSwitch', payload_data)\n    r = Helpers.process_dev_response(logger, 'toggle_switch', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.device_status = DeviceStatus.from_bool(toggle)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.turn_off_automatic_stop","title":"turn_off_automatic_stop  <code>async</code>  \u21b2","text":"<pre><code>turn_off_automatic_stop() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn off automatic stop.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_off_automatic_stop(self) -&gt; bool:\n    \"\"\"Turn off automatic stop.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_automatic_stop(False)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.turn_off_display","title":"turn_off_display  <code>async</code>  \u21b2","text":"<pre><code>turn_off_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn off the display.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_off_display(self) -&gt; bool:\n    \"\"\"Turn off the display.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_display(False)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.turn_on_automatic_stop","title":"turn_on_automatic_stop  <code>async</code>  \u21b2","text":"<pre><code>turn_on_automatic_stop() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn on automatic stop.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_on_automatic_stop(self) -&gt; bool:\n    \"\"\"Turn on automatic stop.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_automatic_stop(True)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.turn_on_display","title":"turn_on_display  <code>async</code>  \u21b2","text":"<pre><code>turn_on_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn on the display.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_on_display(self) -&gt; bool:\n    \"\"\"Turn on the display.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_display(True)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid200S.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S","title":"pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S \u21b2","text":"<pre><code>VeSyncSuperior6000S(\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: HumidifierMap,\n)\n</code></pre> <p>               Bases: <code>BypassV2Mixin</code>, <code>VeSyncHumidifier</code></p> <p>Superior 6000S Humidifier.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The device details.</p> required <code>manager</code> <code>VeSync</code> <p>The manager object for API calls.</p> required <code>feature_map</code> <code>HumidifierMap</code> <p>The feature map for the device.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>HumidifierState</code> <p>The state of the humidifier.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <code>mist_levels</code> <code>list</code> <p>List of mist levels.</p> <code>mist_modes</code> <code>list</code> <p>List of mist modes.</p> <code>target_minmax</code> <code>tuple</code> <p>Tuple of target min and max values.</p> <code>warm_mist_levels</code> <code>list</code> <p>List of warm mist levels.</p> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Initialize VeSync device base class.</p> <p>Initialize VeSync Humidifier Class.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The device details.</p> required <code>manager</code> <code>VeSync</code> <p>The VeSync manager.</p> required <code>feature_map</code> <code>HumidifierMap</code> <p>The feature map for the device.</p> required <p>Initialize Superior 6000S Humidifier class.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>def __init__(\n    self,\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: HumidifierMap,\n) -&gt; None:\n    \"\"\"Initialize Superior 6000S Humidifier class.\"\"\"\n    super().__init__(details, manager, feature_map)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.mist_levels","title":"mist_levels  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mist_levels: list[str | int] = mist_levels\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.mist_modes","title":"mist_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mist_modes: dict[str, str] = mist_modes\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: HumidifierState = HumidifierState(\n    self, details, feature_map\n)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.supports_drying_mode","title":"supports_drying_mode  <code>property</code>  \u21b2","text":"<pre><code>supports_drying_mode: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports drying mode.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.supports_nightlight","title":"supports_nightlight  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports nightlight.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if nightlight is supported, False otherwise.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.supports_nightlight_brightness","title":"supports_nightlight_brightness  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight_brightness: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports nightlight brightness.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.supports_warm_mist","title":"supports_warm_mist  <code>property</code>  \u21b2","text":"<pre><code>supports_warm_mist: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports warm mist.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if warm mist is supported, False otherwise.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.target_minmax","title":"target_minmax  <code>instance-attribute</code>  \u21b2","text":"<pre><code>target_minmax: tuple[int, int] = target_minmax\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.warm_mist_levels","title":"warm_mist_levels  <code>instance-attribute</code>  \u21b2","text":"<pre><code>warm_mist_levels: list[int | str] = warm_mist_levels\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S-functions","title":"Functions\u21b2","text":""},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.call_bypassv2_api","title":"call_bypassv2_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv2_api(\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p> <p>Send Bypass V2 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V2 API.</p> <p>Parameters:</p> Name Type Description Default <code>payload_method</code> <code>str</code> <p>The method to use in the payload dict.</p> required <code>data</code> <code>dict | None</code> <p>The data to send in the request.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypassV2'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the API url, defaults to <code>bypassV2</code>, e.g. <code>/cloud/v2/deviceManaged/bypassV2</code>.</p> <code>'bypassV2'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv2_api(\n    self,\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None:\n    \"\"\"Send Bypass V2 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V2 API.\n\n    Args:\n        payload_method (str): The method to use in the payload dict.\n        data (dict | None): The data to send in the request.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the API url, defaults to\n            `bypassV2`, e.g. `/cloud/v2/deviceManaged/bypassV2`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(payload_method, data, method)\n    endpoint = BYPASS_V2_BASE + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        endpoint, 'post', request, Helpers.req_header_bypass()\n    )\n    return resp_dict\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    \"\"\"Clear timer for device from API.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    logger.debug('Not implemented - clear_timer')\n    return False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def get_details(self) -&gt; None:\n    r_dict = await self.call_bypassv2_api('getHumidifierStatus')\n    r_model = process_bypassv2_result(\n        self, logger, 'get_details', r_dict, Superior6000SResult\n    )\n    if r_model is None:\n        return\n\n    self._set_state(r_model)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    \"\"\"Get timer for device from API and set the `state.Timer` attribute.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Note:\n        This method may not be implemented for all devices. Please\n        open an issue if there is an error.\n    \"\"\"\n    logger.debug('Not implemented - get_timer')\n    return None\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.set_auto_mode","title":"set_auto_mode  <code>async</code>  \u21b2","text":"<pre><code>set_auto_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier to Auto Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_auto_mode(self) -&gt; bool:\n    \"\"\"Set Humidifier to Auto Mode.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    if HumidifierModes.AUTO in self.mist_modes:\n        return await self.set_mode(HumidifierModes.AUTO)\n    logger.debug('Auto mode not supported for this device.')\n    return await self.set_mode(HumidifierModes.AUTO)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.set_display_enabled","title":"set_display_enabled  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_display_enabled(mode: bool) -&gt; bool\n</code></pre> Deprecated <p>Use toggle_display() instead.</p> <p>Set display on/off.</p> <p>Deprecated method, please use toggle_display() instead.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>@deprecated('Use toggle_display() instead.')\nasync def set_display_enabled(self, mode: bool) -&gt; bool:\n    \"\"\"Set display on/off.\n\n    Deprecated method, please use toggle_display() instead.\n    \"\"\"\n    return await self.toggle_display(mode)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.set_drying_mode_enabled","title":"set_drying_mode_enabled  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_drying_mode_enabled(mode: bool) -&gt; bool\n</code></pre> Deprecated <p>Use toggle_drying_mode() instead.</p> <p>Set drying mode on/off.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>@deprecated('Use toggle_drying_mode() instead.')\nasync def set_drying_mode_enabled(self, mode: bool) -&gt; bool:\n    \"\"\"Set drying mode on/off.\"\"\"\n    return await self.toggle_drying_mode(mode)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.set_humidity","title":"set_humidity  <code>async</code>  \u21b2","text":"<pre><code>set_humidity(humidity: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier Target Humidity.</p> <p>Parameters:</p> Name Type Description Default <code>humidity</code> <code>int</code> <p>Target humidity level.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_humidity(self, humidity: int) -&gt; bool:\n    if not Validators.validate_range(humidity, *self.target_minmax):\n        logger.debug('Humidity value must be set between 30 and 80')\n        return False\n\n    payload_data = {'targetHumidity': humidity}\n    r_dict = await self.call_bypassv2_api('setTargetHumidity', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_humidity', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.auto_target_humidity = humidity\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.set_humidity_mode","title":"set_humidity_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_humidity_mode(mode: str) -&gt; bool\n</code></pre> Deprecated <p>Use set_mode(mode: str) instead.</p> <p>Set humidifier mode.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>@deprecated('Use set_mode(mode: str) instead.')\nasync def set_humidity_mode(self, mode: str) -&gt; bool:\n    \"\"\"Set humidifier mode.\"\"\"\n    return await self.set_mode(mode)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.set_manual_mode","title":"set_manual_mode  <code>async</code>  \u21b2","text":"<pre><code>set_manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier to Manual Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_manual_mode(self) -&gt; bool:\n    \"\"\"Set Humidifier to Manual Mode.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    if HumidifierModes.MANUAL in self.mist_modes:\n        return await self.set_mode(HumidifierModes.MANUAL)\n    logger.debug('Manual mode not supported for this device.')\n    return await self.set_mode(HumidifierModes.MANUAL)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.set_mist_level","title":"set_mist_level  <code>async</code>  \u21b2","text":"<pre><code>set_mist_level(level: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Mist Level for Humidifier.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>Mist level.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>Mist levels are defined in <code>self.mist_levels</code>.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_mist_level(self, level: int) -&gt; bool:\n    if level not in self.mist_levels:\n        logger.debug('Humidifier mist level must be between 0 and 9')\n        return False\n\n    payload_data = {'levelIdx': 0, 'virtualLevel': level, 'levelType': 'mist'}\n    r_dict = await self.call_bypassv2_api('setVirtualLevel', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_mist_level', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.mist_level = level\n    self.state.mist_virtual_level = level\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.set_mode","title":"set_mode  <code>async</code>  \u21b2","text":"<pre><code>set_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier Mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Humidifier mode.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>Modes for device are defined in <code>self.mist_modes</code>.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_mode(self, mode: str) -&gt; bool:\n    if mode.lower() not in self.mist_modes:\n        logger.debug('Invalid humidity mode used - %s', mode)\n        logger.debug(\n            'Proper modes for this device are - %s',\n            orjson.dumps(\n                self.mist_modes, option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS\n            ),\n        )\n        return False\n\n    payload_data = {'workMode': self.mist_modes[mode.lower()]}\n    r_dict = await self.call_bypassv2_api('setHumidityMode', payload_data)\n\n    r = Helpers.process_dev_response(logger, 'set_humidity_mode', self, r_dict)\n    if r is None:\n        return False\n    self.state.mode = mode\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.set_nightlight_brightness","title":"set_nightlight_brightness  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_brightness(brightness: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier night light brightness.</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <code>int</code> <p>Target night light brightness.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_nightlight_brightness(self, brightness: int) -&gt; bool:\n    \"\"\"Set Humidifier night light brightness.\n\n    Args:\n        brightness (int): Target night light brightness.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    del brightness\n    if not self.supports_nightlight_brightness:\n        logger.debug('Nightlight brightness is not supported for this device.')\n        return False\n    logger.debug('Nightlight brightness has not been configured.')\n    return False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.set_sleep_mode","title":"set_sleep_mode  <code>async</code>  \u21b2","text":"<pre><code>set_sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier to Sleep Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_sleep_mode(self) -&gt; bool:\n    \"\"\"Set Humidifier to Sleep Mode.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    if HumidifierModes.SLEEP in self.mist_modes:\n        return await self.set_mode(HumidifierModes.SLEEP)\n    logger.debug('Sleep mode not supported for this device.')\n    return await self.set_mode(HumidifierModes.SLEEP)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    \"\"\"Set timer for device.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Args:\n        duration (int): Duration in seconds.\n        action (str | None): Action to take when timer expires.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del duration\n    del action\n    logger.debug('Not implemented - set_timer')\n    return False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.set_warm_level","title":"set_warm_level  <code>async</code>  \u21b2","text":"<pre><code>set_warm_level(warm_level: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier Warm Level.</p> <p>Parameters:</p> Name Type Description Default <code>warm_level</code> <code>int</code> <p>Target warm level.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_warm_level(self, warm_level: int) -&gt; bool:\n    \"\"\"Set Humidifier Warm Level.\n\n    Args:\n        warm_level (int): Target warm level.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    del warm_level\n    if self.supports_warm_mist:\n        logger.debug('Warm level has not been configured.')\n        return False\n    logger.debug('Warm level is not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.toggle_automatic_stop","title":"toggle_automatic_stop  <code>async</code>  \u21b2","text":"<pre><code>toggle_automatic_stop(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Toggle automatic stop.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to enable automatic stop, False to disable.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def toggle_automatic_stop(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.automatic_stop_config is not True\n\n    payload_data = {'autoStopSwitch': int(toggle)}\n    r_dict = await self.call_bypassv2_api('setAutoStopSwitch', payload_data)\n    r = Helpers.process_dev_response(logger, 'toggle_automatic_stop', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.device_status = DeviceStatus.from_bool(toggle)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.toggle_display","title":"toggle_display  <code>async</code>  \u21b2","text":"<pre><code>toggle_display(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Toggle the display on/off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>True to turn on the display, False to turn off.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def toggle_display(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.display_set_status != DeviceStatus.ON\n\n    payload_data = {'screenSwitch': int(toggle)}\n    r_dict = await self.call_bypassv2_api('setDisplay', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_display', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.display_set_status = DeviceStatus.from_bool(toggle)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.toggle_drying_mode","title":"toggle_drying_mode  <code>async</code>  \u21b2","text":"<pre><code>toggle_drying_mode(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>enable/disable drying filters after turning off.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def toggle_drying_mode(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.drying_mode_status != DeviceStatus.ON\n\n    payload_data = {'autoDryingSwitch': int(toggle)}\n    r_dict = await self.call_bypassv2_api('setDryingMode', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_drying_mode_enabled', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.connection_status = ConnectionStatus.ONLINE\n    self.state.drying_mode_auto_switch = DeviceStatus.from_bool(toggle)\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.device_status != DeviceStatus.ON\n\n    payload_data = {'powerSwitch': int(toggle), 'switchIdx': 0}\n    r_dict = await self.call_bypassv2_api('setSwitch', payload_data)\n    r = Helpers.process_dev_response(logger, 'toggle_switch', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.device_status = DeviceStatus.from_bool(toggle)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.turn_off_automatic_stop","title":"turn_off_automatic_stop  <code>async</code>  \u21b2","text":"<pre><code>turn_off_automatic_stop() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn off automatic stop.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_off_automatic_stop(self) -&gt; bool:\n    \"\"\"Turn off automatic stop.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_automatic_stop(False)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.turn_off_display","title":"turn_off_display  <code>async</code>  \u21b2","text":"<pre><code>turn_off_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn off the display.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_off_display(self) -&gt; bool:\n    \"\"\"Turn off the display.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_display(False)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.turn_on_automatic_stop","title":"turn_on_automatic_stop  <code>async</code>  \u21b2","text":"<pre><code>turn_on_automatic_stop() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn on automatic stop.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_on_automatic_stop(self) -&gt; bool:\n    \"\"\"Turn on automatic stop.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_automatic_stop(True)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.turn_on_display","title":"turn_on_display  <code>async</code>  \u21b2","text":"<pre><code>turn_on_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn on the display.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_on_display(self) -&gt; bool:\n    \"\"\"Turn on the display.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_display(True)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncSuperior6000S.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S","title":"pyvesync.devices.vesynchumidifier.VeSyncHumid1000S \u21b2","text":"<pre><code>VeSyncHumid1000S(\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: HumidifierMap,\n)\n</code></pre> <p>               Bases: <code>VeSyncHumid200300S</code></p> <p>Levoit OasisMist 1000S Specific class.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The device details.</p> required <code>manager</code> <code>VeSync</code> <p>The manager object for API calls.</p> required <code>feature_map</code> <code>HumidifierMap</code> <p>The feature map for the device.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>HumidifierState</code> <p>The state of the humidifier.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <code>mist_levels</code> <code>list</code> <p>List of mist levels.</p> <code>mist_modes</code> <code>list</code> <p>List of mist modes.</p> <code>target_minmax</code> <code>tuple</code> <p>Tuple of target min and max values.</p> <code>warm_mist_levels</code> <code>list</code> <p>List of warm mist levels.</p> <p>Inherited From <code>VeSyncHumid200300S</code></p> <p>Initialize VeSync device base class.</p> <p>Initialize VeSync Humidifier Class.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The device details.</p> required <code>manager</code> <code>VeSync</code> <p>The VeSync manager.</p> required <code>feature_map</code> <code>HumidifierMap</code> <p>The feature map for the device.</p> required <p>Initialize 200S/300S Humidifier class.</p> <p>Initialize levoit 1000S device class.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>def __init__(\n    self,\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: HumidifierMap,\n) -&gt; None:\n    \"\"\"Initialize levoit 1000S device class.\"\"\"\n    super().__init__(details, manager, feature_map)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.mist_levels","title":"mist_levels  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mist_levels: list[str | int] = mist_levels\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.mist_modes","title":"mist_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mist_modes: dict[str, str] = mist_modes\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: HumidifierState = HumidifierState(\n    self, details, feature_map\n)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.supports_drying_mode","title":"supports_drying_mode  <code>property</code>  \u21b2","text":"<pre><code>supports_drying_mode: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports drying mode.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.supports_nightlight","title":"supports_nightlight  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports nightlight.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if nightlight is supported, False otherwise.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.supports_nightlight_brightness","title":"supports_nightlight_brightness  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight_brightness: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports nightlight brightness.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.supports_warm_mist","title":"supports_warm_mist  <code>property</code>  \u21b2","text":"<pre><code>supports_warm_mist: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports warm mist.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if warm mist is supported, False otherwise.</p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.target_minmax","title":"target_minmax  <code>instance-attribute</code>  \u21b2","text":"<pre><code>target_minmax: tuple[int, int] = target_minmax\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.warm_mist_levels","title":"warm_mist_levels  <code>instance-attribute</code>  \u21b2","text":"<pre><code>warm_mist_levels: list[int | str] = warm_mist_levels\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S-functions","title":"Functions\u21b2","text":""},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.automatic_stop_off","title":"automatic_stop_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>automatic_stop_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> Deprecated <p>Use turn_off_automatic_stop() instead.</p> <p>Turn 200S/300S Humidifier automatic stop on.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>@deprecated('Use turn_off_automatic_stop() instead.')\nasync def automatic_stop_off(self) -&gt; bool:\n    \"\"\"Turn 200S/300S Humidifier automatic stop on.\"\"\"\n    return await self.toggle_automatic_stop(False)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.automatic_stop_on","title":"automatic_stop_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>automatic_stop_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> Deprecated <p>Use turn_on_automatic_stop() instead.</p> <p>Turn 200S/300S Humidifier automatic stop on.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>@deprecated('Use turn_on_automatic_stop() instead.')\nasync def automatic_stop_on(self) -&gt; bool:\n    \"\"\"Turn 200S/300S Humidifier automatic stop on.\"\"\"\n    return await self.toggle_automatic_stop(True)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.call_bypassv2_api","title":"call_bypassv2_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv2_api(\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p> <p>Send Bypass V2 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V2 API.</p> <p>Parameters:</p> Name Type Description Default <code>payload_method</code> <code>str</code> <p>The method to use in the payload dict.</p> required <code>data</code> <code>dict | None</code> <p>The data to send in the request.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypassV2'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the API url, defaults to <code>bypassV2</code>, e.g. <code>/cloud/v2/deviceManaged/bypassV2</code>.</p> <code>'bypassV2'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv2_api(\n    self,\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None:\n    \"\"\"Send Bypass V2 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V2 API.\n\n    Args:\n        payload_method (str): The method to use in the payload dict.\n        data (dict | None): The data to send in the request.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the API url, defaults to\n            `bypassV2`, e.g. `/cloud/v2/deviceManaged/bypassV2`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(payload_method, data, method)\n    endpoint = BYPASS_V2_BASE + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        endpoint, 'post', request, Helpers.req_header_bypass()\n    )\n    return resp_dict\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    if self.state.timer is None:\n        logger.debug('No timer to clear, run get_timer() first.')\n        return False\n    payload = {\n        'id': self.state.timer.id,\n    }\n    r_dict = await self.call_bypassv2_api('delTimer', payload)\n    r = Helpers.process_dev_response(logger, 'clear_timer', self, r_dict)\n    if r is None:\n        return False\n    self.state.timer = None\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def get_details(self) -&gt; None:\n    r_dict = await self.call_bypassv2_api('getHumidifierStatus')\n    r_model = process_bypassv2_result(\n        self, logger, 'get_details', r_dict, Levoit1000SResult\n    )\n    if r_model is None:\n        return\n\n    self._set_state(r_model)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    r_dict = await self.call_bypassv2_api('getTimer')\n    result_model = process_bypassv2_result(\n        self, logger, 'get_timer', r_dict, ResultV2GetTimer\n    )\n    if result_model is None:\n        return None\n    if not result_model.timers:\n        logger.debug('No timers found')\n        return None\n    timer = result_model.timers[0]\n    self.state.timer = Timer(\n        timer_duration=timer.total,\n        action=timer.action,\n        id=timer.id,\n    )\n    return self.state.timer\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.set_auto_mode","title":"set_auto_mode  <code>async</code>  \u21b2","text":"<pre><code>set_auto_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier to Auto Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_auto_mode(self) -&gt; bool:\n    \"\"\"Set Humidifier to Auto Mode.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    if HumidifierModes.AUTO in self.mist_modes:\n        return await self.set_mode(HumidifierModes.AUTO)\n    logger.debug('Auto mode not supported for this device.')\n    return await self.set_mode(HumidifierModes.AUTO)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.set_automatic_stop","title":"set_automatic_stop  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_automatic_stop(mode: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> Deprecated <p>Use toggle_automatic_stop() instead.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>@deprecated('Use toggle_automatic_stop() instead.')\nasync def set_automatic_stop(self, mode: bool) -&gt; bool:\n    return await self.toggle_automatic_stop(mode)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.set_display","title":"set_display  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_display(toggle: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> Deprecated <p>Use toggle_display() instead.</p> <p>Toggle display on/off.</p> <p>This is a deprecated method, please use toggle_display() instead.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>@deprecated('Use toggle_display() instead.')\nasync def set_display(self, toggle: bool) -&gt; bool:\n    \"\"\"Toggle display on/off.\n\n    This is a deprecated method, please use toggle_display() instead.\n    \"\"\"\n    return await self.toggle_switch(toggle)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.set_humidity","title":"set_humidity  <code>async</code>  \u21b2","text":"<pre><code>set_humidity(humidity: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> <p>Set Humidifier Target Humidity.</p> <p>Parameters:</p> Name Type Description Default <code>humidity</code> <code>int</code> <p>Target humidity level.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_humidity(self, humidity: int) -&gt; bool:\n    if not Validators.validate_range(humidity, *self.target_minmax):\n        logger.debug(\n            'Humidity value must be set between %s and %s',\n            self.target_minmax[0],\n            self.target_minmax[1],\n        )\n        return False\n\n    payload_data = {'targetHumidity': humidity}\n    r_dict = await self.call_bypassv2_api('setTargetHumidity', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_humidity', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.auto_target_humidity = humidity\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.set_humidity_mode","title":"set_humidity_mode  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>set_humidity_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> Deprecated <p>Use set_mode() instead.</p> <p>Set humidifier mode - sleep, auto or manual.</p> <p>Deprecated, please use set_mode() instead.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>@deprecated('Use set_mode() instead.')\nasync def set_humidity_mode(self, mode: str) -&gt; bool:\n    \"\"\"Set humidifier mode - sleep, auto or manual.\n\n    Deprecated, please use set_mode() instead.\n    \"\"\"\n    return await self.set_mode(mode)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.set_manual_mode","title":"set_manual_mode  <code>async</code>  \u21b2","text":"<pre><code>set_manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier to Manual Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_manual_mode(self) -&gt; bool:\n    \"\"\"Set Humidifier to Manual Mode.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    if HumidifierModes.MANUAL in self.mist_modes:\n        return await self.set_mode(HumidifierModes.MANUAL)\n    logger.debug('Manual mode not supported for this device.')\n    return await self.set_mode(HumidifierModes.MANUAL)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.set_mist_level","title":"set_mist_level  <code>async</code>  \u21b2","text":"<pre><code>set_mist_level(level: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> <p>Set Mist Level for Humidifier.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>Mist level.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>Mist levels are defined in <code>self.mist_levels</code>.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_mist_level(self, level: int) -&gt; bool:\n    if level not in self.mist_levels:\n        logger.debug('Humidifier mist level out of range')\n        return False\n\n    payload_data = {'levelIdx': 0, 'virtualLevel': level, 'levelType': 'mist'}\n    r_dict = await self.call_bypassv2_api('virtualLevel', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_mist_level', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.mist_level = level\n    self.state.mist_virtual_level = level\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.set_mode","title":"set_mode  <code>async</code>  \u21b2","text":"<pre><code>set_mode(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> <p>Set Humidifier Mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Humidifier mode.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>Modes for device are defined in <code>self.mist_modes</code>.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_mode(self, mode: str) -&gt; bool:\n    if mode.lower() not in self.mist_modes:\n        logger.debug('Invalid humidity mode used - %s', mode)\n        logger.debug(\n            'Proper modes for this device are - %s',\n            orjson.dumps(\n                self.mist_modes, option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS\n            ),\n        )\n        return False\n\n    payload_data = {'workMode': mode.lower()}\n    r_dict = await self.call_bypassv2_api('setHumidityMode', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_mode', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.mode = mode\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.set_nightlight_brightness","title":"set_nightlight_brightness  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_brightness(brightness: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier night light brightness.</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <code>int</code> <p>Target night light brightness.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_nightlight_brightness(self, brightness: int) -&gt; bool:\n    if not self.supports_nightlight:\n        logger.debug(\n            '%s is a %s does not have a nightlight',\n            self.device_name,\n            self.device_type,\n        )\n        return False\n\n    if not Validators.validate_zero_to_hundred(brightness):\n        logger.debug('Brightness value must be set between 0 and 100')\n        return False\n\n    payload_data = {'night_light_brightness': brightness}\n    r_dict = await self.call_bypassv2_api('setNightLightBrightness', payload_data)\n    r = Helpers.process_dev_response(\n        logger, 'set_night_light_brightness', self, r_dict\n    )\n    if r is None:\n        return False\n    self.state.nightlight_brightness = brightness\n    self.state.nightlight_status = (\n        DeviceStatus.ON if brightness &gt; 0 else DeviceStatus.OFF\n    )\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.set_sleep_mode","title":"set_sleep_mode  <code>async</code>  \u21b2","text":"<pre><code>set_sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier to Sleep Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_sleep_mode(self) -&gt; bool:\n    \"\"\"Set Humidifier to Sleep Mode.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    if HumidifierModes.SLEEP in self.mist_modes:\n        return await self.set_mode(HumidifierModes.SLEEP)\n    logger.debug('Sleep mode not supported for this device.')\n    return await self.set_mode(HumidifierModes.SLEEP)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    if action is None:\n        action = (\n            DeviceStatus.OFF\n            if self.state.device_status == DeviceStatus.ON\n            else DeviceStatus.ON\n        )\n    payload_data = {\n        'action': str(action),\n        'total': duration,\n    }\n    r_dict = await self.call_bypassv2_api('addTimer', payload_data)\n    r = process_bypassv2_result(self, logger, 'set_timer', r_dict, ResultV2SetTimer)\n    if r is None:\n        return False\n\n    self.state.timer = Timer(\n        timer_duration=duration, action=action, id=r.id, remaining=0\n    )\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.set_warm_level","title":"set_warm_level  <code>async</code>  \u21b2","text":"<pre><code>set_warm_level(warm_level: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier Warm Level.</p> <p>Parameters:</p> Name Type Description Default <code>warm_level</code> <code>int</code> <p>Target warm level.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def set_warm_level(self, warm_level: int) -&gt; bool:\n    if not self.supports_warm_mist:\n        logger.debug(\n            '%s is a %s does not have a mist warmer',\n            self.device_name,\n            self.device_type,\n        )\n        return False\n\n    if warm_level not in self.warm_mist_levels:\n        logger.debug('warm_level value must be - %s', str(self.warm_mist_levels))\n        return False\n\n    payload_data = {'type': 'warm', 'level': warm_level, 'id': 0}\n    r_dict = await self.call_bypassv2_api('setVirtualLevel', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_warm_level', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.warm_mist_level = warm_level\n    self.state.warm_mist_enabled = True\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.toggle_automatic_stop","title":"toggle_automatic_stop  <code>async</code>  \u21b2","text":"<pre><code>toggle_automatic_stop(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> <p>Toggle automatic stop.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to enable automatic stop, False to disable.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def toggle_automatic_stop(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.automatic_stop_config != DeviceStatus.ON\n\n    payload_data = {'autoStopSwitch': int(toggle)}\n    r_dict = await self.call_bypassv2_api('setAutoStopSwitch', payload_data)\n    r = Helpers.process_dev_response(logger, 'set_automatic_stop', self, r_dict)\n\n    if r is None:\n        return False\n    self.state.automatic_stop_config = toggle\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.toggle_display","title":"toggle_display  <code>async</code>  \u21b2","text":"<pre><code>toggle_display(toggle: bool) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> <p>Toggle the display on/off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>True to turn on the display, False to turn off.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def toggle_display(self, toggle: bool) -&gt; bool:\n    payload_data = {'screenSwitch': int(toggle)}\n    body = self._build_request('setDisplay', payload_data)\n    headers = Helpers.req_header_bypass()\n\n    r_dict, _ = await self.manager.async_call_api(\n        '/cloud/v2/deviceManaged/bypassV2',\n        method='post',\n        headers=headers,\n        json_object=body.to_dict(),\n    )\n    r = Helpers.process_dev_response(logger, 'set_display', self, r_dict)\n    if r is None:\n        return False\n    self.state.display_set_status = DeviceStatus.from_bool(toggle)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.toggle_drying_mode","title":"toggle_drying_mode  <code>async</code>  \u21b2","text":"<pre><code>toggle_drying_mode(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>enable/disable drying filters after turning off.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def toggle_drying_mode(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"enable/disable drying filters after turning off.\"\"\"\n    del toggle\n    if self.supports_drying_mode:\n        logger.debug('Drying mode is not configured for this device.')\n        return False\n    logger.debug('Drying mode is not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumid200300S</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesynchumidifier.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.device_status != DeviceStatus.ON\n\n    payload_data = {'powerSwitch': int(toggle), 'switchIdx': 0}\n    r_dict = await self.call_bypassv2_api('setSwitch', payload_data)\n    r = Helpers.process_dev_response(logger, 'toggle_switch', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.device_status = DeviceStatus.from_bool(toggle)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.turn_off_automatic_stop","title":"turn_off_automatic_stop  <code>async</code>  \u21b2","text":"<pre><code>turn_off_automatic_stop() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn off automatic stop.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_off_automatic_stop(self) -&gt; bool:\n    \"\"\"Turn off automatic stop.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_automatic_stop(False)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.turn_off_display","title":"turn_off_display  <code>async</code>  \u21b2","text":"<pre><code>turn_off_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn off the display.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_off_display(self) -&gt; bool:\n    \"\"\"Turn off the display.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_display(False)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.turn_on_automatic_stop","title":"turn_on_automatic_stop  <code>async</code>  \u21b2","text":"<pre><code>turn_on_automatic_stop() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn on automatic stop.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_on_automatic_stop(self) -&gt; bool:\n    \"\"\"Turn on automatic stop.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_automatic_stop(True)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.turn_on_display","title":"turn_on_display  <code>async</code>  \u21b2","text":"<pre><code>turn_on_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn on the display.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_on_display(self) -&gt; bool:\n    \"\"\"Turn on the display.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_display(True)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.devices.vesynchumidifier.VeSyncHumid1000S.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier","title":"pyvesync.base_devices.humidifier_base.VeSyncHumidifier \u21b2","text":"<p>               Bases: <code>VeSyncBaseToggleDevice</code></p> <p>VeSyncHumdifier Base Class.</p> <p>This is the base device to be inherited by all Humidifier devices. This class only holds the device configuration and static attributes. The state attribute holds the current state.</p> <p>Attributes:</p> Name Type Description <code>state</code> <code>HumidifierState</code> <p>The state of the humidifier.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <code>mist_levels</code> <code>list</code> <p>List of mist levels.</p> <code>mist_modes</code> <code>list</code> <p>List of mist modes.</p> <code>target_minmax</code> <code>tuple</code> <p>Tuple of target min and max values.</p> <code>warm_mist_levels</code> <code>list</code> <p>List of warm mist levels.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>class VeSyncHumidifier(VeSyncBaseToggleDevice):\n    \"\"\"VeSyncHumdifier Base Class.\n\n    This is the base device to be inherited by all Humidifier devices.\n    This class only holds the device configuration and static attributes.\n    The state attribute holds the current state.\n\n    Attributes:\n        state (HumidifierState): The state of the humidifier.\n        last_response (ResponseInfo): Last response from API call.\n        manager (VeSync): Manager object for API calls.\n        device_name (str): Name of device.\n        device_image (str): URL for device image.\n        cid (str): Device ID.\n        connection_type (str): Connection type of device.\n        device_type (str): Type of device.\n        type (str): Type of device.\n        uuid (str): UUID of device, not always present.\n        config_module (str): Configuration module of device.\n        mac_id (str): MAC ID of device.\n        current_firm_version (str): Current firmware version of device.\n        device_region (str): Region of device. (US, EU, etc.)\n        pid (str): Product ID of device, pulled by some devices on update.\n        sub_device_no (int): Sub-device number of device.\n        product_type (str): Product type of device.\n        features (dict): Features of device.\n        mist_levels (list): List of mist levels.\n        mist_modes (list): List of mist modes.\n        target_minmax (tuple): Tuple of target min and max values.\n        warm_mist_levels (list): List of warm mist levels.\n\n    \"\"\"\n\n    __slots__ = (\n        'mist_levels',\n        'mist_modes',\n        'target_minmax',\n        'warm_mist_levels',\n    )\n\n    def __init__(\n        self,\n        details: ResponseDeviceDetailsModel,\n        manager: VeSync,\n        feature_map: HumidifierMap,\n    ) -&gt; None:\n        \"\"\"Initialize VeSync Humidifier Class.\n\n        Args:\n            details (ResponseDeviceDetailsModel): The device details.\n            manager (VeSync): The VeSync manager.\n            feature_map (HumidifierMap): The feature map for the device.\n        \"\"\"\n        super().__init__(details, manager, feature_map)\n        self.state: HumidifierState = HumidifierState(self, details, feature_map)\n        self.mist_modes: dict[str, str] = feature_map.mist_modes\n        self.mist_levels: list[str | int] = feature_map.mist_levels\n        self.features: list[str] = feature_map.features\n        self.warm_mist_levels: list[int | str] = feature_map.warm_mist_levels\n        self.target_minmax: tuple[int, int] = feature_map.target_minmax\n\n    @property\n    def supports_warm_mist(self) -&gt; bool:\n        \"\"\"Return True if the humidifier supports warm mist.\n\n        Returns:\n            bool: True if warm mist is supported, False otherwise.\n        \"\"\"\n        return HumidifierFeatures.WARM_MIST in self.features\n\n    @property\n    def supports_nightlight(self) -&gt; bool:\n        \"\"\"Return True if the humidifier supports nightlight.\n\n        Returns:\n            bool: True if nightlight is supported, False otherwise.\n        \"\"\"\n        return HumidifierFeatures.NIGHTLIGHT in self.features\n\n    @property\n    def supports_nightlight_brightness(self) -&gt; bool:\n        \"\"\"Return True if the humidifier supports nightlight brightness.\"\"\"\n        return HumidifierFeatures.NIGHTLIGHT_BRIGHTNESS in self.features\n\n    @property\n    def supports_drying_mode(self) -&gt; bool:\n        \"\"\"Return True if the humidifier supports drying mode.\"\"\"\n        return HumidifierFeatures.DRYING_MODE in self.features\n\n    async def toggle_automatic_stop(self, toggle: bool | None = None) -&gt; bool:\n        \"\"\"Toggle automatic stop.\n\n        Args:\n            toggle (bool | None): True to enable automatic stop, False to disable.\n\n        Returns:\n            bool: Success of request.\n        \"\"\"\n        del toggle\n        logger.warning('Automatic stop is not supported or configured for this device.')\n        return False\n\n    async def toggle_display(self, toggle: bool) -&gt; bool:\n        \"\"\"Toggle the display on/off.\n\n        Args:\n            toggle (bool): True to turn on the display, False to turn off.\n\n        Returns:\n            bool: Success of request.\n        \"\"\"\n        del toggle\n        logger.warning('Display is not supported or configured for this device.')\n        return False\n\n    @abstractmethod\n    async def set_mode(self, mode: str) -&gt; bool:\n        \"\"\"Set Humidifier Mode.\n\n        Args:\n            mode (str): Humidifier mode.\n\n        Returns:\n            bool: Success of request.\n\n        Note:\n            Modes for device are defined in `self.mist_modes`.\n        \"\"\"\n\n    @abstractmethod\n    async def set_mist_level(self, level: int) -&gt; bool:\n        \"\"\"Set Mist Level for Humidifier.\n\n        Args:\n            level (int): Mist level.\n\n        Returns:\n            bool: Success of request.\n\n        Note:\n            Mist levels are defined in `self.mist_levels`.\n        \"\"\"\n\n    async def turn_on_display(self) -&gt; bool:\n        \"\"\"Turn on the display.\n\n        Returns:\n            bool: Success of request.\n        \"\"\"\n        return await self.toggle_display(True)\n\n    async def turn_off_display(self) -&gt; bool:\n        \"\"\"Turn off the display.\n\n        Returns:\n            bool: Success of request.\n        \"\"\"\n        return await self.toggle_display(False)\n\n    async def turn_on_automatic_stop(self) -&gt; bool:\n        \"\"\"Turn on automatic stop.\n\n        Returns:\n            bool: Success of request.\n        \"\"\"\n        return await self.toggle_automatic_stop(True)\n\n    async def turn_off_automatic_stop(self) -&gt; bool:\n        \"\"\"Turn off automatic stop.\n\n        Returns:\n            bool: Success of request.\n        \"\"\"\n        return await self.toggle_automatic_stop(False)\n\n    async def set_auto_mode(self) -&gt; bool:\n        \"\"\"Set Humidifier to Auto Mode.\n\n        Returns:\n            bool: Success of request.\n        \"\"\"\n        if HumidifierModes.AUTO in self.mist_modes:\n            return await self.set_mode(HumidifierModes.AUTO)\n        logger.debug('Auto mode not supported for this device.')\n        return await self.set_mode(HumidifierModes.AUTO)\n\n    async def set_manual_mode(self) -&gt; bool:\n        \"\"\"Set Humidifier to Manual Mode.\n\n        Returns:\n            bool: Success of request.\n        \"\"\"\n        if HumidifierModes.MANUAL in self.mist_modes:\n            return await self.set_mode(HumidifierModes.MANUAL)\n        logger.debug('Manual mode not supported for this device.')\n        return await self.set_mode(HumidifierModes.MANUAL)\n\n    async def set_sleep_mode(self) -&gt; bool:\n        \"\"\"Set Humidifier to Sleep Mode.\n\n        Returns:\n            bool: Success of request.\n        \"\"\"\n        if HumidifierModes.SLEEP in self.mist_modes:\n            return await self.set_mode(HumidifierModes.SLEEP)\n        logger.debug('Sleep mode not supported for this device.')\n        return await self.set_mode(HumidifierModes.SLEEP)\n\n    async def set_humidity(self, humidity: int) -&gt; bool:\n        \"\"\"Set Humidifier Target Humidity.\n\n        Args:\n            humidity (int): Target humidity level.\n\n        Returns:\n            bool: Success of request.\n        \"\"\"\n        del humidity\n        logger.debug('Target humidity is not supported or configured for this device.')\n        return False\n\n    async def set_nightlight_brightness(self, brightness: int) -&gt; bool:\n        \"\"\"Set Humidifier night light brightness.\n\n        Args:\n            brightness (int): Target night light brightness.\n\n        Returns:\n            bool: Success of request.\n        \"\"\"\n        del brightness\n        if not self.supports_nightlight_brightness:\n            logger.debug('Nightlight brightness is not supported for this device.')\n            return False\n        logger.debug('Nightlight brightness has not been configured.')\n        return False\n\n    async def set_warm_level(self, warm_level: int) -&gt; bool:\n        \"\"\"Set Humidifier Warm Level.\n\n        Args:\n            warm_level (int): Target warm level.\n\n        Returns:\n            bool: Success of request.\n        \"\"\"\n        del warm_level\n        if self.supports_warm_mist:\n            logger.debug('Warm level has not been configured.')\n            return False\n        logger.debug('Warm level is not supported for this device.')\n        return False\n\n    async def toggle_drying_mode(self, toggle: bool | None = None) -&gt; bool:\n        \"\"\"enable/disable drying filters after turning off.\"\"\"\n        del toggle\n        if self.supports_drying_mode:\n            logger.debug('Drying mode is not configured for this device.')\n            return False\n        logger.debug('Drying mode is not supported for this device.')\n        return False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager = manager\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.mist_levels","title":"mist_levels  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mist_levels: list[str | int] = mist_levels\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.mist_modes","title":"mist_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mist_modes: dict[str, str] = mist_modes\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: HumidifierState = HumidifierState(\n    self, details, feature_map\n)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.supports_drying_mode","title":"supports_drying_mode  <code>property</code>  \u21b2","text":"<pre><code>supports_drying_mode: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports drying mode.</p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.supports_nightlight","title":"supports_nightlight  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports nightlight.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if nightlight is supported, False otherwise.</p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.supports_nightlight_brightness","title":"supports_nightlight_brightness  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight_brightness: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports nightlight brightness.</p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.supports_warm_mist","title":"supports_warm_mist  <code>property</code>  \u21b2","text":"<pre><code>supports_warm_mist: bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Return True if the humidifier supports warm mist.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if warm mist is supported, False otherwise.</p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.target_minmax","title":"target_minmax  <code>instance-attribute</code>  \u21b2","text":"<pre><code>target_minmax: tuple[int, int] = target_minmax\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.warm_mist_levels","title":"warm_mist_levels  <code>instance-attribute</code>  \u21b2","text":"<pre><code>warm_mist_levels: list[int | str] = warm_mist_levels\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier-functions","title":"Functions\u21b2","text":""},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    \"\"\"Clear timer for device from API.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    logger.debug('Not implemented - clear_timer')\n    return False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.get_details","title":"get_details  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>@abstractmethod\nasync def get_details(self) -&gt; None:\n    \"\"\"Get device details.\n\n    This method is defined in each device class to contain\n    the logic to pull the device state from the API and update\n    the device's `state` attribute. The `update()` method should\n    be called to update the device state.\n    \"\"\"\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    \"\"\"Get timer for device from API and set the `state.Timer` attribute.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Note:\n        This method may not be implemented for all devices. Please\n        open an issue if there is an error.\n    \"\"\"\n    logger.debug('Not implemented - get_timer')\n    return None\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.set_auto_mode","title":"set_auto_mode  <code>async</code>  \u21b2","text":"<pre><code>set_auto_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier to Auto Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_auto_mode(self) -&gt; bool:\n    \"\"\"Set Humidifier to Auto Mode.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    if HumidifierModes.AUTO in self.mist_modes:\n        return await self.set_mode(HumidifierModes.AUTO)\n    logger.debug('Auto mode not supported for this device.')\n    return await self.set_mode(HumidifierModes.AUTO)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.set_humidity","title":"set_humidity  <code>async</code>  \u21b2","text":"<pre><code>set_humidity(humidity: int) -&gt; bool\n</code></pre> <p>Set Humidifier Target Humidity.</p> <p>Parameters:</p> Name Type Description Default <code>humidity</code> <code>int</code> <p>Target humidity level.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_humidity(self, humidity: int) -&gt; bool:\n    \"\"\"Set Humidifier Target Humidity.\n\n    Args:\n        humidity (int): Target humidity level.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    del humidity\n    logger.debug('Target humidity is not supported or configured for this device.')\n    return False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.set_manual_mode","title":"set_manual_mode  <code>async</code>  \u21b2","text":"<pre><code>set_manual_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier to Manual Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_manual_mode(self) -&gt; bool:\n    \"\"\"Set Humidifier to Manual Mode.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    if HumidifierModes.MANUAL in self.mist_modes:\n        return await self.set_mode(HumidifierModes.MANUAL)\n    logger.debug('Manual mode not supported for this device.')\n    return await self.set_mode(HumidifierModes.MANUAL)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.set_mist_level","title":"set_mist_level  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>set_mist_level(level: int) -&gt; bool\n</code></pre> <p>Set Mist Level for Humidifier.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>Mist level.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>Mist levels are defined in <code>self.mist_levels</code>.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>@abstractmethod\nasync def set_mist_level(self, level: int) -&gt; bool:\n    \"\"\"Set Mist Level for Humidifier.\n\n    Args:\n        level (int): Mist level.\n\n    Returns:\n        bool: Success of request.\n\n    Note:\n        Mist levels are defined in `self.mist_levels`.\n    \"\"\"\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.set_mode","title":"set_mode  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>set_mode(mode: str) -&gt; bool\n</code></pre> <p>Set Humidifier Mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Humidifier mode.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Note <p>Modes for device are defined in <code>self.mist_modes</code>.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>@abstractmethod\nasync def set_mode(self, mode: str) -&gt; bool:\n    \"\"\"Set Humidifier Mode.\n\n    Args:\n        mode (str): Humidifier mode.\n\n    Returns:\n        bool: Success of request.\n\n    Note:\n        Modes for device are defined in `self.mist_modes`.\n    \"\"\"\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.set_nightlight_brightness","title":"set_nightlight_brightness  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_brightness(brightness: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier night light brightness.</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <code>int</code> <p>Target night light brightness.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_nightlight_brightness(self, brightness: int) -&gt; bool:\n    \"\"\"Set Humidifier night light brightness.\n\n    Args:\n        brightness (int): Target night light brightness.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    del brightness\n    if not self.supports_nightlight_brightness:\n        logger.debug('Nightlight brightness is not supported for this device.')\n        return False\n    logger.debug('Nightlight brightness has not been configured.')\n    return False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.set_sleep_mode","title":"set_sleep_mode  <code>async</code>  \u21b2","text":"<pre><code>set_sleep_mode() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier to Sleep Mode.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_sleep_mode(self) -&gt; bool:\n    \"\"\"Set Humidifier to Sleep Mode.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    if HumidifierModes.SLEEP in self.mist_modes:\n        return await self.set_mode(HumidifierModes.SLEEP)\n    logger.debug('Sleep mode not supported for this device.')\n    return await self.set_mode(HumidifierModes.SLEEP)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    \"\"\"Set timer for device.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Args:\n        duration (int): Duration in seconds.\n        action (str | None): Action to take when timer expires.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del duration\n    del action\n    logger.debug('Not implemented - set_timer')\n    return False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.set_warm_level","title":"set_warm_level  <code>async</code>  \u21b2","text":"<pre><code>set_warm_level(warm_level: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Set Humidifier Warm Level.</p> <p>Parameters:</p> Name Type Description Default <code>warm_level</code> <code>int</code> <p>Target warm level.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def set_warm_level(self, warm_level: int) -&gt; bool:\n    \"\"\"Set Humidifier Warm Level.\n\n    Args:\n        warm_level (int): Target warm level.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    del warm_level\n    if self.supports_warm_mist:\n        logger.debug('Warm level has not been configured.')\n        return False\n    logger.debug('Warm level is not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.toggle_automatic_stop","title":"toggle_automatic_stop  <code>async</code>  \u21b2","text":"<pre><code>toggle_automatic_stop(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Toggle automatic stop.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to enable automatic stop, False to disable.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def toggle_automatic_stop(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Toggle automatic stop.\n\n    Args:\n        toggle (bool | None): True to enable automatic stop, False to disable.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    del toggle\n    logger.warning('Automatic stop is not supported or configured for this device.')\n    return False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.toggle_display","title":"toggle_display  <code>async</code>  \u21b2","text":"<pre><code>toggle_display(toggle: bool) -&gt; bool\n</code></pre> <p>Toggle the display on/off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>True to turn on the display, False to turn off.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def toggle_display(self, toggle: bool) -&gt; bool:\n    \"\"\"Toggle the display on/off.\n\n    Args:\n        toggle (bool): True to turn on the display, False to turn off.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    del toggle\n    logger.warning('Display is not supported or configured for this device.')\n    return False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.toggle_drying_mode","title":"toggle_drying_mode  <code>async</code>  \u21b2","text":"<pre><code>toggle_drying_mode(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>enable/disable drying filters after turning off.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def toggle_drying_mode(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"enable/disable drying filters after turning off.\"\"\"\n    del toggle\n    if self.supports_drying_mode:\n        logger.debug('Drying mode is not configured for this device.')\n        return False\n    logger.debug('Drying mode is not supported for this device.')\n    return False\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.toggle_switch","title":"toggle_switch  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>@abstractmethod\nasync def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Toggle device power on or off.\n\n    Args:\n        toggle (bool | None): True to turn on, False to turn off, None to toggle.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.turn_off_automatic_stop","title":"turn_off_automatic_stop  <code>async</code>  \u21b2","text":"<pre><code>turn_off_automatic_stop() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn off automatic stop.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_off_automatic_stop(self) -&gt; bool:\n    \"\"\"Turn off automatic stop.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_automatic_stop(False)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.turn_off_display","title":"turn_off_display  <code>async</code>  \u21b2","text":"<pre><code>turn_off_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn off the display.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_off_display(self) -&gt; bool:\n    \"\"\"Turn off the display.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_display(False)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.turn_on_automatic_stop","title":"turn_on_automatic_stop  <code>async</code>  \u21b2","text":"<pre><code>turn_on_automatic_stop() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn on automatic stop.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_on_automatic_stop(self) -&gt; bool:\n    \"\"\"Turn on automatic stop.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_automatic_stop(True)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.turn_on_display","title":"turn_on_display  <code>async</code>  \u21b2","text":"<pre><code>turn_on_display() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncHumidifier</code></p> <p>Turn on the display.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Success of request.</p> Source code in <code>src\\pyvesync\\base_devices\\humidifier_base.py</code> <pre><code>async def turn_on_display(self) -&gt; bool:\n    \"\"\"Turn on the display.\n\n    Returns:\n        bool: Success of request.\n    \"\"\"\n    return await self.toggle_display(True)\n</code></pre>"},{"location":"devices/humidifiers/#pyvesync.base_devices.humidifier_base.VeSyncHumidifier.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/kitchen/","title":"VeSync Air Fryers\u21b2","text":"<p>Currently the only supported air fryer is the  Cosori 3.7 and 5.8 Quart Air Fryer. This device is a smart air fryer that can be monitored and controlled via this library.</p>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen","title":"pyvesync.devices.vesynckitchen \u21b2","text":"<p>VeSync Kitchen Devices.</p> <p>The Cosori 3.7 and 5.8 Quart Air Fryer has several methods and properties that can be used to monitor and control the device.</p> <p>To maintain consistency of state, the update() method is called after each of the methods that change the state of the device.</p> <p>There is also an instance attribute that can be set <code>VeSyncAirFryer158.refresh_interval</code> that will set the interval in seconds that the state of the air fryer should be updated before a method that changes state is called. This is an additional API call but is necessary to maintain state, especially when trying to <code>pause</code> or <code>resume</code> the device. Defaults to 60 seconds but can be set via:</p> <pre><code># Change to 120 seconds before status is updated between calls\nVeSyncAirFryer158.refresh_interval = 120\n\n# Set status update before every call\nVeSyncAirFryer158.refresh_interval = 0\n\n# Disable status update before every call\nVeSyncAirFryer158.refresh_interval = -1\n</code></pre>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.AirFryer158138State","title":"pyvesync.devices.vesynckitchen.AirFryer158138State \u21b2","text":"<p>               Bases: <code>FryerState</code></p> <p>Dataclass for air fryer status.</p> <p>Attributes:</p> Name Type Description <code>active_time</code> <code>int</code> <p>Active time of device, defaults to None.</p> <code>connection_status</code> <code>str</code> <p>Connection status of device.</p> <code>device</code> <code>VeSyncBaseDevice</code> <p>Device object.</p> <code>device_status</code> <code>str</code> <p>Device status.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <code>last_update_ts</code> <code>int</code> <p>Last update timestamp of device, defaults to None.</p> <code>ready_start</code> <code>bool</code> <p>Ready start status of device, defaults to False.</p> <code>preheat</code> <code>bool</code> <p>Preheat status of device, defaults to False.</p> <code>cook_status</code> <code>str</code> <p>Cooking status of device, defaults to None.</p> <code>current_temp</code> <code>int</code> <p>Current temperature of device, defaults to None.</p> <code>cook_set_temp</code> <code>int</code> <p>Cooking set temperature of device, defaults to None.</p> <code>last_timestamp</code> <code>int</code> <p>Last timestamp of device, defaults to None.</p> <code>preheat_set_time</code> <code>int</code> <p>Preheat set time of device, defaults to None.</p> <code>preheat_last_time</code> <code>int</code> <p>Preheat last time of device, defaults to None.</p> <code>_temp_unit</code> <code>str</code> <p>Temperature unit of device, defaults to None.</p> Source code in <code>src\\pyvesync\\devices\\vesynckitchen.py</code> <pre><code>class AirFryer158138State(FryerState):\n    \"\"\"Dataclass for air fryer status.\n\n    Attributes:\n        active_time (int): Active time of device, defaults to None.\n        connection_status (str): Connection status of device.\n        device (VeSyncBaseDevice): Device object.\n        device_status (str): Device status.\n        features (dict): Features of device.\n        last_update_ts (int): Last update timestamp of device, defaults to None.\n        ready_start (bool): Ready start status of device, defaults to False.\n        preheat (bool): Preheat status of device, defaults to False.\n        cook_status (str): Cooking status of device, defaults to None.\n        current_temp (int): Current temperature of device, defaults to None.\n        cook_set_temp (int): Cooking set temperature of device, defaults to None.\n        last_timestamp (int): Last timestamp of device, defaults to None.\n        preheat_set_time (int): Preheat set time of device, defaults to None.\n        preheat_last_time (int): Preheat last time of device, defaults to None.\n        _temp_unit (str): Temperature unit of device, defaults to None.\n    \"\"\"\n\n    __slots__ = (\n        '_temp_unit',\n        'cook_last_time',\n        'cook_set_temp',\n        'cook_set_time',\n        'cook_status',\n        'current_temp',\n        'last_timestamp',\n        'max_temp_c',\n        'max_temp_f',\n        'min_temp_c',\n        'min_temp_f',\n        'preheat',\n        'preheat_last_time',\n        'preheat_set_time',\n        'ready_start',\n    )\n\n    def __init__(\n        self,\n        device: VeSyncAirFryer158,\n        details: ResponseDeviceDetailsModel,\n        feature_map: AirFryerMap,\n    ) -&gt; None:\n        \"\"\"Init the Air Fryer 158 class.\"\"\"\n        super().__init__(device, details, feature_map)\n        self.device: VeSyncFryer = device\n        self.features: list[str] = feature_map.features\n        self.min_temp_f: int = feature_map.temperature_range_f[0]\n        self.max_temp_f: int = feature_map.temperature_range_f[1]\n        self.min_temp_c: int = feature_map.temperature_range_c[0]\n        self.max_temp_c: int = feature_map.temperature_range_c[1]\n        self.ready_start: bool = False\n        self.preheat: bool = False\n        self.cook_status: str | None = None\n        self.current_temp: int | None = None\n        self.cook_set_temp: int | None = None\n        self.cook_set_time: int | None = None\n        self.cook_last_time: int | None = None\n        self.last_timestamp: int | None = None\n        self.preheat_set_time: int | None = None\n        self.preheat_last_time: int | None = None\n        self._temp_unit: str | None = None\n\n    @property\n    def is_resumable(self) -&gt; bool:\n        \"\"\"Return if cook is resumable.\"\"\"\n        if self.cook_status in ['cookStop', 'preheatStop']:\n            if self.cook_set_time is not None:\n                return self.cook_set_time &gt; 0\n            if self.preheat_set_time is not None:\n                return self.preheat_set_time &gt; 0\n        return False\n\n    @property\n    def temp_unit(self) -&gt; str | None:\n        \"\"\"Return temperature unit.\"\"\"\n        return self._temp_unit\n\n    @temp_unit.setter\n    def temp_unit(self, temp_unit: str) -&gt; None:\n        \"\"\"Set temperature unit.\"\"\"\n        if temp_unit.lower() in ['f', 'fahrenheit', 'fahrenheight']:  # API TYPO\n            self._temp_unit = 'fahrenheit'\n        elif temp_unit.lower() in ['c', 'celsius']:\n            self._temp_unit = 'celsius'\n        else:\n            msg = f'Invalid temperature unit - {temp_unit}'\n            raise ValueError(msg)\n\n    @property\n    def preheat_time_remaining(self) -&gt; int:\n        \"\"\"Return preheat time remaining.\"\"\"\n        if self.preheat is False or self.cook_status == 'preheatEnd':\n            return 0\n        if self.cook_status in ['pullOut', 'preheatStop']:\n            if self.preheat_last_time is None:\n                return 0\n            return int(self.preheat_last_time // 60)\n        if self.preheat_last_time is not None and self.last_timestamp is not None:\n            return int(\n                max(\n                    (self.preheat_last_time - (int(time.time()) - self.last_timestamp))\n                    // 60,\n                    0,\n                )\n            )\n        return 0\n\n    @property\n    def cook_time_remaining(self) -&gt; int:\n        \"\"\"Returns the amount of time remaining if cooking.\"\"\"\n        if self.preheat is True or self.cook_status == 'cookEnd':\n            return 0\n        if self.cook_status in ['pullOut', 'cookStop']:\n            if self.cook_last_time is None:\n                return 0\n            return int(max(self.cook_last_time // 60, 0))\n        if self.cook_last_time is not None and self.last_timestamp is not None:\n            return int(\n                max(\n                    (self.cook_last_time - (int(time.time()) - self.last_timestamp))\n                    // 60,\n                    0,\n                )\n            )\n        return 0\n\n    @property\n    def remaining_time(self) -&gt; int:\n        \"\"\"Return minutes remaining if cooking/heating.\"\"\"\n        if self.preheat is True:\n            return self.preheat_time_remaining\n        return self.cook_time_remaining\n\n    @property\n    def is_running(self) -&gt; bool:\n        \"\"\"Return if cooking or heating.\"\"\"\n        return bool(self.cook_status in ['cooking', 'heating']) and bool(\n            self.remaining_time &gt; 0\n        )\n\n    @property\n    def is_cooking(self) -&gt; bool:\n        \"\"\"Return if cooking.\"\"\"\n        return self.cook_status == 'cooking' and self.remaining_time &gt; 0\n\n    @property\n    def is_heating(self) -&gt; bool:\n        \"\"\"Return if heating.\"\"\"\n        return self.cook_status == 'heating' and self.remaining_time &gt; 0\n\n    def status_request(self, json_cmd: dict) -&gt; None:  # noqa: C901\n        \"\"\"Set status from jsonCmd of API call.\"\"\"\n        self.last_timestamp = None\n        if not isinstance(json_cmd, dict):\n            return\n        self.preheat = False\n        preheat = json_cmd.get('preheat')\n        cook = json_cmd.get('cookMode')\n        if isinstance(preheat, dict):\n            self.preheat = True\n            if preheat.get('preheatStatus') == 'stop':\n                self.cook_status = 'preheatStop'\n            elif preheat.get('preheatStatus') == 'heating':\n                self.cook_status = 'heating'\n                self.last_timestamp = int(time.time())\n                self.preheat_set_time = preheat.get(\n                    'preheatSetTime', self.preheat_set_time\n                )\n                if preheat.get('preheatSetTime') is not None:\n                    self.preheat_last_time = preheat.get('preheatSetTime')\n                self.cook_set_temp = preheat.get('targetTemp', self.cook_set_temp)\n                self.cook_set_time = preheat.get('cookSetTime', self.cook_set_time)\n                self.cook_last_time = None\n            elif preheat.get('preheatStatus') == 'end':\n                self.cook_status = 'preheatEnd'\n                self.preheat_last_time = 0\n        elif isinstance(cook, dict):\n            self.clear_preheat()\n            if cook.get('cookStatus') == 'stop':\n                self.cook_status = 'cookStop'\n            elif cook.get('cookStatus') == 'cooking':\n                self.cook_status = 'cooking'\n                self.last_timestamp = int(time.time())\n                self.cook_set_time = cook.get('cookSetTime', self.cook_set_time)\n                self.cook_set_temp = cook.get('cookSetTemp', self.cook_set_temp)\n                self.current_temp = cook.get('currentTemp', self.current_temp)\n                self.temp_unit = cook.get(\n                    'tempUnit',\n                    self.temp_unit,  # type: ignore[assignment]\n                )\n            elif cook.get('cookStatus') == 'end':\n                self.set_standby()\n                self.cook_status = 'cookEnd'\n\n    def clear_preheat(self) -&gt; None:\n        \"\"\"Clear preheat status.\"\"\"\n        self.preheat = False\n        self.preheat_set_time = None\n        self.preheat_last_time = None\n\n    def set_standby(self) -&gt; None:\n        \"\"\"Clear cooking status.\"\"\"\n        self.cook_status = 'standby'\n        self.clear_preheat()\n        self.cook_last_time = None\n        self.current_temp = None\n        self.cook_set_time = None\n        self.cook_set_temp = None\n        self.last_timestamp = None\n\n    def status_response(self, return_status: dict) -&gt; None:\n        \"\"\"Set status of Air Fryer Based on API Response.\"\"\"\n        self.last_timestamp = None\n        self.preheat = False\n        self.cook_status = return_status.get('cookStatus')\n        if self.cook_status == 'standby':\n            self.set_standby()\n            return\n\n        #  If drawer is pulled out, set standby if resp does not contain other details\n        if self.cook_status == 'pullOut':\n            self.last_timestamp = None\n            if 'currentTemp' not in return_status or 'tempUnit' not in return_status:\n                self.set_standby()\n                self.cook_status = 'pullOut'\n                return\n        if return_status.get('preheatLastTime') is not None or self.cook_status in [\n            'heating',\n            'preheatStop',\n            'preheatEnd',\n        ]:\n            self.preheat = True\n\n        self.cook_set_time = return_status.get('cookSetTime', self.cook_set_time)\n        self.cook_last_time = return_status.get('cookLastTime')\n        self.current_temp = return_status.get('curentTemp')\n        self.cook_set_temp = return_status.get(\n            'targetTemp', return_status.get('cookSetTemp')\n        )\n        self.temp_unit = return_status.get(\n            'tempUnit',\n            self.temp_unit,  # type: ignore[assignment]\n        )\n        self.preheat_set_time = return_status.get('preheatSetTime')\n        self.preheat_last_time = return_status.get('preheatLastTime')\n\n        #  Set last_time timestamp if cooking\n        if self.cook_status in ['cooking', 'heating']:\n            self.last_timestamp = int(time.time())\n\n        if self.cook_status == 'preheatEnd':\n            self.preheat_last_time = 0\n            self.cook_last_time = None\n        if self.cook_status == 'cookEnd':\n            self.cook_last_time = 0\n\n        #  If Cooking, clear preheat status\n        if self.cook_status in ['cooking', 'cookStop', 'cookEnd']:\n            self.clear_preheat()\n</code></pre>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.AirFryer158138State.device","title":"device  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device: VeSyncFryer = device\n</code></pre> <p>Inherited From <code>FryerState</code></p>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.AirFryer158138State.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>FryerState</code></p>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.AirFryer158138State.is_resumable","title":"is_resumable  <code>property</code>  \u21b2","text":"<pre><code>is_resumable: bool\n</code></pre> <p>Return if cook is resumable.</p>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.AirFryer158138State.temp_unit","title":"temp_unit  <code>property</code> <code>writable</code>  \u21b2","text":"<pre><code>temp_unit: str | None\n</code></pre> <p>Return temperature unit.</p>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.AirFryer158138State.preheat_time_remaining","title":"preheat_time_remaining  <code>property</code>  \u21b2","text":"<pre><code>preheat_time_remaining: int\n</code></pre> <p>Return preheat time remaining.</p>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.AirFryer158138State.cook_time_remaining","title":"cook_time_remaining  <code>property</code>  \u21b2","text":"<pre><code>cook_time_remaining: int\n</code></pre> <p>Returns the amount of time remaining if cooking.</p>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.AirFryer158138State.remaining_time","title":"remaining_time  <code>property</code>  \u21b2","text":"<pre><code>remaining_time: int\n</code></pre> <p>Return minutes remaining if cooking/heating.</p>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.AirFryer158138State.is_running","title":"is_running  <code>property</code>  \u21b2","text":"<pre><code>is_running: bool\n</code></pre> <p>Return if cooking or heating.</p>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.AirFryer158138State.is_cooking","title":"is_cooking  <code>property</code>  \u21b2","text":"<pre><code>is_cooking: bool\n</code></pre> <p>Return if cooking.</p>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.AirFryer158138State.is_heating","title":"is_heating  <code>property</code>  \u21b2","text":"<pre><code>is_heating: bool\n</code></pre> <p>Return if heating.</p>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.AirFryer158138State.status_request","title":"status_request \u21b2","text":"<pre><code>status_request(json_cmd: dict) -&gt; None\n</code></pre> <p>Set status from jsonCmd of API call.</p> Source code in <code>src\\pyvesync\\devices\\vesynckitchen.py</code> <pre><code>def status_request(self, json_cmd: dict) -&gt; None:  # noqa: C901\n    \"\"\"Set status from jsonCmd of API call.\"\"\"\n    self.last_timestamp = None\n    if not isinstance(json_cmd, dict):\n        return\n    self.preheat = False\n    preheat = json_cmd.get('preheat')\n    cook = json_cmd.get('cookMode')\n    if isinstance(preheat, dict):\n        self.preheat = True\n        if preheat.get('preheatStatus') == 'stop':\n            self.cook_status = 'preheatStop'\n        elif preheat.get('preheatStatus') == 'heating':\n            self.cook_status = 'heating'\n            self.last_timestamp = int(time.time())\n            self.preheat_set_time = preheat.get(\n                'preheatSetTime', self.preheat_set_time\n            )\n            if preheat.get('preheatSetTime') is not None:\n                self.preheat_last_time = preheat.get('preheatSetTime')\n            self.cook_set_temp = preheat.get('targetTemp', self.cook_set_temp)\n            self.cook_set_time = preheat.get('cookSetTime', self.cook_set_time)\n            self.cook_last_time = None\n        elif preheat.get('preheatStatus') == 'end':\n            self.cook_status = 'preheatEnd'\n            self.preheat_last_time = 0\n    elif isinstance(cook, dict):\n        self.clear_preheat()\n        if cook.get('cookStatus') == 'stop':\n            self.cook_status = 'cookStop'\n        elif cook.get('cookStatus') == 'cooking':\n            self.cook_status = 'cooking'\n            self.last_timestamp = int(time.time())\n            self.cook_set_time = cook.get('cookSetTime', self.cook_set_time)\n            self.cook_set_temp = cook.get('cookSetTemp', self.cook_set_temp)\n            self.current_temp = cook.get('currentTemp', self.current_temp)\n            self.temp_unit = cook.get(\n                'tempUnit',\n                self.temp_unit,  # type: ignore[assignment]\n            )\n        elif cook.get('cookStatus') == 'end':\n            self.set_standby()\n            self.cook_status = 'cookEnd'\n</code></pre>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.AirFryer158138State.clear_preheat","title":"clear_preheat \u21b2","text":"<pre><code>clear_preheat() -&gt; None\n</code></pre> <p>Clear preheat status.</p> Source code in <code>src\\pyvesync\\devices\\vesynckitchen.py</code> <pre><code>def clear_preheat(self) -&gt; None:\n    \"\"\"Clear preheat status.\"\"\"\n    self.preheat = False\n    self.preheat_set_time = None\n    self.preheat_last_time = None\n</code></pre>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.AirFryer158138State.set_standby","title":"set_standby \u21b2","text":"<pre><code>set_standby() -&gt; None\n</code></pre> <p>Clear cooking status.</p> Source code in <code>src\\pyvesync\\devices\\vesynckitchen.py</code> <pre><code>def set_standby(self) -&gt; None:\n    \"\"\"Clear cooking status.\"\"\"\n    self.cook_status = 'standby'\n    self.clear_preheat()\n    self.cook_last_time = None\n    self.current_temp = None\n    self.cook_set_time = None\n    self.cook_set_temp = None\n    self.last_timestamp = None\n</code></pre>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.AirFryer158138State.status_response","title":"status_response \u21b2","text":"<pre><code>status_response(return_status: dict) -&gt; None\n</code></pre> <p>Set status of Air Fryer Based on API Response.</p> Source code in <code>src\\pyvesync\\devices\\vesynckitchen.py</code> <pre><code>def status_response(self, return_status: dict) -&gt; None:\n    \"\"\"Set status of Air Fryer Based on API Response.\"\"\"\n    self.last_timestamp = None\n    self.preheat = False\n    self.cook_status = return_status.get('cookStatus')\n    if self.cook_status == 'standby':\n        self.set_standby()\n        return\n\n    #  If drawer is pulled out, set standby if resp does not contain other details\n    if self.cook_status == 'pullOut':\n        self.last_timestamp = None\n        if 'currentTemp' not in return_status or 'tempUnit' not in return_status:\n            self.set_standby()\n            self.cook_status = 'pullOut'\n            return\n    if return_status.get('preheatLastTime') is not None or self.cook_status in [\n        'heating',\n        'preheatStop',\n        'preheatEnd',\n    ]:\n        self.preheat = True\n\n    self.cook_set_time = return_status.get('cookSetTime', self.cook_set_time)\n    self.cook_last_time = return_status.get('cookLastTime')\n    self.current_temp = return_status.get('curentTemp')\n    self.cook_set_temp = return_status.get(\n        'targetTemp', return_status.get('cookSetTemp')\n    )\n    self.temp_unit = return_status.get(\n        'tempUnit',\n        self.temp_unit,  # type: ignore[assignment]\n    )\n    self.preheat_set_time = return_status.get('preheatSetTime')\n    self.preheat_last_time = return_status.get('preheatLastTime')\n\n    #  Set last_time timestamp if cooking\n    if self.cook_status in ['cooking', 'heating']:\n        self.last_timestamp = int(time.time())\n\n    if self.cook_status == 'preheatEnd':\n        self.preheat_last_time = 0\n        self.cook_last_time = None\n    if self.cook_status == 'cookEnd':\n        self.cook_last_time = 0\n\n    #  If Cooking, clear preheat status\n    if self.cook_status in ['cooking', 'cookStop', 'cookEnd']:\n        self.clear_preheat()\n</code></pre>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.VeSyncAirFryer158","title":"pyvesync.devices.vesynckitchen.VeSyncAirFryer158 \u21b2","text":"<p>               Bases: <code>VeSyncFryer</code></p> <p>Cosori Air Fryer Class.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>Device details.</p> required <code>manager</code> <code>VeSync</code> <p>Manager class.</p> required <code>feature_map</code> <code>DeviceMapTemplate</code> <p>Device feature map.</p> required <p>Attributes:</p> Name Type Description <code>features</code> <code>list[str]</code> <p>List of features.</p> <code>state</code> <code>AirFryer158138State</code> <p>Air fryer state.</p> <code>last_update</code> <code>int</code> <p>Last update timestamp.</p> <code>refresh_interval</code> <code>int</code> <p>Refresh interval in seconds.</p> <code>cook_temps</code> <code>dict[str, list[int]] | None</code> <p>Cook temperatures.</p> <code>pid</code> <code>str</code> <p>PID for the device.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> Source code in <code>src\\pyvesync\\devices\\vesynckitchen.py</code> <pre><code>class VeSyncAirFryer158(VeSyncFryer):\n    \"\"\"Cosori Air Fryer Class.\n\n    Args:\n        details (ResponseDeviceDetailsModel): Device details.\n        manager (VeSync): Manager class.\n        feature_map (DeviceMapTemplate): Device feature map.\n\n    Attributes:\n        features (list[str]): List of features.\n        state (AirFryer158138State): Air fryer state.\n        last_update (int): Last update timestamp.\n        refresh_interval (int): Refresh interval in seconds.\n        cook_temps (dict[str, list[int]] | None): Cook temperatures.\n        pid (str): PID for the device.\n        last_response (ResponseInfo): Last response from API call.\n        manager (VeSync): Manager object for API calls.\n        device_name (str): Name of device.\n        device_image (str): URL for device image.\n        cid (str): Device ID.\n        connection_type (str): Connection type of device.\n        device_type (str): Type of device.\n        type (str): Type of device.\n        uuid (str): UUID of device, not always present.\n        config_module (str): Configuration module of device.\n        mac_id (str): MAC ID of device.\n        current_firm_version (str): Current firmware version of device.\n        device_region (str): Region of device. (US, EU, etc.)\n        sub_device_no (int): Sub-device number of device.\n        product_type (str): Product type of device.\n    \"\"\"\n\n    __slots__ = (\n        'cook_temps',\n        'fryer_status',\n        'last_update',\n        'ready_start',\n        'refresh_interval',\n    )\n\n    def __init__(\n        self,\n        details: ResponseDeviceDetailsModel,\n        manager: VeSync,\n        feature_map: AirFryerMap,\n    ) -&gt; None:\n        \"\"\"Init the VeSync Air Fryer 158 class.\"\"\"\n        super().__init__(details, manager, feature_map)\n        self.features: list[str] = feature_map.features\n        self.state: AirFryer158138State = AirFryer158138State(self, details, feature_map)\n        self.last_update: int = int(time.time())\n        self.refresh_interval = 0\n        self.ready_start = False\n        self.cook_temps: dict[str, list[int]] | None = None\n        if self.config_module not in AIRFRYER_PID_MAP:\n            msg = (\n                'Report this error as an issue - '\n                f'{self.config_module} not found in PID map for {self}'\n            )\n            raise VeSyncError(msg)\n        self.pid = AIRFRYER_PID_MAP[self.config_module]\n        self.request_keys = [\n            'acceptLanguage',\n            'accountID',\n            'appVersion',\n            'cid',\n            'configModule',\n            'deviceRegion',\n            'phoneBrand',\n            'phoneOS',\n            'timeZone',\n            'token',\n            'traceId',\n            'userCountryCode',\n            'method',\n            'debugMode',\n            'uuid',\n            'pid',\n        ]\n\n    @deprecated('There is no on/off function for Air Fryers.')\n    async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n        \"\"\"Turn on or off the air fryer.\"\"\"\n        return toggle if toggle is not None else not self.is_on\n\n    def _build_request(\n        self,\n        json_cmd: dict | None = None,\n        method: str | None = None,\n    ) -&gt; dict:\n        \"\"\"Return body of api calls.\"\"\"\n        req_dict = Helpers.get_class_attributes(DefaultValues, self.request_keys)\n        req_dict.update(Helpers.get_class_attributes(self.manager, self.request_keys))\n        req_dict.update(Helpers.get_class_attributes(self, self.request_keys))\n        req_dict['method'] = method or 'bypass'\n        req_dict['jsonCmd'] = json_cmd or {}\n        return req_dict\n\n    def _build_status_body(self, cmd_dict: dict) -&gt; dict:\n        \"\"\"Return body of api calls.\"\"\"\n        body = self._build_request()\n        body.update(\n            {\n                'uuid': self.uuid,\n                'configModule': self.config_module,\n                'jsonCmd': cmd_dict,\n                'pid': self.pid,\n                'accountID': self.manager.account_id,\n            }\n        )\n        return body\n\n    @property\n    def temp_unit(self) -&gt; str | None:\n        \"\"\"Return temp unit.\"\"\"\n        return self.state.temp_unit\n\n    async def get_details(self) -&gt; None:\n        \"\"\"Get Air Fryer Status and Details.\"\"\"\n        cmd = {'getStatus': 'status'}\n        req_body = self._build_request(json_cmd=cmd)\n        url = '/cloud/v1/deviceManaged/bypass'\n        r_dict, _ = await self.manager.async_call_api(url, 'post', json_object=req_body)\n        resp = Helpers.process_dev_response(logger, 'get_details', self, r_dict)\n        if resp is None:\n            self.state.device_status = DeviceStatus.OFF\n            self.state.connection_status = ConnectionStatus.OFFLINE\n            return\n\n        return_status = resp.get('result', {}).get('returnStatus')\n        if return_status is None:\n            LibraryLogger.log_device_api_response_error(\n                logger,\n                self.device_name,\n                self.device_type,\n                'get_details',\n                msg='Return status not found in response',\n            )\n            return\n        self.state.status_response(return_status)\n\n    async def check_status(self) -&gt; None:\n        \"\"\"Update status if REFRESH_INTERVAL has passed.\"\"\"\n        seconds_elapsed = int(time.time()) - self.last_update\n        logger.debug('Seconds elapsed between updates: %s', seconds_elapsed)\n        refresh = False\n        if self.refresh_interval is None:\n            refresh = bool(seconds_elapsed &gt; REFRESH_INTERVAL)\n        elif self.refresh_interval == 0:\n            refresh = True\n        elif self.refresh_interval &gt; 0:\n            refresh = bool(seconds_elapsed &gt; self.refresh_interval)\n        if refresh is True:\n            logger.debug('Updating status, %s seconds elapsed', seconds_elapsed)\n            await self.update()\n\n    async def end(self) -&gt; bool:\n        \"\"\"End the cooking process.\"\"\"\n        await self.check_status()\n        if self.state.preheat is False and self.state.cook_status in [\n            'cookStop',\n            'cooking',\n        ]:\n            cmd = {'cookMode': {'cookStatus': 'end'}}\n        elif self.state.preheat is True and self.state.cook_status in [\n            'preheatStop',\n            'heating',\n        ]:\n            cmd = {'preheat': {'cookStatus': 'end'}}\n        else:\n            logger.debug(\n                'Cannot end %s as it is not cooking or preheating', self.device_name\n            )\n            return False\n\n        status_api = await self._status_api(cmd)\n        if status_api is False:\n            return False\n        self.state.set_standby()\n        return True\n\n    async def pause(self) -&gt; bool:\n        \"\"\"Pause the cooking process.\"\"\"\n        await self.check_status()\n        if self.state.cook_status not in ['cooking', 'heating']:\n            logger.debug(\n                'Cannot pause %s as it is not cooking or preheating', self.device_name\n            )\n            return False\n        if self.state.preheat is True:\n            cmd = {'preheat': {'preheatStatus': 'stop'}}\n        else:\n            cmd = {'cookMode': {'cookStatus': 'stop'}}\n        status_api = await self._status_api(cmd)\n        if status_api is True:\n            if self.state.preheat is True:\n                self.state.cook_status = 'preheatStop'\n            else:\n                self.state.cook_status = 'cookStop'\n            return True\n        return False\n\n    def _validate_temp(self, set_temp: int) -&gt; bool:\n        \"\"\"Temperature validation.\"\"\"\n        if self.state.temp_unit == 'fahrenheit' and (\n            set_temp &lt; self.state.min_temp_f or set_temp &gt; self.state.max_temp_f\n        ):\n            logger.debug('Invalid temperature %s for %s', set_temp, self.device_name)\n            return False\n        if self.state.temp_unit == 'celsius' and (\n            set_temp &lt; self.state.min_temp_c or set_temp &gt; self.state.max_temp_c\n        ):\n            logger.debug('Invalid temperature %s for %s', set_temp, self.device_name)\n            return False\n        return True\n\n    async def cook(self, set_temp: int, set_time: int) -&gt; bool:\n        \"\"\"Set cook time and temperature in Minutes.\"\"\"\n        await self.check_status()\n        if self._validate_temp(set_temp) is False:\n            return False\n        return await self._set_cook(set_temp, set_time)\n\n    async def resume(self) -&gt; bool:\n        \"\"\"Resume paused preheat or cook.\"\"\"\n        await self.check_status()\n        if self.state.cook_status not in ['preheatStop', 'cookStop']:\n            logger.debug('Cannot resume %s as it is not paused', self.device_name)\n            return False\n        if self.state.preheat is True:\n            cmd = {'preheat': {'preheatStatus': 'heating'}}\n        else:\n            cmd = {'cookMode': {'cookStatus': 'cooking'}}\n        status_api = await self._status_api(cmd)\n        if status_api is True:\n            if self.state.preheat is True:\n                self.state.cook_status = 'heating'\n            else:\n                self.state.cook_status = 'cooking'\n            return True\n        return False\n\n    async def set_preheat(self, target_temp: int, cook_time: int) -&gt; bool:\n        \"\"\"Set preheat mode with cooking time.\"\"\"\n        await self.check_status()\n        if self.state.cook_status not in ['standby', 'cookEnd', 'preheatEnd']:\n            logger.debug(\n                'Cannot set preheat for %s as it is not in standby', self.device_name\n            )\n            return False\n        if self._validate_temp(target_temp) is False:\n            return False\n        cmd = self._cmd_api_dict\n        cmd['preheatSetTime'] = 5\n        cmd['preheatStatus'] = 'heating'\n        cmd['targetTemp'] = target_temp\n        cmd['cookSetTime'] = cook_time\n        json_cmd = {'preheat': cmd}\n        return await self._status_api(json_cmd)\n\n    async def cook_from_preheat(self) -&gt; bool:\n        \"\"\"Start Cook when preheat has ended.\"\"\"\n        await self.check_status()\n        if self.state.preheat is False or self.state.cook_status != 'preheatEnd':\n            logger.debug('Cannot start cook from preheat for %s', self.device_name)\n            return False\n        return await self._set_cook(status='cooking')\n\n    async def update(self) -&gt; None:\n        \"\"\"Update the device details.\"\"\"\n        await self.get_details()\n\n    @property\n    def _cmd_api_base(self) -&gt; dict:\n        \"\"\"Return Base api dictionary for setting status.\"\"\"\n        return {\n            'mode': COOK_MODE,\n            'accountId': self.manager.account_id,\n        }\n\n    @property\n    def _cmd_api_dict(self) -&gt; dict:\n        \"\"\"Return API dictionary for setting status.\"\"\"\n        cmd = self._cmd_api_base\n        cmd.update(\n            {\n                'appointmentTs': 0,\n                'recipeId': RECIPE_ID,\n                'readyStart': self.ready_start,\n                'recipeType': RECIPE_TYPE,\n                'customRecipe': CUSTOM_RECIPE,\n            }\n        )\n        return cmd\n\n    async def _set_cook(\n        self,\n        set_temp: int | None = None,\n        set_time: int | None = None,\n        status: str = 'cooking',\n    ) -&gt; bool:\n        if set_temp is not None and set_time is not None:\n            set_cmd = self._cmd_api_dict\n\n            set_cmd['cookSetTime'] = set_time\n            set_cmd['cookSetTemp'] = set_temp\n        else:\n            set_cmd = self._cmd_api_base\n        set_cmd['cookStatus'] = status\n        cmd = {'cookMode': set_cmd}\n        return await self._status_api(cmd)\n\n    async def _status_api(self, json_cmd: dict) -&gt; bool:\n        \"\"\"Set API status with jsonCmd.\"\"\"\n        body = self._build_status_body(json_cmd)\n        url = '/cloud/v1/deviceManaged/bypass'\n        r_dict, _ = await self.manager.async_call_api(url, 'post', json_object=body)\n        resp = Helpers.process_dev_response(logger, 'set_status', self, r_dict)\n        if resp is None:\n            return False\n\n        self.last_update = int(time.time())\n        self.state.status_request(json_cmd)\n        await self.update()\n        return True\n</code></pre>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.VeSyncAirFryer158.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.VeSyncAirFryer158.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: AirFryer158138State = AirFryer158138State(\n    self, details, feature_map\n)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.VeSyncAirFryer158.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid = AIRFRYER_PID_MAP[config_module]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.VeSyncAirFryer158.temp_unit","title":"temp_unit  <code>property</code>  \u21b2","text":"<pre><code>temp_unit: str | None\n</code></pre> <p>Return temp unit.</p>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.VeSyncAirFryer158.toggle_switch","title":"toggle_switch  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> Deprecated <p>There is no on/off function for Air Fryers.</p> <p>Turn on or off the air fryer.</p> Source code in <code>src\\pyvesync\\devices\\vesynckitchen.py</code> <pre><code>@deprecated('There is no on/off function for Air Fryers.')\nasync def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Turn on or off the air fryer.\"\"\"\n    return toggle if toggle is not None else not self.is_on\n</code></pre>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.VeSyncAirFryer158.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> <p>Get Air Fryer Status and Details.</p> Source code in <code>src\\pyvesync\\devices\\vesynckitchen.py</code> <pre><code>async def get_details(self) -&gt; None:\n    \"\"\"Get Air Fryer Status and Details.\"\"\"\n    cmd = {'getStatus': 'status'}\n    req_body = self._build_request(json_cmd=cmd)\n    url = '/cloud/v1/deviceManaged/bypass'\n    r_dict, _ = await self.manager.async_call_api(url, 'post', json_object=req_body)\n    resp = Helpers.process_dev_response(logger, 'get_details', self, r_dict)\n    if resp is None:\n        self.state.device_status = DeviceStatus.OFF\n        self.state.connection_status = ConnectionStatus.OFFLINE\n        return\n\n    return_status = resp.get('result', {}).get('returnStatus')\n    if return_status is None:\n        LibraryLogger.log_device_api_response_error(\n            logger,\n            self.device_name,\n            self.device_type,\n            'get_details',\n            msg='Return status not found in response',\n        )\n        return\n    self.state.status_response(return_status)\n</code></pre>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.VeSyncAirFryer158.check_status","title":"check_status  <code>async</code>  \u21b2","text":"<pre><code>check_status() -&gt; None\n</code></pre> <p>Update status if REFRESH_INTERVAL has passed.</p> Source code in <code>src\\pyvesync\\devices\\vesynckitchen.py</code> <pre><code>async def check_status(self) -&gt; None:\n    \"\"\"Update status if REFRESH_INTERVAL has passed.\"\"\"\n    seconds_elapsed = int(time.time()) - self.last_update\n    logger.debug('Seconds elapsed between updates: %s', seconds_elapsed)\n    refresh = False\n    if self.refresh_interval is None:\n        refresh = bool(seconds_elapsed &gt; REFRESH_INTERVAL)\n    elif self.refresh_interval == 0:\n        refresh = True\n    elif self.refresh_interval &gt; 0:\n        refresh = bool(seconds_elapsed &gt; self.refresh_interval)\n    if refresh is True:\n        logger.debug('Updating status, %s seconds elapsed', seconds_elapsed)\n        await self.update()\n</code></pre>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.VeSyncAirFryer158.end","title":"end  <code>async</code>  \u21b2","text":"<pre><code>end() -&gt; bool\n</code></pre> <p>End the cooking process.</p> Source code in <code>src\\pyvesync\\devices\\vesynckitchen.py</code> <pre><code>async def end(self) -&gt; bool:\n    \"\"\"End the cooking process.\"\"\"\n    await self.check_status()\n    if self.state.preheat is False and self.state.cook_status in [\n        'cookStop',\n        'cooking',\n    ]:\n        cmd = {'cookMode': {'cookStatus': 'end'}}\n    elif self.state.preheat is True and self.state.cook_status in [\n        'preheatStop',\n        'heating',\n    ]:\n        cmd = {'preheat': {'cookStatus': 'end'}}\n    else:\n        logger.debug(\n            'Cannot end %s as it is not cooking or preheating', self.device_name\n        )\n        return False\n\n    status_api = await self._status_api(cmd)\n    if status_api is False:\n        return False\n    self.state.set_standby()\n    return True\n</code></pre>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.VeSyncAirFryer158.pause","title":"pause  <code>async</code>  \u21b2","text":"<pre><code>pause() -&gt; bool\n</code></pre> <p>Pause the cooking process.</p> Source code in <code>src\\pyvesync\\devices\\vesynckitchen.py</code> <pre><code>async def pause(self) -&gt; bool:\n    \"\"\"Pause the cooking process.\"\"\"\n    await self.check_status()\n    if self.state.cook_status not in ['cooking', 'heating']:\n        logger.debug(\n            'Cannot pause %s as it is not cooking or preheating', self.device_name\n        )\n        return False\n    if self.state.preheat is True:\n        cmd = {'preheat': {'preheatStatus': 'stop'}}\n    else:\n        cmd = {'cookMode': {'cookStatus': 'stop'}}\n    status_api = await self._status_api(cmd)\n    if status_api is True:\n        if self.state.preheat is True:\n            self.state.cook_status = 'preheatStop'\n        else:\n            self.state.cook_status = 'cookStop'\n        return True\n    return False\n</code></pre>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.VeSyncAirFryer158.cook","title":"cook  <code>async</code>  \u21b2","text":"<pre><code>cook(set_temp: int, set_time: int) -&gt; bool\n</code></pre> <p>Set cook time and temperature in Minutes.</p> Source code in <code>src\\pyvesync\\devices\\vesynckitchen.py</code> <pre><code>async def cook(self, set_temp: int, set_time: int) -&gt; bool:\n    \"\"\"Set cook time and temperature in Minutes.\"\"\"\n    await self.check_status()\n    if self._validate_temp(set_temp) is False:\n        return False\n    return await self._set_cook(set_temp, set_time)\n</code></pre>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.VeSyncAirFryer158.resume","title":"resume  <code>async</code>  \u21b2","text":"<pre><code>resume() -&gt; bool\n</code></pre> <p>Resume paused preheat or cook.</p> Source code in <code>src\\pyvesync\\devices\\vesynckitchen.py</code> <pre><code>async def resume(self) -&gt; bool:\n    \"\"\"Resume paused preheat or cook.\"\"\"\n    await self.check_status()\n    if self.state.cook_status not in ['preheatStop', 'cookStop']:\n        logger.debug('Cannot resume %s as it is not paused', self.device_name)\n        return False\n    if self.state.preheat is True:\n        cmd = {'preheat': {'preheatStatus': 'heating'}}\n    else:\n        cmd = {'cookMode': {'cookStatus': 'cooking'}}\n    status_api = await self._status_api(cmd)\n    if status_api is True:\n        if self.state.preheat is True:\n            self.state.cook_status = 'heating'\n        else:\n            self.state.cook_status = 'cooking'\n        return True\n    return False\n</code></pre>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.VeSyncAirFryer158.set_preheat","title":"set_preheat  <code>async</code>  \u21b2","text":"<pre><code>set_preheat(target_temp: int, cook_time: int) -&gt; bool\n</code></pre> <p>Set preheat mode with cooking time.</p> Source code in <code>src\\pyvesync\\devices\\vesynckitchen.py</code> <pre><code>async def set_preheat(self, target_temp: int, cook_time: int) -&gt; bool:\n    \"\"\"Set preheat mode with cooking time.\"\"\"\n    await self.check_status()\n    if self.state.cook_status not in ['standby', 'cookEnd', 'preheatEnd']:\n        logger.debug(\n            'Cannot set preheat for %s as it is not in standby', self.device_name\n        )\n        return False\n    if self._validate_temp(target_temp) is False:\n        return False\n    cmd = self._cmd_api_dict\n    cmd['preheatSetTime'] = 5\n    cmd['preheatStatus'] = 'heating'\n    cmd['targetTemp'] = target_temp\n    cmd['cookSetTime'] = cook_time\n    json_cmd = {'preheat': cmd}\n    return await self._status_api(json_cmd)\n</code></pre>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.VeSyncAirFryer158.cook_from_preheat","title":"cook_from_preheat  <code>async</code>  \u21b2","text":"<pre><code>cook_from_preheat() -&gt; bool\n</code></pre> <p>Start Cook when preheat has ended.</p> Source code in <code>src\\pyvesync\\devices\\vesynckitchen.py</code> <pre><code>async def cook_from_preheat(self) -&gt; bool:\n    \"\"\"Start Cook when preheat has ended.\"\"\"\n    await self.check_status()\n    if self.state.preheat is False or self.state.cook_status != 'preheatEnd':\n        logger.debug('Cannot start cook from preheat for %s', self.device_name)\n        return False\n    return await self._set_cook(status='cooking')\n</code></pre>"},{"location":"devices/kitchen/#pyvesync.devices.vesynckitchen.VeSyncAirFryer158.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> <p>Update the device details.</p> Source code in <code>src\\pyvesync\\devices\\vesynckitchen.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update the device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/kitchen/#pyvesync.base_devices.fryer_base.FryerState","title":"pyvesync.base_devices.fryer_base.FryerState \u21b2","text":"<p>               Bases: <code>DeviceState</code></p> <p>State class for Air Fryer devices.</p> <p>Note: This class is a placeholder for future functionality and does not currently implement any specific features or attributes.</p> Source code in <code>src\\pyvesync\\base_devices\\fryer_base.py</code> <pre><code>class FryerState(DeviceState):\n    \"\"\"State class for Air Fryer devices.\n\n    Note: This class is a placeholder for future functionality and does not currently\n    implement any specific features or attributes.\n    \"\"\"\n\n    __slots__ = ()\n\n    def __init__(\n        self,\n        device: VeSyncFryer,\n        details: ResponseDeviceDetailsModel,\n        feature_map: AirFryerMap,\n    ) -&gt; None:\n        \"\"\"Initialize FryerState.\n\n        Args:\n            device (VeSyncFryer): The device object.\n            details (ResponseDeviceDetailsModel): The device details.\n            feature_map (AirFryerMap): The feature map for the device.\n\n        \"\"\"\n        super().__init__(device, details, feature_map)\n        self.device: VeSyncFryer = device\n        self.features: list[str] = feature_map.features\n</code></pre>"},{"location":"devices/kitchen/#pyvesync.base_devices.fryer_base.FryerState.device","title":"device  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device: VeSyncFryer = device\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/kitchen/#pyvesync.base_devices.fryer_base.FryerState.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/kitchen/#pyvesync.base_devices.fryer_base.VeSyncFryer","title":"pyvesync.base_devices.fryer_base.VeSyncFryer \u21b2","text":"<p>               Bases: <code>VeSyncBaseDevice</code></p> <p>Base class for VeSync Air Fryer devices.</p> Source code in <code>src\\pyvesync\\base_devices\\fryer_base.py</code> <pre><code>class VeSyncFryer(VeSyncBaseDevice):\n    \"\"\"Base class for VeSync Air Fryer devices.\"\"\"\n\n    __slots__ = ()\n\n    def __init__(\n        self,\n        details: ResponseDeviceDetailsModel,\n        manager: VeSync,\n        feature_map: AirFryerMap,\n    ) -&gt; None:\n        \"\"\"Initialize VeSyncFryer.\n\n        Args:\n            details (ResponseDeviceDetailsModel): The device details.\n            manager (VeSync): The VeSync manager.\n            feature_map (AirFryerMap): The feature map for the device.\n\n        Note:\n            This is a bare class as there is only one supported air fryer model.\n        \"\"\"\n        super().__init__(details, manager, feature_map)\n</code></pre>"},{"location":"devices/outlets/","title":"VeSync Outlets\u21b2","text":""},{"location":"devices/outlets/#overview","title":"Overview\u21b2","text":"<ul> <li>Outlet State Object</li> <li>Etekcity 7A Outlet</li> <li>Etekcity 10A European Outlet</li> <li>Etekcity 15A Outlet</li> <li>Etekcity 15A Outdoor Dual Outlet</li> <li>Etekcity 10A USA Outlet</li> <li>VeSync BSODG Smart Outlet</li> <li>VeSyncOutlet Base Class</li> </ul>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState","title":"pyvesync.base_devices.outlet_base.OutletState \u21b2","text":"<p>               Bases: <code>DeviceState</code></p> <p>Base state class for Outlets.</p> <p>This class holds all of the state information for the outlet devices. The state instance is stored in the <code>state</code> attribute of the outlet device. This is only for holding state information and does not contain any methods for controlling the device or retrieving information from the API.</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>VeSyncOutlet</code> <p>The device object.</p> required <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The device details.</p> required <code>feature_map</code> <code>OutletMap</code> <p>The feature map for the device.</p> required <p>Attributes:</p> Name Type Description <code>active_time</code> <code>int</code> <p>Active time of device, defaults to None.</p> <code>connection_status</code> <code>str</code> <p>Connection status of device.</p> <code>device</code> <code>VeSyncOutlet</code> <p>Device object.</p> <code>device_status</code> <code>str</code> <p>Device status.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <code>last_update_ts</code> <code>int</code> <p>Last update timestamp of device, defaults to None.</p> <code>energy</code> <code>float</code> <p>Energy usage in kWh.</p> <code>monthly_history</code> <code>ResponseEnergyResult</code> <p>Monthly energy history.</p> <code>nightlight_automode</code> <code>str</code> <p>Nightlight automode status.</p> <code>nightlight_brightness</code> <code>int</code> <p>Nightlight brightness level.</p> <code>nightlight_status</code> <code>str</code> <p>Nightlight status.</p> <code>power</code> <code>float</code> <p>Power usage in Watts.</p> <code>voltage</code> <code>float</code> <p>Voltage in Volts.</p> <code>weekly_history</code> <code>ResponseEnergyResult</code> <p>Weekly energy history.</p> <code>yearly_history</code> <code>ResponseEnergyResult</code> <p>Yearly energy history.</p> <p>Methods:</p> Name Description <code>update_ts</code> <p>Update last update timestamp.</p> <code>to_dict</code> <p>Dump state to JSON.</p> <code>to_json</code> <p>Dump state to JSON string.</p> <code>to_jsonb</code> <p>Dump state to JSON bytes.</p> <code>as_tuple</code> <p>Convert state to tuple of (name, value) tuples.</p> Note <p>Not all attributes are available on all devices. Some attributes may be None or not supported depending on the device type and features. The attributes are set based on the device features and the API response.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>class OutletState(DeviceState):\n    \"\"\"Base state class for Outlets.\n\n    This class holds all of the state information for the outlet devices. The state\n    instance is stored in the `state` attribute of the outlet device. This is only\n    for holding state information and does not contain any methods for controlling\n    the device or retrieving information from the API.\n\n    Args:\n        device (VeSyncOutlet): The device object.\n        details (ResponseDeviceDetailsModel): The device details.\n        feature_map (OutletMap): The feature map for the device.\n\n    Attributes:\n        active_time (int): Active time of device, defaults to None.\n        connection_status (str): Connection status of device.\n        device (VeSyncOutlet): Device object.\n        device_status (str): Device status.\n        features (dict): Features of device.\n        last_update_ts (int): Last update timestamp of device, defaults to None.\n        energy (float): Energy usage in kWh.\n        monthly_history (ResponseEnergyResult): Monthly energy history.\n        nightlight_automode (str): Nightlight automode status.\n        nightlight_brightness (int): Nightlight brightness level.\n        nightlight_status (str): Nightlight status.\n        power (float): Power usage in Watts.\n        voltage (float): Voltage in Volts.\n        weekly_history (ResponseEnergyResult): Weekly energy history.\n        yearly_history (ResponseEnergyResult): Yearly energy history.\n\n    Methods:\n        update_ts: Update last update timestamp.\n        to_dict: Dump state to JSON.\n        to_json: Dump state to JSON string.\n        to_jsonb: Dump state to JSON bytes.\n        as_tuple: Convert state to tuple of (name, value) tuples.\n\n    Note:\n        Not all attributes are available on all devices. Some attributes may be None or\n        not supported depending on the device type and features. The attributes are set\n        based on the device features and the API response.\n    \"\"\"\n\n    __slots__ = (\n        'energy',\n        'monthly_history',\n        'nightlight_automode',\n        'nightlight_brightness',\n        'nightlight_status',\n        'power',\n        'voltage',\n        'weekly_history',\n        'yearly_history',\n    )\n\n    def __init__(\n        self,\n        device: VeSyncOutlet,\n        details: ResponseDeviceDetailsModel,\n        feature_map: OutletMap,\n    ) -&gt; None:\n        \"\"\"Initialize VeSync Switch State.\"\"\"\n        super().__init__(device, details, feature_map)\n        self._exclude_serialization = [\n            'weakly_history',\n            'monthly_history',\n            'yearly_history',\n        ]\n        self.device: VeSyncOutlet = device\n        self.features: list[str] = feature_map.features\n        self.active_time: int | None = 0\n        self.power: float | None = None\n        self.energy: float | None = None\n        self.voltage: float | None = None\n        self.nightlight_status: str | None = None\n        self.nightlight_brightness: int | None = None\n        self.nightlight_automode: str | None = None\n        self.weekly_history: ResponseEnergyResult | None = None\n        self.monthly_history: ResponseEnergyResult | None = None\n        self.yearly_history: ResponseEnergyResult | None = None\n\n    def annual_history_to_json(self) -&gt; None | str:\n        \"\"\"Dump annual history.\"\"\"\n        if not self.device.supports_energy:\n            logger.info('Device does not support energy monitoring.')\n            return None\n        if self.yearly_history is None:\n            logger.info('No yearly history available, run device.get_yearly_history().')\n            return None\n        return self.yearly_history.to_json()\n\n    def monthly_history_to_json(self) -&gt; None | str:\n        \"\"\"Dump monthly history.\"\"\"\n        if not self.device.supports_energy:\n            logger.info('Device does not support energy monitoring.')\n            return None\n        if self.monthly_history is None:\n            logger.info('No monthly history available, run device.get_monthly_history().')\n            return None\n        return self.monthly_history.to_json()\n\n    def weekly_history_to_json(self) -&gt; None | str:\n        \"\"\"Dump weekly history.\"\"\"\n        if not self.device.supports_energy:\n            logger.info('Device does not support energy monitoring.')\n            return None\n        if self.weekly_history is None:\n            logger.info('No weekly history available, run device.get_weekly_history().')\n            return None\n        return self.weekly_history.to_json()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.active_time","title":"active_time  <code>instance-attribute</code>  \u21b2","text":"<pre><code>active_time: int | None = 0\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.connection_status","title":"connection_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_status: str = connectionStatus or UNKNOWN\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.device","title":"device  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device: VeSyncOutlet = device\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.device_status","title":"device_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_status: str = deviceStatus or UNKNOWN\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.energy","title":"energy  <code>instance-attribute</code>  \u21b2","text":"<pre><code>energy: float | None = None\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.last_update_ts","title":"last_update_ts  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_update_ts: int | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.monthly_history","title":"monthly_history  <code>instance-attribute</code>  \u21b2","text":"<pre><code>monthly_history: ResponseEnergyResult | None = None\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.nightlight_automode","title":"nightlight_automode  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_automode: str | None = None\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.nightlight_brightness","title":"nightlight_brightness  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_brightness: int | None = None\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.nightlight_status","title":"nightlight_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_status: str | None = None\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.power","title":"power  <code>instance-attribute</code>  \u21b2","text":"<pre><code>power: float | None = None\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.timer","title":"timer  <code>instance-attribute</code>  \u21b2","text":"<pre><code>timer: Timer | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.voltage","title":"voltage  <code>instance-attribute</code>  \u21b2","text":"<pre><code>voltage: float | None = None\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.weekly_history","title":"weekly_history  <code>instance-attribute</code>  \u21b2","text":"<pre><code>weekly_history: ResponseEnergyResult | None = None\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.yearly_history","title":"yearly_history  <code>instance-attribute</code>  \u21b2","text":"<pre><code>yearly_history: ResponseEnergyResult | None = None\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState-functions","title":"Functions\u21b2","text":""},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.annual_history_to_json","title":"annual_history_to_json \u21b2","text":"<pre><code>annual_history_to_json() -&gt; None | str\n</code></pre> <p>Dump annual history.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>def annual_history_to_json(self) -&gt; None | str:\n    \"\"\"Dump annual history.\"\"\"\n    if not self.device.supports_energy:\n        logger.info('Device does not support energy monitoring.')\n        return None\n    if self.yearly_history is None:\n        logger.info('No yearly history available, run device.get_yearly_history().')\n        return None\n    return self.yearly_history.to_json()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.as_tuple","title":"as_tuple \u21b2","text":"<pre><code>as_tuple() -&gt; tuple[tuple[str, Any], ...]\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to tuple of (name, value) tuples.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def as_tuple(self) -&gt; tuple[tuple[str, Any], ...]:\n    \"\"\"Convert state to tuple of (name, value) tuples.\"\"\"\n    return tuple((k, v) for k, v in self._serialize().items())\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.display","title":"display \u21b2","text":"<pre><code>display() -&gt; None\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Print formatted state to stdout.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self) -&gt; None:\n    \"\"\"Print formatted state to stdout.\"\"\"\n    for name, val in self._serialize().items():\n        print(f'{name:.&lt;30} {val}')  # noqa: T201\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.monthly_history_to_json","title":"monthly_history_to_json \u21b2","text":"<pre><code>monthly_history_to_json() -&gt; None | str\n</code></pre> <p>Dump monthly history.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>def monthly_history_to_json(self) -&gt; None | str:\n    \"\"\"Dump monthly history.\"\"\"\n    if not self.device.supports_energy:\n        logger.info('Device does not support energy monitoring.')\n        return None\n    if self.monthly_history is None:\n        logger.info('No monthly history available, run device.get_monthly_history().')\n        return None\n    return self.monthly_history.to_json()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to dictionary.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Convert state to dictionary.\"\"\"\n    return self._serialize()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(indent: bool = False) -&gt; str\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Dump state to JSON string.</p> <p>Parameters:</p> Name Type Description Default <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device state.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, indent: bool = False) -&gt; str:\n    \"\"\"Dump state to JSON string.\n\n    Args:\n        indent (bool): If True, indent JSON output, defaults to False.\n\n    Returns:\n        str: JSON formatted string of device state.\n    \"\"\"\n    return self.to_jsonb(indent=indent).decode()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(indent: bool = False) -&gt; bytes\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to JSON bytes.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, indent: bool = False) -&gt; bytes:\n    \"\"\"Convert state to JSON bytes.\"\"\"\n    if indent:\n        return orjson.dumps(\n            self._serialize(), option=orjson.OPT_NON_STR_KEYS | orjson.OPT_INDENT_2\n        )\n    return orjson.dumps(self._serialize(), option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.update_ts","title":"update_ts \u21b2","text":"<pre><code>update_ts() -&gt; None\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Update last update timestamp as UTC timestamp.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def update_ts(self) -&gt; None:\n    \"\"\"Update last update timestamp as UTC timestamp.\"\"\"\n    self.last_update_ts = int(dt.now(tz=UTC).timestamp())\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.OutletState.weekly_history_to_json","title":"weekly_history_to_json \u21b2","text":"<pre><code>weekly_history_to_json() -&gt; None | str\n</code></pre> <p>Dump weekly history.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>def weekly_history_to_json(self) -&gt; None | str:\n    \"\"\"Dump weekly history.\"\"\"\n    if not self.device.supports_energy:\n        logger.info('Device does not support energy monitoring.')\n        return None\n    if self.weekly_history is None:\n        logger.info('No weekly history available, run device.get_weekly_history().')\n        return None\n    return self.weekly_history.to_json()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A","title":"pyvesync.devices.vesyncoutlet.VeSyncOutlet7A \u21b2","text":"<p>               Bases: <code>VeSyncOutlet</code></p> <p>Etekcity 7A Round Outlet Class.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The device details.</p> required <code>manager</code> <code>VeSync</code> <p>The VeSync manager.</p> required <code>feature_map</code> <code>OutletMap</code> <p>The feature map for the device.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>OutletState</code> <p>The state of the outlet.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>device_status</code> <code>str</code> <p>Device status.</p> <code>connection_status</code> <code>str</code> <p>Connection status.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>class VeSyncOutlet7A(VeSyncOutlet):\n    \"\"\"Etekcity 7A Round Outlet Class.\n\n    Args:\n        details (ResponseDeviceDetailsModel): The device details.\n        manager (VeSync): The VeSync manager.\n        feature_map (OutletMap): The feature map for the device.\n\n    Attributes:\n        state (OutletState): The state of the outlet.\n        last_response (ResponseInfo): Last response from API call.\n        device_status (str): Device status.\n        connection_status (str): Connection status.\n        manager (VeSync): Manager object for API calls.\n        device_name (str): Name of device.\n        device_image (str): URL for device image.\n        cid (str): Device ID.\n        connection_type (str): Connection type of device.\n        device_type (str): Type of device.\n        type (str): Type of device.\n        uuid (str): UUID of device, not always present.\n        config_module (str): Configuration module of device.\n        mac_id (str): MAC ID of device.\n        current_firm_version (str): Current firmware version of device.\n        device_region (str): Region of device. (US, EU, etc.)\n        pid (str): Product ID of device, pulled by some devices on update.\n        sub_device_no (int): Sub-device number of device.\n        product_type (str): Product type of device.\n        features (dict): Features of device.\n    \"\"\"\n\n    __slots__ = ()\n\n    def __init__(\n        self, details: ResponseDeviceDetailsModel, manager: VeSync, feature_map: OutletMap\n    ) -&gt; None:\n        \"\"\"Initialize Etekcity 7A round outlet class.\"\"\"\n        super().__init__(details, manager, feature_map)\n\n    def _build_headers(self) -&gt; dict:\n        \"\"\"Build 7A Outlet Request Headers.\"\"\"\n        headers = RequestHeaders.copy()\n        headers.update(\n            {\n                'tz': self.manager.time_zone,\n                'tk': self.manager.token,\n                'accountid': self.manager.account_id,\n            }\n        )\n        return headers\n\n    async def get_details(self) -&gt; None:\n        r_dict, _ = await self.manager.async_call_api(\n            '/v1/device/' + self.cid + '/detail',\n            'get',\n            headers=self._build_headers(),\n        )\n\n        if not isinstance(r_dict, dict):\n            LibraryLogger.log_device_api_response_error(\n                logger,\n                self.device_name,\n                self.device_type,\n                'get_details',\n                'Response is not valid JSON',\n            )\n            return\n\n        if 'error' in r_dict:\n            _ = Helpers.process_dev_response(logger, 'get_details', self, r_dict)\n            return\n        self.state.update_ts()\n        resp_model = Response7AOutlet.from_dict(r_dict)\n        self.state.connection_status = ConnectionStatus.ONLINE\n        self.state.device_status = resp_model.deviceStatus\n        self.state.active_time = resp_model.activeTime\n        self.state.energy = resp_model.energy\n        self.state.power = self.parse_energy_detail(resp_model.power)\n        self.state.voltage = self.parse_energy_detail(resp_model.voltage)\n\n    @staticmethod\n    def parse_energy_detail(energy: str | float) -&gt; float:\n        \"\"\"Parse energy details to be compatible with new and old firmware.\"\"\"\n        try:\n            if isinstance(energy, str) and ':' in energy:\n                power = round(float(Helpers.calculate_hex(energy)), 2)\n            else:\n                power = float(energy)\n        except ValueError:\n            logger.debug('Error parsing power response - %s', energy)\n            power = 0\n        return power\n\n    async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n        if toggle is None:\n            toggle = self.state.device_status != DeviceStatus.ON\n        toggle_str = DeviceStatus.ON if toggle else DeviceStatus.OFF\n        r_dict, status_code = await self.manager.async_call_api(\n            f'/v1/wifi-switch-1.3/{self.cid}/status/{toggle_str}',\n            'put',\n            headers=Helpers.req_legacy_headers(self.manager),\n        )\n\n        if status_code != STATUS_OK:\n            LibraryLogger.log_device_api_response_error(\n                logger,\n                self.device_name,\n                self.device_type,\n                'toggle_switch',\n                'Response code is not 200',\n            )\n            return False\n\n        if isinstance(r_dict, dict) and 'error' in r_dict:\n            _ = Helpers.process_dev_response(logger, 'get_details', self, r_dict)\n            return False\n\n        self.state.update_ts()\n        self.state.device_status = toggle_str\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def get_timer(self) -&gt; None:\n        r_dict, status_code = await self.manager.async_call_api(\n            f'/v2/device/{self.cid}/timer',\n            'get',\n            headers=Helpers.req_legacy_headers(self.manager),\n        )\n        if not r_dict or status_code != STATUS_OK:\n            logger.debug('No timer set.')\n            self.state.timer = None\n            return\n        if isinstance(r_dict, list) and len(r_dict) &gt; 0:\n            timer_model = Helpers.model_maker(logger, Timer7AItem, 'get_timer', r_dict[0])\n            if timer_model is None:\n                self.state.timer = None\n                return\n            self.state.timer = Timer(\n                timer_duration=int(timer_model.counterTimer),\n                id=int(timer_model.timerID),\n                action=timer_model.action,\n            )\n            if timer_model.timerStatus == 'off':\n                self.state.timer.pause()\n            return\n        self.state.timer = None\n\n    async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n        if action is None:\n            action = (\n                DeviceStatus.ON\n                if self.state.device_status == DeviceStatus.OFF\n                else DeviceStatus.OFF\n            )\n        if not isinstance(action, str) or action not in [\n            DeviceStatus.ON,\n            DeviceStatus.OFF,\n        ]:\n            logger.error('Invalid action for timer - %s', action)\n            return False\n        update_dict = {\n            'action': action,\n            'counterTimer': duration,\n            'timerStatus': 'start',\n            'conflictAwayIds': [],\n            'conflictScheduleIds': [],\n            'conflictTimerIds': [],\n        }\n        r_dict, status_code = await self.manager.async_call_api(\n            f'/v2/device/{self.cid}/timer',\n            'post',\n            headers=Helpers.req_legacy_headers(self.manager),\n            json_object=update_dict,\n        )\n        if status_code != STATUS_OK or not isinstance(r_dict, dict):\n            logger.debug('Failed to set timer.')\n            return False\n\n        if 'error' in r_dict:\n            logger.debug('Error in response: %s', r_dict['error'])\n            return False\n\n        result_model = Helpers.model_maker(\n            logger, TimerModels.ResultV1SetTimer, 'set_timer', r_dict, self\n        )\n        if result_model is None:\n            logger.debug('Failed to set timer.')\n            return False\n        if result_model.timerID == '':\n            logger.debug('Unable to set timer.')\n            if result_model.conflictTimerIds:\n                logger.debug('Conflicting timer IDs - %s', result_model.conflictTimerIds)\n            return False\n        self.state.timer = Timer(duration, action, int(result_model.timerID))\n        return True\n\n    async def clear_timer(self) -&gt; bool:\n        if self.state.timer is None:\n            logger.debug('No timer set, nothing to clear, run get_timer().')\n            return False\n        _, status_code = await self.manager.async_call_api(\n            f'/v2/device/{self.cid}/timer/{self.state.timer.id}',\n            'delete',\n            headers=Helpers.req_legacy_headers(self.manager),\n        )\n        if status_code != STATUS_OK:\n            return False\n        self.state.timer = None\n        return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager = manager\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.nightlight_modes","title":"nightlight_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_modes = nightlight_modes\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: OutletState = OutletState(self, details, feature_map)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.supports_energy","title":"supports_energy  <code>property</code>  \u21b2","text":"<pre><code>supports_energy: bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Return True if device supports energy.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if device supports energy, False otherwise.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.supports_nightlight","title":"supports_nightlight  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight: bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Return True if device supports nightlight.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if device supports nightlight, False otherwise.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A-functions","title":"Functions\u21b2","text":""},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    if self.state.timer is None:\n        logger.debug('No timer set, nothing to clear, run get_timer().')\n        return False\n    _, status_code = await self.manager.async_call_api(\n        f'/v2/device/{self.cid}/timer/{self.state.timer.id}',\n        'delete',\n        headers=Helpers.req_legacy_headers(self.manager),\n    )\n    if status_code != STATUS_OK:\n        return False\n    self.state.timer = None\n    return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def get_details(self) -&gt; None:\n    r_dict, _ = await self.manager.async_call_api(\n        '/v1/device/' + self.cid + '/detail',\n        'get',\n        headers=self._build_headers(),\n    )\n\n    if not isinstance(r_dict, dict):\n        LibraryLogger.log_device_api_response_error(\n            logger,\n            self.device_name,\n            self.device_type,\n            'get_details',\n            'Response is not valid JSON',\n        )\n        return\n\n    if 'error' in r_dict:\n        _ = Helpers.process_dev_response(logger, 'get_details', self, r_dict)\n        return\n    self.state.update_ts()\n    resp_model = Response7AOutlet.from_dict(r_dict)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    self.state.device_status = resp_model.deviceStatus\n    self.state.active_time = resp_model.activeTime\n    self.state.energy = resp_model.energy\n    self.state.power = self.parse_energy_detail(resp_model.power)\n    self.state.voltage = self.parse_energy_detail(resp_model.voltage)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.get_monthly_energy","title":"get_monthly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_monthly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build Monthly Energy History Dictionary.</p> <p>The data is stored in the <code>device.state.monthly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_monthly_energy(self) -&gt; None:\n    \"\"\"Build Monthly Energy History Dictionary.\n\n    The data is stored in the `device.state.monthly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastMonthEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def get_timer(self) -&gt; None:\n    r_dict, status_code = await self.manager.async_call_api(\n        f'/v2/device/{self.cid}/timer',\n        'get',\n        headers=Helpers.req_legacy_headers(self.manager),\n    )\n    if not r_dict or status_code != STATUS_OK:\n        logger.debug('No timer set.')\n        self.state.timer = None\n        return\n    if isinstance(r_dict, list) and len(r_dict) &gt; 0:\n        timer_model = Helpers.model_maker(logger, Timer7AItem, 'get_timer', r_dict[0])\n        if timer_model is None:\n            self.state.timer = None\n            return\n        self.state.timer = Timer(\n            timer_duration=int(timer_model.counterTimer),\n            id=int(timer_model.timerID),\n            action=timer_model.action,\n        )\n        if timer_model.timerStatus == 'off':\n            self.state.timer.pause()\n        return\n    self.state.timer = None\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.get_weekly_energy","title":"get_weekly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_weekly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build weekly energy history dictionary.</p> <p>The data is stored in the <code>device.state.weekly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_weekly_energy(self) -&gt; None:\n    \"\"\"Build weekly energy history dictionary.\n\n    The data is stored in the `device.state.weekly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastWeekEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.get_yearly_energy","title":"get_yearly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_yearly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build Yearly Energy Dictionary.</p> <p>The data is stored in the <code>device.state.yearly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_yearly_energy(self) -&gt; None:\n    \"\"\"Build Yearly Energy Dictionary.\n\n    The data is stored in the `device.state.yearly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastYearEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.parse_energy_detail","title":"parse_energy_detail  <code>staticmethod</code>  \u21b2","text":"<pre><code>parse_energy_detail(energy: str | float) -&gt; float\n</code></pre> <p>Parse energy details to be compatible with new and old firmware.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>@staticmethod\ndef parse_energy_detail(energy: str | float) -&gt; float:\n    \"\"\"Parse energy details to be compatible with new and old firmware.\"\"\"\n    try:\n        if isinstance(energy, str) and ':' in energy:\n            power = round(float(Helpers.calculate_hex(energy)), 2)\n        else:\n            power = float(energy)\n    except ValueError:\n        logger.debug('Error parsing power response - %s', energy)\n        power = 0\n    return power\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.set_nightlight_auto","title":"set_nightlight_auto  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_auto() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Set nightlight to auto mode.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def set_nightlight_auto(self) -&gt; bool:\n    \"\"\"Set nightlight to auto mode.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.AUTO)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.set_nightlight_state","title":"set_nightlight_state  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_state(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Set nightlight mode.</p> <p>Available nightlight states are found in the <code>device.nightlight_modes</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Nightlight mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if nightlight mode set successfully, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def set_nightlight_state(self, mode: str) -&gt; bool:\n    \"\"\"Set nightlight mode.\n\n    Available nightlight states are found in the `device.nightlight_modes` attribute.\n\n    Args:\n        mode (str): Nightlight mode to set.\n\n    Returns:\n        bool: True if nightlight mode set successfully, False otherwise.\n    \"\"\"\n    del mode  # unused\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n    else:\n        logger.debug('Nightlight mode not configured for %s', self.device_name)\n    return False\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    if action is None:\n        action = (\n            DeviceStatus.ON\n            if self.state.device_status == DeviceStatus.OFF\n            else DeviceStatus.OFF\n        )\n    if not isinstance(action, str) or action not in [\n        DeviceStatus.ON,\n        DeviceStatus.OFF,\n    ]:\n        logger.error('Invalid action for timer - %s', action)\n        return False\n    update_dict = {\n        'action': action,\n        'counterTimer': duration,\n        'timerStatus': 'start',\n        'conflictAwayIds': [],\n        'conflictScheduleIds': [],\n        'conflictTimerIds': [],\n    }\n    r_dict, status_code = await self.manager.async_call_api(\n        f'/v2/device/{self.cid}/timer',\n        'post',\n        headers=Helpers.req_legacy_headers(self.manager),\n        json_object=update_dict,\n    )\n    if status_code != STATUS_OK or not isinstance(r_dict, dict):\n        logger.debug('Failed to set timer.')\n        return False\n\n    if 'error' in r_dict:\n        logger.debug('Error in response: %s', r_dict['error'])\n        return False\n\n    result_model = Helpers.model_maker(\n        logger, TimerModels.ResultV1SetTimer, 'set_timer', r_dict, self\n    )\n    if result_model is None:\n        logger.debug('Failed to set timer.')\n        return False\n    if result_model.timerID == '':\n        logger.debug('Unable to set timer.')\n        if result_model.conflictTimerIds:\n            logger.debug('Conflicting timer IDs - %s', result_model.conflictTimerIds)\n        return False\n    self.state.timer = Timer(duration, action, int(result_model.timerID))\n    return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.device_status != DeviceStatus.ON\n    toggle_str = DeviceStatus.ON if toggle else DeviceStatus.OFF\n    r_dict, status_code = await self.manager.async_call_api(\n        f'/v1/wifi-switch-1.3/{self.cid}/status/{toggle_str}',\n        'put',\n        headers=Helpers.req_legacy_headers(self.manager),\n    )\n\n    if status_code != STATUS_OK:\n        LibraryLogger.log_device_api_response_error(\n            logger,\n            self.device_name,\n            self.device_type,\n            'toggle_switch',\n            'Response code is not 200',\n        )\n        return False\n\n    if isinstance(r_dict, dict) and 'error' in r_dict:\n        _ = Helpers.process_dev_response(logger, 'get_details', self, r_dict)\n        return False\n\n    self.state.update_ts()\n    self.state.device_status = toggle_str\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.turn_off_nightlight","title":"turn_off_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_off_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Turn off nightlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def turn_off_nightlight(self) -&gt; bool:\n    \"\"\"Turn off nightlight if supported.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.OFF)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.turn_on_nightlight","title":"turn_on_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_on_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Turn on nightlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def turn_on_nightlight(self) -&gt; bool:\n    \"\"\"Turn on nightlight if supported.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.ON)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet7A.update_energy","title":"update_energy  <code>async</code>  \u21b2","text":"<pre><code>update_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build weekly, monthly and yearly dictionaries.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def update_energy(self) -&gt; None:\n    \"\"\"Build weekly, monthly and yearly dictionaries.\"\"\"\n    if self.supports_energy:\n        await self.get_weekly_energy()\n        await self.get_monthly_energy()\n        await self.get_yearly_energy()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A","title":"pyvesync.devices.vesyncoutlet.VeSyncOutlet10A \u21b2","text":"<p>               Bases: <code>VeSyncOutlet</code></p> <p>Etekcity 10A Round Outlets.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The device details.</p> required <code>manager</code> <code>VeSync</code> <p>The VeSync manager.</p> required <code>feature_map</code> <code>OutletMap</code> <p>The feature map for the device.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>OutletState</code> <p>The state of the outlet.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>device_status</code> <code>str</code> <p>Device status.</p> <code>connection_status</code> <code>str</code> <p>Connection status.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>class VeSyncOutlet10A(VeSyncOutlet):\n    \"\"\"Etekcity 10A Round Outlets.\n\n    Args:\n        details (ResponseDeviceDetailsModel): The device details.\n        manager (VeSync): The VeSync manager.\n        feature_map (OutletMap): The feature map for the device.\n\n    Attributes:\n        state (OutletState): The state of the outlet.\n        last_response (ResponseInfo): Last response from API call.\n        device_status (str): Device status.\n        connection_status (str): Connection status.\n        manager (VeSync): Manager object for API calls.\n        device_name (str): Name of device.\n        device_image (str): URL for device image.\n        cid (str): Device ID.\n        connection_type (str): Connection type of device.\n        device_type (str): Type of device.\n        type (str): Type of device.\n        uuid (str): UUID of device, not always present.\n        config_module (str): Configuration module of device.\n        mac_id (str): MAC ID of device.\n        current_firm_version (str): Current firmware version of device.\n        device_region (str): Region of device. (US, EU, etc.)\n        pid (str): Product ID of device, pulled by some devices on update.\n        sub_device_no (int): Sub-device number of device.\n        product_type (str): Product type of device.\n        features (dict): Features of device.\n    \"\"\"\n\n    __slots__ = ()\n\n    def __init__(\n        self, details: ResponseDeviceDetailsModel, manager: VeSync, feature_map: OutletMap\n    ) -&gt; None:\n        \"\"\"Initialize 10A outlet class.\"\"\"\n        super().__init__(details, manager, feature_map)\n        self.request_keys = [\n            'acceptLanguage',\n            'appVersion',\n            'accountId',\n            'mobileId',\n            'phoneBrand',\n            'phoneOS',\n            'timeZone',\n            'token',\n            'traceId',\n            'uuid',\n        ]\n\n    def _build_headers(self) -&gt; dict:\n        \"\"\"Build auth headers for 10A Outlet.\"\"\"\n        headers = RequestHeaders.copy()\n        headers.update(\n            {\n                'tz': self.manager.time_zone,\n                'tk': self.manager.token,\n                'accountid': self.manager.account_id,\n            }\n        )\n        return headers\n\n    def _build_detail_request(self, method: str) -&gt; dict:\n        \"\"\"Build 10A Outlet Request.\"\"\"\n        body = Helpers.get_class_attributes(DefaultValues, self.request_keys)\n        body.update(Helpers.get_class_attributes(self.manager, self.request_keys))\n        body.update(Helpers.get_class_attributes(self, self.request_keys))\n        body['method'] = method\n        return body\n\n    def _build_status_request(self, status: str) -&gt; dict:\n        \"\"\"Build 10A Outlet Request to set status.\"\"\"\n        status_keys = ['accountID', 'token', 'timeZone', 'uuid']\n        body = Helpers.get_class_attributes(self.manager, status_keys)\n        body.update(Helpers.get_class_attributes(self, status_keys))\n        body['status'] = status\n        return body\n\n    async def get_details(self) -&gt; None:\n        body = self._build_detail_request('devicedetail')\n\n        r_dict, _ = await self.manager.async_call_api(\n            '/10a/v1/device/devicedetail',\n            'post',\n            headers=Helpers.req_legacy_headers(self.manager),\n            json_object=body,\n        )\n        r = Helpers.process_dev_response(logger, 'get_details', self, r_dict)\n        if r is None:\n            return\n\n        resp_model = Response10ADetails.from_dict(r)\n\n        self.state.device_status = resp_model.deviceStatus or 'off'\n        self.state.connection_status = resp_model.connectionStatus or 'offline'\n        self.state.energy = resp_model.energy or 0\n        self.state.power = resp_model.power or 0\n        self.state.voltage = resp_model.voltage or 0\n\n    async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n        if toggle is None:\n            toggle = self.state.device_status != DeviceStatus.ON\n        toggle_str = DeviceStatus.ON if toggle else DeviceStatus.OFF\n        body = self._build_status_request(toggle_str)\n        headers = self._build_headers()\n\n        r_dict, _ = await self.manager.async_call_api(\n            '/10a/v1/device/devicestatus',\n            'put',\n            headers=headers,\n            json_object=body,\n        )\n        response = Helpers.process_dev_response(logger, 'toggle_switch', self, r_dict)\n        if response is None:\n            return False\n\n        self.state.device_status = toggle_str\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager = manager\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.nightlight_modes","title":"nightlight_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_modes = nightlight_modes\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.request_keys","title":"request_keys  <code>instance-attribute</code>  \u21b2","text":"<pre><code>request_keys = [\n    'acceptLanguage',\n    'appVersion',\n    'accountId',\n    'mobileId',\n    'phoneBrand',\n    'phoneOS',\n    'timeZone',\n    'token',\n    'traceId',\n    'uuid',\n]\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: OutletState = OutletState(self, details, feature_map)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.supports_energy","title":"supports_energy  <code>property</code>  \u21b2","text":"<pre><code>supports_energy: bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Return True if device supports energy.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if device supports energy, False otherwise.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.supports_nightlight","title":"supports_nightlight  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight: bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Return True if device supports nightlight.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if device supports nightlight, False otherwise.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A-functions","title":"Functions\u21b2","text":""},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    \"\"\"Clear timer for device from API.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    logger.debug('Not implemented - clear_timer')\n    return False\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def get_details(self) -&gt; None:\n    body = self._build_detail_request('devicedetail')\n\n    r_dict, _ = await self.manager.async_call_api(\n        '/10a/v1/device/devicedetail',\n        'post',\n        headers=Helpers.req_legacy_headers(self.manager),\n        json_object=body,\n    )\n    r = Helpers.process_dev_response(logger, 'get_details', self, r_dict)\n    if r is None:\n        return\n\n    resp_model = Response10ADetails.from_dict(r)\n\n    self.state.device_status = resp_model.deviceStatus or 'off'\n    self.state.connection_status = resp_model.connectionStatus or 'offline'\n    self.state.energy = resp_model.energy or 0\n    self.state.power = resp_model.power or 0\n    self.state.voltage = resp_model.voltage or 0\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.get_monthly_energy","title":"get_monthly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_monthly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build Monthly Energy History Dictionary.</p> <p>The data is stored in the <code>device.state.monthly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_monthly_energy(self) -&gt; None:\n    \"\"\"Build Monthly Energy History Dictionary.\n\n    The data is stored in the `device.state.monthly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastMonthEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    \"\"\"Get timer for device from API and set the `state.Timer` attribute.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Note:\n        This method may not be implemented for all devices. Please\n        open an issue if there is an error.\n    \"\"\"\n    logger.debug('Not implemented - get_timer')\n    return None\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.get_weekly_energy","title":"get_weekly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_weekly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build weekly energy history dictionary.</p> <p>The data is stored in the <code>device.state.weekly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_weekly_energy(self) -&gt; None:\n    \"\"\"Build weekly energy history dictionary.\n\n    The data is stored in the `device.state.weekly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastWeekEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.get_yearly_energy","title":"get_yearly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_yearly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build Yearly Energy Dictionary.</p> <p>The data is stored in the <code>device.state.yearly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_yearly_energy(self) -&gt; None:\n    \"\"\"Build Yearly Energy Dictionary.\n\n    The data is stored in the `device.state.yearly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastYearEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.set_nightlight_auto","title":"set_nightlight_auto  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_auto() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Set nightlight to auto mode.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def set_nightlight_auto(self) -&gt; bool:\n    \"\"\"Set nightlight to auto mode.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.AUTO)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.set_nightlight_state","title":"set_nightlight_state  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_state(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Set nightlight mode.</p> <p>Available nightlight states are found in the <code>device.nightlight_modes</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Nightlight mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if nightlight mode set successfully, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def set_nightlight_state(self, mode: str) -&gt; bool:\n    \"\"\"Set nightlight mode.\n\n    Available nightlight states are found in the `device.nightlight_modes` attribute.\n\n    Args:\n        mode (str): Nightlight mode to set.\n\n    Returns:\n        bool: True if nightlight mode set successfully, False otherwise.\n    \"\"\"\n    del mode  # unused\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n    else:\n        logger.debug('Nightlight mode not configured for %s', self.device_name)\n    return False\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    \"\"\"Set timer for device.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Args:\n        duration (int): Duration in seconds.\n        action (str | None): Action to take when timer expires.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del duration\n    del action\n    logger.debug('Not implemented - set_timer')\n    return False\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.device_status != DeviceStatus.ON\n    toggle_str = DeviceStatus.ON if toggle else DeviceStatus.OFF\n    body = self._build_status_request(toggle_str)\n    headers = self._build_headers()\n\n    r_dict, _ = await self.manager.async_call_api(\n        '/10a/v1/device/devicestatus',\n        'put',\n        headers=headers,\n        json_object=body,\n    )\n    response = Helpers.process_dev_response(logger, 'toggle_switch', self, r_dict)\n    if response is None:\n        return False\n\n    self.state.device_status = toggle_str\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.turn_off_nightlight","title":"turn_off_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_off_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Turn off nightlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def turn_off_nightlight(self) -&gt; bool:\n    \"\"\"Turn off nightlight if supported.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.OFF)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.turn_on_nightlight","title":"turn_on_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_on_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Turn on nightlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def turn_on_nightlight(self) -&gt; bool:\n    \"\"\"Turn on nightlight if supported.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.ON)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet10A.update_energy","title":"update_energy  <code>async</code>  \u21b2","text":"<pre><code>update_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build weekly, monthly and yearly dictionaries.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def update_energy(self) -&gt; None:\n    \"\"\"Build weekly, monthly and yearly dictionaries.\"\"\"\n    if self.supports_energy:\n        await self.get_weekly_energy()\n        await self.get_monthly_energy()\n        await self.get_yearly_energy()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A","title":"pyvesync.devices.vesyncoutlet.VeSyncOutlet15A \u21b2","text":"<p>               Bases: <code>BypassV1Mixin</code>, <code>VeSyncOutlet</code></p> <p>Class for Etekcity 15A Rectangular Outlets.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The device details.</p> required <code>manager</code> <code>VeSync</code> <p>The VeSync manager.</p> required <code>feature_map</code> <code>OutletMap</code> <p>The feature map for the device.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>OutletState</code> <p>The state of the outlet.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>device_status</code> <code>str</code> <p>Device status.</p> <code>connection_status</code> <code>str</code> <p>Connection status.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>class VeSyncOutlet15A(BypassV1Mixin, VeSyncOutlet):\n    \"\"\"Class for Etekcity 15A Rectangular Outlets.\n\n    Args:\n        details (ResponseDeviceDetailsModel): The device details.\n        manager (VeSync): The VeSync manager.\n        feature_map (OutletMap): The feature map for the device.\n\n    Attributes:\n        state (OutletState): The state of the outlet.\n        last_response (ResponseInfo): Last response from API call.\n        device_status (str): Device status.\n        connection_status (str): Connection status.\n        manager (VeSync): Manager object for API calls.\n        device_name (str): Name of device.\n        device_image (str): URL for device image.\n        cid (str): Device ID.\n        connection_type (str): Connection type of device.\n        device_type (str): Type of device.\n        type (str): Type of device.\n        uuid (str): UUID of device, not always present.\n        config_module (str): Configuration module of device.\n        mac_id (str): MAC ID of device.\n        current_firm_version (str): Current firmware version of device.\n        device_region (str): Region of device. (US, EU, etc.)\n        pid (str): Product ID of device, pulled by some devices on update.\n        sub_device_no (int): Sub-device number of device.\n        product_type (str): Product type of device.\n        features (dict): Features of device.\n    \"\"\"\n\n    __slots__ = ()\n\n    def __init__(\n        self, details: ResponseDeviceDetailsModel, manager: VeSync, feature_map: OutletMap\n    ) -&gt; None:\n        \"\"\"Initialize 15A rectangular outlets.\"\"\"\n        super().__init__(details, manager, feature_map)\n\n    async def get_details(self) -&gt; None:\n        r_dict = await self.call_bypassv1_api(\n            Request15ADetails, method='deviceDetail', endpoint='deviceDetail'\n        )\n\n        r = Helpers.process_dev_response(logger, 'get_details', self, r_dict)\n        if r is None:\n            return\n\n        resp_model = Response15ADetails.from_dict(r)\n        result = resp_model.result\n        self.state.device_status = result.deviceStatus\n        self.state.connection_status = result.connectionStatus\n        self.state.nightlight_status = result.nightLightStatus\n        self.state.nightlight_brightness = result.nightLightBrightness\n        self.state.nightlight_automode = result.nightLightAutoMode\n        self.state.active_time = result.activeTime\n        self.state.power = result.power or 0\n        self.state.voltage = result.voltage or 0\n        self.state.energy = result.energy or 0\n\n    async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n        if toggle is None:\n            toggle = self.state.device_status != DeviceStatus.ON\n        toggle_str = DeviceStatus.ON if toggle else DeviceStatus.OFF\n        r_dict = await self.call_bypassv1_api(\n            Request15AStatus,\n            update_dict={'status': toggle_str},\n            method='deviceStatus',\n            endpoint='deviceStatus',\n        )\n        response = Helpers.process_dev_response(logger, 'toggle_switch', self, r_dict)\n        if response is None:\n            return False\n\n        self.state.device_status = toggle_str\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def set_nightlight_state(self, mode: str) -&gt; bool:\n        \"\"\"Set nightlight state for 15A Outlets.\"\"\"\n        if mode.lower() not in self.nightlight_modes:\n            logger.error('Invalid nightlight mode - %s', mode)\n            return False\n        mode = mode.lower()\n        r_dict = await self.call_bypassv1_api(\n            Request15ANightlight,\n            update_dict={'mode': mode},\n            method='outletNightLightCtl',\n            endpoint='outletNightLightCtl',\n        )\n\n        response = Helpers.process_dev_response(\n            logger, 'set_nightlight_state', self, r_dict\n        )\n        if response is None:\n            return False\n\n        self.state.nightlight_status = mode\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def get_timer(self) -&gt; None:\n        method = 'getTimers'\n        endpoint = f'/timer/{method}'\n        r_dict = await self.call_bypassv1_api(\n            Request15ADetails, method=method, endpoint=endpoint\n        )\n        result_model = process_bypassv1_result(\n            self, logger, 'get_timer', r_dict, TimerModels.ResultV1GetTimer\n        )\n        if result_model is None:\n            return\n        timers = result_model.timers\n        if not isinstance(timers, list) or len(timers) == 0:\n            self.state.timer = None\n            return\n        timer = timers[0]\n        if not isinstance(timer, TimerModels.TimerItemV1):\n            logger.debug('Invalid timer model - %s', timer)\n            return\n        self.state.timer = Timer(\n            timer_duration=int(timer.counterTimer),\n            id=int(timer.timerID),\n            action=timer.action,\n        )\n\n    async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n        if action is None:\n            action = (\n                DeviceStatus.ON\n                if self.state.device_status == DeviceStatus.OFF\n                else DeviceStatus.OFF\n            )\n        if not isinstance(action, str) or action not in [\n            DeviceStatus.ON,\n            DeviceStatus.OFF,\n        ]:\n            logger.error('Invalid action for timer - %s', action)\n            return False\n        update_dict = {\n            'action': action,\n            'counterTime': str(duration),\n        }\n        r_dict = await self.call_bypassv1_api(\n            TimerModels.RequestV1SetTime,\n            update_dict=update_dict,\n            method='addTimer',\n            endpoint='timer/addTimer',\n        )\n        result_model = process_bypassv1_result(\n            self, logger, 'set_timer', r_dict, TimerModels.ResultV1SetTimer\n        )\n        if result_model is None:\n            return False\n        self.state.timer = Timer(duration, action, int(result_model.timerID))\n        return True\n\n    async def clear_timer(self) -&gt; bool:\n        if self.state.timer is None:\n            logger.debug('No timer set, nothing to clear, run get_timer().')\n            return False\n        if self.state.timer.time_remaining == 0:\n            logger.debug('Timer already ended.')\n            self.state.timer = None\n            return True\n        r_dict = await self.call_bypassv1_api(\n            TimerModels.RequestV1ClearTimer,\n            {'timerId': str(self.state.timer.id)},\n            method='deleteTimer',\n            endpoint='timer/deleteTimer',\n        )\n        r_dict = Helpers.process_dev_response(logger, 'clear_timer', self, r_dict)\n        if r_dict is None:\n            if (\n                self.last_response is not None\n                and self.last_response.name == 'TIMER_NOT_EXISTS'\n            ):\n                self.state.timer = None\n            return False\n        self.state.timer = None\n        return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.nightlight_modes","title":"nightlight_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_modes = nightlight_modes\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'uuid',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: OutletState = OutletState(self, details, feature_map)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.supports_energy","title":"supports_energy  <code>property</code>  \u21b2","text":"<pre><code>supports_energy: bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Return True if device supports energy.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if device supports energy, False otherwise.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.supports_nightlight","title":"supports_nightlight  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight: bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Return True if device supports nightlight.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if device supports nightlight, False otherwise.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A-functions","title":"Functions\u21b2","text":""},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.call_bypassv1_api","title":"call_bypassv1_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv1_api(\n    request_model: type[RequestBypassV1],\n    update_dict: dict | None = None,\n    method: str = 'bypass',\n    endpoint: str = 'bypass',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p> <p>Send ByPass V1 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V1 API. The endpoint can be overridden with the <code>endpoint</code> argument.</p> <p>Parameters:</p> Name Type Description Default <code>request_model</code> <code>type[RequestBypassV1]</code> <p>The request model to use.</p> required <code>update_dict</code> <code>dict</code> <p>Additional keys to add on.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypass'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the url path, defaults to <code>bypass</code>, e.g. <code>/cloud/v1/deviceManaged/bypass</code>.</p> <code>'bypass'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv1_api(\n    self,\n    request_model: type[RequestBypassV1],\n    update_dict: dict | None = None,\n    method: str = 'bypass',\n    endpoint: str = 'bypass',\n) -&gt; dict | None:\n    \"\"\"Send ByPass V1 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V1 API.\n    The endpoint can be overridden with the `endpoint` argument.\n\n    Args:\n        request_model (type[RequestBypassV1]): The request model to use.\n        update_dict (dict): Additional keys to add on.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the url path, defaults to\n            `bypass`, e.g. `/cloud/v1/deviceManaged/bypass`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(request_model, update_dict, method)\n    url_path = BYPASS_V1_PATH + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        url_path, 'post', request, Helpers.req_header_bypass()\n    )\n\n    return resp_dict\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    if self.state.timer is None:\n        logger.debug('No timer set, nothing to clear, run get_timer().')\n        return False\n    if self.state.timer.time_remaining == 0:\n        logger.debug('Timer already ended.')\n        self.state.timer = None\n        return True\n    r_dict = await self.call_bypassv1_api(\n        TimerModels.RequestV1ClearTimer,\n        {'timerId': str(self.state.timer.id)},\n        method='deleteTimer',\n        endpoint='timer/deleteTimer',\n    )\n    r_dict = Helpers.process_dev_response(logger, 'clear_timer', self, r_dict)\n    if r_dict is None:\n        if (\n            self.last_response is not None\n            and self.last_response.name == 'TIMER_NOT_EXISTS'\n        ):\n            self.state.timer = None\n        return False\n    self.state.timer = None\n    return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def get_details(self) -&gt; None:\n    r_dict = await self.call_bypassv1_api(\n        Request15ADetails, method='deviceDetail', endpoint='deviceDetail'\n    )\n\n    r = Helpers.process_dev_response(logger, 'get_details', self, r_dict)\n    if r is None:\n        return\n\n    resp_model = Response15ADetails.from_dict(r)\n    result = resp_model.result\n    self.state.device_status = result.deviceStatus\n    self.state.connection_status = result.connectionStatus\n    self.state.nightlight_status = result.nightLightStatus\n    self.state.nightlight_brightness = result.nightLightBrightness\n    self.state.nightlight_automode = result.nightLightAutoMode\n    self.state.active_time = result.activeTime\n    self.state.power = result.power or 0\n    self.state.voltage = result.voltage or 0\n    self.state.energy = result.energy or 0\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.get_monthly_energy","title":"get_monthly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_monthly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build Monthly Energy History Dictionary.</p> <p>The data is stored in the <code>device.state.monthly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_monthly_energy(self) -&gt; None:\n    \"\"\"Build Monthly Energy History Dictionary.\n\n    The data is stored in the `device.state.monthly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastMonthEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def get_timer(self) -&gt; None:\n    method = 'getTimers'\n    endpoint = f'/timer/{method}'\n    r_dict = await self.call_bypassv1_api(\n        Request15ADetails, method=method, endpoint=endpoint\n    )\n    result_model = process_bypassv1_result(\n        self, logger, 'get_timer', r_dict, TimerModels.ResultV1GetTimer\n    )\n    if result_model is None:\n        return\n    timers = result_model.timers\n    if not isinstance(timers, list) or len(timers) == 0:\n        self.state.timer = None\n        return\n    timer = timers[0]\n    if not isinstance(timer, TimerModels.TimerItemV1):\n        logger.debug('Invalid timer model - %s', timer)\n        return\n    self.state.timer = Timer(\n        timer_duration=int(timer.counterTimer),\n        id=int(timer.timerID),\n        action=timer.action,\n    )\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.get_weekly_energy","title":"get_weekly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_weekly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build weekly energy history dictionary.</p> <p>The data is stored in the <code>device.state.weekly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_weekly_energy(self) -&gt; None:\n    \"\"\"Build weekly energy history dictionary.\n\n    The data is stored in the `device.state.weekly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastWeekEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.get_yearly_energy","title":"get_yearly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_yearly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build Yearly Energy Dictionary.</p> <p>The data is stored in the <code>device.state.yearly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_yearly_energy(self) -&gt; None:\n    \"\"\"Build Yearly Energy Dictionary.\n\n    The data is stored in the `device.state.yearly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastYearEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.set_nightlight_auto","title":"set_nightlight_auto  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_auto() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Set nightlight to auto mode.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def set_nightlight_auto(self) -&gt; bool:\n    \"\"\"Set nightlight to auto mode.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.AUTO)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.set_nightlight_state","title":"set_nightlight_state  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_state(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Set nightlight mode.</p> <p>Available nightlight states are found in the <code>device.nightlight_modes</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Nightlight mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if nightlight mode set successfully, False otherwise.</p> <p>Set nightlight state for 15A Outlets.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def set_nightlight_state(self, mode: str) -&gt; bool:\n    \"\"\"Set nightlight state for 15A Outlets.\"\"\"\n    if mode.lower() not in self.nightlight_modes:\n        logger.error('Invalid nightlight mode - %s', mode)\n        return False\n    mode = mode.lower()\n    r_dict = await self.call_bypassv1_api(\n        Request15ANightlight,\n        update_dict={'mode': mode},\n        method='outletNightLightCtl',\n        endpoint='outletNightLightCtl',\n    )\n\n    response = Helpers.process_dev_response(\n        logger, 'set_nightlight_state', self, r_dict\n    )\n    if response is None:\n        return False\n\n    self.state.nightlight_status = mode\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    if action is None:\n        action = (\n            DeviceStatus.ON\n            if self.state.device_status == DeviceStatus.OFF\n            else DeviceStatus.OFF\n        )\n    if not isinstance(action, str) or action not in [\n        DeviceStatus.ON,\n        DeviceStatus.OFF,\n    ]:\n        logger.error('Invalid action for timer - %s', action)\n        return False\n    update_dict = {\n        'action': action,\n        'counterTime': str(duration),\n    }\n    r_dict = await self.call_bypassv1_api(\n        TimerModels.RequestV1SetTime,\n        update_dict=update_dict,\n        method='addTimer',\n        endpoint='timer/addTimer',\n    )\n    result_model = process_bypassv1_result(\n        self, logger, 'set_timer', r_dict, TimerModels.ResultV1SetTimer\n    )\n    if result_model is None:\n        return False\n    self.state.timer = Timer(duration, action, int(result_model.timerID))\n    return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.device_status != DeviceStatus.ON\n    toggle_str = DeviceStatus.ON if toggle else DeviceStatus.OFF\n    r_dict = await self.call_bypassv1_api(\n        Request15AStatus,\n        update_dict={'status': toggle_str},\n        method='deviceStatus',\n        endpoint='deviceStatus',\n    )\n    response = Helpers.process_dev_response(logger, 'toggle_switch', self, r_dict)\n    if response is None:\n        return False\n\n    self.state.device_status = toggle_str\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.turn_off_nightlight","title":"turn_off_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_off_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Turn off nightlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def turn_off_nightlight(self) -&gt; bool:\n    \"\"\"Turn off nightlight if supported.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.OFF)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.turn_on_nightlight","title":"turn_on_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_on_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Turn on nightlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def turn_on_nightlight(self) -&gt; bool:\n    \"\"\"Turn on nightlight if supported.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.ON)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutlet15A.update_energy","title":"update_energy  <code>async</code>  \u21b2","text":"<pre><code>update_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build weekly, monthly and yearly dictionaries.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def update_energy(self) -&gt; None:\n    \"\"\"Build weekly, monthly and yearly dictionaries.\"\"\"\n    if self.supports_energy:\n        await self.get_weekly_energy()\n        await self.get_monthly_energy()\n        await self.get_yearly_energy()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug","title":"pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug \u21b2","text":"<p>               Bases: <code>BypassV1Mixin</code>, <code>VeSyncOutlet</code></p> <p>Class to hold Etekcity outdoor outlets.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The device details.</p> required <code>manager</code> <code>VeSync</code> <p>The VeSync manager.</p> required <code>feature_map</code> <code>OutletMap</code> <p>The feature map for the device.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>OutletState</code> <p>The state of the outlet.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>device_status</code> <code>str</code> <p>Device status.</p> <code>connection_status</code> <code>str</code> <p>Connection status.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>class VeSyncOutdoorPlug(BypassV1Mixin, VeSyncOutlet):\n    \"\"\"Class to hold Etekcity outdoor outlets.\n\n    Args:\n        details (ResponseDeviceDetailsModel): The device details.\n        manager (VeSync): The VeSync manager.\n        feature_map (OutletMap): The feature map for the device.\n\n    Attributes:\n        state (OutletState): The state of the outlet.\n        last_response (ResponseInfo): Last response from API call.\n        device_status (str): Device status.\n        connection_status (str): Connection status.\n        manager (VeSync): Manager object for API calls.\n        device_name (str): Name of device.\n        device_image (str): URL for device image.\n        cid (str): Device ID.\n        connection_type (str): Connection type of device.\n        device_type (str): Type of device.\n        type (str): Type of device.\n        uuid (str): UUID of device, not always present.\n        config_module (str): Configuration module of device.\n        mac_id (str): MAC ID of device.\n        current_firm_version (str): Current firmware version of device.\n        device_region (str): Region of device. (US, EU, etc.)\n        pid (str): Product ID of device, pulled by some devices on update.\n        sub_device_no (int): Sub-device number of device.\n        product_type (str): Product type of device.\n        features (dict): Features of device.\n    \"\"\"\n\n    __slots__ = ()\n\n    def __init__(\n        self, details: ResponseDeviceDetailsModel, manager: VeSync, feature_map: OutletMap\n    ) -&gt; None:\n        \"\"\"Initialize Etekcity Outdoor Plug class.\"\"\"\n        super().__init__(details, manager, feature_map)\n\n    async def get_details(self) -&gt; None:\n        r_dict = await self.call_bypassv1_api(\n            Request15ADetails, method='deviceDetail', endpoint='deviceDetail'\n        )\n        r = Helpers.process_dev_response(logger, 'get_details', self, r_dict)\n        if r is None:\n            return\n\n        resp_model = ResponseOutdoorDetails.from_dict(r)\n        self.state.connection_status = resp_model.result.connectionStatus\n        self.state.energy = resp_model.result.energy\n        self.state.power = resp_model.result.power\n        self.state.voltage = resp_model.result.voltage\n        self.state.active_time = resp_model.result.activeTime\n        for outlet in resp_model.result.subDevices:\n            if not isinstance(self.sub_device_no, float):\n                continue\n            if int(self.sub_device_no) == int(outlet.subDeviceNo):\n                self.state.device_status = outlet.subDeviceStatus\n\n    @deprecated('Use toggle_switch(toggle: bool | None) instead')\n    async def toggle(self, status: str) -&gt; bool:\n        \"\"\"Deprecated - use toggle_switch().\"\"\"\n        toggle = status != DeviceStatus.ON\n        return await self.toggle_switch(toggle)\n\n    async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n        if toggle is None:\n            toggle = self.state.device_status != DeviceStatus.ON\n        status = DeviceStatus.ON if toggle else DeviceStatus.OFF\n\n        r_dict = await self.call_bypassv1_api(\n            RequestOutdoorStatus,\n            update_dict={'switchNo': self.sub_device_no, 'status': status},\n            method='deviceStatus',\n            endpoint='deviceStatus',\n        )\n\n        response = Helpers.process_dev_response(logger, 'toggle', self, r_dict)\n        if response is None:\n            return False\n\n        self.state.device_status = status\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def get_timer(self) -&gt; None:\n        method = 'getTimers'\n        endpoint = f'/timer/{method}'\n        r_dict = await self.call_bypassv1_api(\n            TimerModels.RequestV1GetTimer,\n            {'switchNo': self.sub_device_no},\n            method=method,\n            endpoint=endpoint,\n        )\n        result_model = process_bypassv1_result(\n            self, logger, 'get_timer', r_dict, TimerModels.ResultV1GetTimer\n        )\n        if result_model is None:\n            return\n        timers = result_model.timers\n        if not isinstance(timers, list) or len(timers) == 0:\n            self.state.timer = None\n            return\n        if len(timers) &gt; 1:\n            logger.debug(\n                (\n                    (\n                        'Multiple timers found - %s, this method '\n                        'will only return the most recent timer created.'\n                    ),\n                ),\n                timers,\n            )\n        timer = timers[0]\n        if not isinstance(timer, TimerModels.TimerItemV1):\n            logger.debug('Invalid timer model - %s', timer)\n            return\n        self.state.timer = Timer(\n            timer_duration=int(timer.counterTimer),\n            id=int(timer.timerID),\n            action=timer.action,\n        )\n\n    async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n        if action is None:\n            action = (\n                DeviceStatus.ON\n                if self.state.device_status == DeviceStatus.OFF\n                else DeviceStatus.OFF\n            )\n        if not isinstance(action, str) or action not in [\n            DeviceStatus.ON,\n            DeviceStatus.OFF,\n        ]:\n            logger.error('Invalid action for timer - %s', action)\n            return False\n        update_dict = {\n            'action': action,\n            'counterTime': str(duration),\n            'switchNo': self.sub_device_no,\n        }\n        r_dict = await self.call_bypassv1_api(\n            TimerModels.RequestV1SetTime,\n            update_dict=update_dict,\n            method='addTimer',\n            endpoint='timer/addTimer',\n        )\n        result_model = process_bypassv1_result(\n            self, logger, 'set_timer', r_dict, TimerModels.ResultV1SetTimer\n        )\n        if result_model is None:\n            return False\n        self.state.timer = Timer(duration, action, int(result_model.timerID))\n        return True\n\n    async def clear_timer(self) -&gt; bool:\n        if self.state.timer is None:\n            logger.debug('No timer set, nothing to clear, run get_timer().')\n            return False\n        if self.state.timer.time_remaining == 0:\n            logger.debug('Timer already ended.')\n            self.state.timer = None\n            return True\n        r_dict = await self.call_bypassv1_api(\n            TimerModels.RequestV1ClearTimer,\n            {'timerId': str(self.state.timer.id)},\n            method='deleteTimer',\n            endpoint='timer/deleteTimer',\n        )\n        r_dict = Helpers.process_dev_response(logger, 'clear_timer', self, r_dict)\n        if r_dict is None:\n            return False\n        self.state.timer = None\n        return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.nightlight_modes","title":"nightlight_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_modes = nightlight_modes\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'uuid',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: OutletState = OutletState(self, details, feature_map)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.supports_energy","title":"supports_energy  <code>property</code>  \u21b2","text":"<pre><code>supports_energy: bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Return True if device supports energy.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if device supports energy, False otherwise.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.supports_nightlight","title":"supports_nightlight  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight: bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Return True if device supports nightlight.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if device supports nightlight, False otherwise.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug-functions","title":"Functions\u21b2","text":""},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.call_bypassv1_api","title":"call_bypassv1_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv1_api(\n    request_model: type[RequestBypassV1],\n    update_dict: dict | None = None,\n    method: str = 'bypass',\n    endpoint: str = 'bypass',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p> <p>Send ByPass V1 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V1 API. The endpoint can be overridden with the <code>endpoint</code> argument.</p> <p>Parameters:</p> Name Type Description Default <code>request_model</code> <code>type[RequestBypassV1]</code> <p>The request model to use.</p> required <code>update_dict</code> <code>dict</code> <p>Additional keys to add on.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypass'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the url path, defaults to <code>bypass</code>, e.g. <code>/cloud/v1/deviceManaged/bypass</code>.</p> <code>'bypass'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv1_api(\n    self,\n    request_model: type[RequestBypassV1],\n    update_dict: dict | None = None,\n    method: str = 'bypass',\n    endpoint: str = 'bypass',\n) -&gt; dict | None:\n    \"\"\"Send ByPass V1 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V1 API.\n    The endpoint can be overridden with the `endpoint` argument.\n\n    Args:\n        request_model (type[RequestBypassV1]): The request model to use.\n        update_dict (dict): Additional keys to add on.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the url path, defaults to\n            `bypass`, e.g. `/cloud/v1/deviceManaged/bypass`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(request_model, update_dict, method)\n    url_path = BYPASS_V1_PATH + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        url_path, 'post', request, Helpers.req_header_bypass()\n    )\n\n    return resp_dict\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    if self.state.timer is None:\n        logger.debug('No timer set, nothing to clear, run get_timer().')\n        return False\n    if self.state.timer.time_remaining == 0:\n        logger.debug('Timer already ended.')\n        self.state.timer = None\n        return True\n    r_dict = await self.call_bypassv1_api(\n        TimerModels.RequestV1ClearTimer,\n        {'timerId': str(self.state.timer.id)},\n        method='deleteTimer',\n        endpoint='timer/deleteTimer',\n    )\n    r_dict = Helpers.process_dev_response(logger, 'clear_timer', self, r_dict)\n    if r_dict is None:\n        return False\n    self.state.timer = None\n    return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def get_details(self) -&gt; None:\n    r_dict = await self.call_bypassv1_api(\n        Request15ADetails, method='deviceDetail', endpoint='deviceDetail'\n    )\n    r = Helpers.process_dev_response(logger, 'get_details', self, r_dict)\n    if r is None:\n        return\n\n    resp_model = ResponseOutdoorDetails.from_dict(r)\n    self.state.connection_status = resp_model.result.connectionStatus\n    self.state.energy = resp_model.result.energy\n    self.state.power = resp_model.result.power\n    self.state.voltage = resp_model.result.voltage\n    self.state.active_time = resp_model.result.activeTime\n    for outlet in resp_model.result.subDevices:\n        if not isinstance(self.sub_device_no, float):\n            continue\n        if int(self.sub_device_no) == int(outlet.subDeviceNo):\n            self.state.device_status = outlet.subDeviceStatus\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.get_monthly_energy","title":"get_monthly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_monthly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build Monthly Energy History Dictionary.</p> <p>The data is stored in the <code>device.state.monthly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_monthly_energy(self) -&gt; None:\n    \"\"\"Build Monthly Energy History Dictionary.\n\n    The data is stored in the `device.state.monthly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastMonthEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def get_timer(self) -&gt; None:\n    method = 'getTimers'\n    endpoint = f'/timer/{method}'\n    r_dict = await self.call_bypassv1_api(\n        TimerModels.RequestV1GetTimer,\n        {'switchNo': self.sub_device_no},\n        method=method,\n        endpoint=endpoint,\n    )\n    result_model = process_bypassv1_result(\n        self, logger, 'get_timer', r_dict, TimerModels.ResultV1GetTimer\n    )\n    if result_model is None:\n        return\n    timers = result_model.timers\n    if not isinstance(timers, list) or len(timers) == 0:\n        self.state.timer = None\n        return\n    if len(timers) &gt; 1:\n        logger.debug(\n            (\n                (\n                    'Multiple timers found - %s, this method '\n                    'will only return the most recent timer created.'\n                ),\n            ),\n            timers,\n        )\n    timer = timers[0]\n    if not isinstance(timer, TimerModels.TimerItemV1):\n        logger.debug('Invalid timer model - %s', timer)\n        return\n    self.state.timer = Timer(\n        timer_duration=int(timer.counterTimer),\n        id=int(timer.timerID),\n        action=timer.action,\n    )\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.get_weekly_energy","title":"get_weekly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_weekly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build weekly energy history dictionary.</p> <p>The data is stored in the <code>device.state.weekly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_weekly_energy(self) -&gt; None:\n    \"\"\"Build weekly energy history dictionary.\n\n    The data is stored in the `device.state.weekly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastWeekEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.get_yearly_energy","title":"get_yearly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_yearly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build Yearly Energy Dictionary.</p> <p>The data is stored in the <code>device.state.yearly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_yearly_energy(self) -&gt; None:\n    \"\"\"Build Yearly Energy Dictionary.\n\n    The data is stored in the `device.state.yearly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastYearEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.set_nightlight_auto","title":"set_nightlight_auto  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_auto() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Set nightlight to auto mode.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def set_nightlight_auto(self) -&gt; bool:\n    \"\"\"Set nightlight to auto mode.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.AUTO)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.set_nightlight_state","title":"set_nightlight_state  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_state(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Set nightlight mode.</p> <p>Available nightlight states are found in the <code>device.nightlight_modes</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Nightlight mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if nightlight mode set successfully, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def set_nightlight_state(self, mode: str) -&gt; bool:\n    \"\"\"Set nightlight mode.\n\n    Available nightlight states are found in the `device.nightlight_modes` attribute.\n\n    Args:\n        mode (str): Nightlight mode to set.\n\n    Returns:\n        bool: True if nightlight mode set successfully, False otherwise.\n    \"\"\"\n    del mode  # unused\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n    else:\n        logger.debug('Nightlight mode not configured for %s', self.device_name)\n    return False\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    if action is None:\n        action = (\n            DeviceStatus.ON\n            if self.state.device_status == DeviceStatus.OFF\n            else DeviceStatus.OFF\n        )\n    if not isinstance(action, str) or action not in [\n        DeviceStatus.ON,\n        DeviceStatus.OFF,\n    ]:\n        logger.error('Invalid action for timer - %s', action)\n        return False\n    update_dict = {\n        'action': action,\n        'counterTime': str(duration),\n        'switchNo': self.sub_device_no,\n    }\n    r_dict = await self.call_bypassv1_api(\n        TimerModels.RequestV1SetTime,\n        update_dict=update_dict,\n        method='addTimer',\n        endpoint='timer/addTimer',\n    )\n    result_model = process_bypassv1_result(\n        self, logger, 'set_timer', r_dict, TimerModels.ResultV1SetTimer\n    )\n    if result_model is None:\n        return False\n    self.state.timer = Timer(duration, action, int(result_model.timerID))\n    return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.toggle","title":"toggle  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>toggle(status: str) -&gt; bool\n</code></pre> Deprecated <p>Use toggle_switch(toggle: bool | None) instead</p> <p>Deprecated - use toggle_switch().</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>@deprecated('Use toggle_switch(toggle: bool | None) instead')\nasync def toggle(self, status: str) -&gt; bool:\n    \"\"\"Deprecated - use toggle_switch().\"\"\"\n    toggle = status != DeviceStatus.ON\n    return await self.toggle_switch(toggle)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.device_status != DeviceStatus.ON\n    status = DeviceStatus.ON if toggle else DeviceStatus.OFF\n\n    r_dict = await self.call_bypassv1_api(\n        RequestOutdoorStatus,\n        update_dict={'switchNo': self.sub_device_no, 'status': status},\n        method='deviceStatus',\n        endpoint='deviceStatus',\n    )\n\n    response = Helpers.process_dev_response(logger, 'toggle', self, r_dict)\n    if response is None:\n        return False\n\n    self.state.device_status = status\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.turn_off_nightlight","title":"turn_off_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_off_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Turn off nightlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def turn_off_nightlight(self) -&gt; bool:\n    \"\"\"Turn off nightlight if supported.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.OFF)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.turn_on_nightlight","title":"turn_on_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_on_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Turn on nightlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def turn_on_nightlight(self) -&gt; bool:\n    \"\"\"Turn on nightlight if supported.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.ON)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutdoorPlug.update_energy","title":"update_energy  <code>async</code>  \u21b2","text":"<pre><code>update_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build weekly, monthly and yearly dictionaries.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def update_energy(self) -&gt; None:\n    \"\"\"Build weekly, monthly and yearly dictionaries.\"\"\"\n    if self.supports_energy:\n        await self.get_weekly_energy()\n        await self.get_monthly_energy()\n        await self.get_yearly_energy()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA","title":"pyvesync.devices.vesyncoutlet.VeSyncESW10USA \u21b2","text":"<p>               Bases: <code>BypassV2Mixin</code>, <code>VeSyncOutlet</code></p> <p>VeSync ESW10 USA outlet.</p> <p>Note that this device does not support energy monitoring.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The device details.</p> required <code>manager</code> <code>VeSync</code> <p>The VeSync manager.</p> required <code>feature_map</code> <code>OutletMap</code> <p>The feature map for the device.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>OutletState</code> <p>The state of the outlet.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>device_status</code> <code>str</code> <p>Device status.</p> <code>connection_status</code> <code>str</code> <p>Connection status.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>class VeSyncESW10USA(BypassV2Mixin, VeSyncOutlet):\n    \"\"\"VeSync ESW10 USA outlet.\n\n    Note that this device does not support energy monitoring.\n\n    Args:\n        details (ResponseDeviceDetailsModel): The device details.\n        manager (VeSync): The VeSync manager.\n        feature_map (OutletMap): The feature map for the device.\n\n    Attributes:\n        state (OutletState): The state of the outlet.\n        last_response (ResponseInfo): Last response from API call.\n        device_status (str): Device status.\n        connection_status (str): Connection status.\n        manager (VeSync): Manager object for API calls.\n        device_name (str): Name of device.\n        device_image (str): URL for device image.\n        cid (str): Device ID.\n        connection_type (str): Connection type of device.\n        device_type (str): Type of device.\n        type (str): Type of device.\n        uuid (str): UUID of device, not always present.\n        config_module (str): Configuration module of device.\n        mac_id (str): MAC ID of device.\n        current_firm_version (str): Current firmware version of device.\n        device_region (str): Region of device. (US, EU, etc.)\n        pid (str): Product ID of device, pulled by some devices on update.\n        sub_device_no (int): Sub-device number of device.\n        product_type (str): Product type of device.\n        features (dict): Features of device.\n    \"\"\"\n\n    __slots__ = ()\n\n    def __init__(\n        self, details: ResponseDeviceDetailsModel, manager: VeSync, feature_map: OutletMap\n    ) -&gt; None:\n        \"\"\"Initialize ESW10 USA outlet.\"\"\"\n        super().__init__(details, manager, feature_map)\n\n    async def get_details(self) -&gt; None:\n        payload_data = {\n            'id': 0,\n        }\n        payload_method = 'getSwitch'\n        r_dict = await self.call_bypassv2_api(payload_method, payload_data)\n        result = process_bypassv2_result(\n            self, logger, 'get_details', r_dict, ResultESW10Details\n        )\n        if not isinstance(result, dict) or not isinstance(result.get('enabled'), bool):\n            logger.debug('Error getting %s details', self.device_name)\n            self.state.connection_status = ConnectionStatus.OFFLINE\n            return\n        self.state.device_status = DeviceStatus.from_bool(result.enabled)\n        self.state.connection_status = ConnectionStatus.ONLINE\n\n    async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n        if toggle is None:\n            toggle = self.state.device_status != DeviceStatus.ON\n        payload_data = {\n            'id': 0,\n            'enabled': toggle,\n        }\n        payload_method = 'setSwitch'\n        r_dict = await self.call_bypassv2_api(payload_method, payload_data)\n        result = Helpers.process_dev_response(logger, 'toggle_switch', self, r_dict)\n        if not isinstance(result, dict):\n            logger.debug('Error toggling %s switch', self.device_name)\n            return False\n        self.state.device_status = DeviceStatus.from_bool(toggle)\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def get_timer(self) -&gt; Timer | None:\n        r_dict = await self.call_bypassv2_api('getTimer')\n        result_model = process_bypassv2_result(\n            self, logger, 'get_timer', r_dict, TimerModels.ResultV2GetTimer\n        )\n        if result_model is None:\n            return None\n        timers = result_model.timers\n        if not timers:\n            self.state.timer = None\n            return None\n        if len(timers) &gt; 1:\n            logger.debug(\n                (\n                    'Multiple timers found - %s, this method '\n                    'will only return the most recent timer created.'\n                ),\n                timers,\n            )\n        timer = timers[0]\n        self.state.timer = Timer(\n            timer_duration=int(timer.remain),\n            id=int(timer.id),\n            action=timer.action,\n        )\n        return self.state.timer\n\n    async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n        if action is None:\n            action = (\n                DeviceStatus.ON\n                if self.state.device_status == DeviceStatus.OFF\n                else DeviceStatus.OFF\n            )\n        if action not in [DeviceStatus.ON, DeviceStatus.OFF]:\n            logger.error('Invalid action for timer - %s', action)\n            return False\n        payload_data = {'action': action, 'total': duration}\n        r_dict = await self.call_bypassv2_api(\n            payload_method='addTimer',\n            data=payload_data,\n        )\n        result_model = process_bypassv2_result(\n            self, logger, 'set_timer', r_dict, TimerModels.ResultV2SetTimer\n        )\n        if result_model is None:\n            return False\n        if result_model.id is None:\n            logger.debug('Unable to set timer.')\n            return False\n        self.state.timer = Timer(duration, action, int(result_model.id))\n        return True\n\n    async def clear_timer(self) -&gt; bool:\n        if self.state.timer is None:\n            logger.debug('No timer set, nothing to clear, run get_timer().')\n            return False\n        if self.state.timer.time_remaining == 0:\n            logger.debug('Timer already ended.')\n            self.state.timer = None\n            return True\n        r_dict = await self.call_bypassv2_api(\n            payload_method='delTimer', data={'id': self.state.timer.id}\n        )\n        r_dict = Helpers.process_dev_response(logger, 'clear_timer', self, r_dict)\n        if r_dict is None:\n            return False\n        self.state.timer = None\n        return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.nightlight_modes","title":"nightlight_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_modes = nightlight_modes\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: OutletState = OutletState(self, details, feature_map)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.supports_energy","title":"supports_energy  <code>property</code>  \u21b2","text":"<pre><code>supports_energy: bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Return True if device supports energy.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if device supports energy, False otherwise.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.supports_nightlight","title":"supports_nightlight  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight: bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Return True if device supports nightlight.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if device supports nightlight, False otherwise.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA-functions","title":"Functions\u21b2","text":""},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.call_bypassv2_api","title":"call_bypassv2_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv2_api(\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p> <p>Send Bypass V2 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V2 API.</p> <p>Parameters:</p> Name Type Description Default <code>payload_method</code> <code>str</code> <p>The method to use in the payload dict.</p> required <code>data</code> <code>dict | None</code> <p>The data to send in the request.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypassV2'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the API url, defaults to <code>bypassV2</code>, e.g. <code>/cloud/v2/deviceManaged/bypassV2</code>.</p> <code>'bypassV2'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv2_api(\n    self,\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None:\n    \"\"\"Send Bypass V2 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V2 API.\n\n    Args:\n        payload_method (str): The method to use in the payload dict.\n        data (dict | None): The data to send in the request.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the API url, defaults to\n            `bypassV2`, e.g. `/cloud/v2/deviceManaged/bypassV2`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(payload_method, data, method)\n    endpoint = BYPASS_V2_BASE + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        endpoint, 'post', request, Helpers.req_header_bypass()\n    )\n    return resp_dict\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    if self.state.timer is None:\n        logger.debug('No timer set, nothing to clear, run get_timer().')\n        return False\n    if self.state.timer.time_remaining == 0:\n        logger.debug('Timer already ended.')\n        self.state.timer = None\n        return True\n    r_dict = await self.call_bypassv2_api(\n        payload_method='delTimer', data={'id': self.state.timer.id}\n    )\n    r_dict = Helpers.process_dev_response(logger, 'clear_timer', self, r_dict)\n    if r_dict is None:\n        return False\n    self.state.timer = None\n    return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def get_details(self) -&gt; None:\n    payload_data = {\n        'id': 0,\n    }\n    payload_method = 'getSwitch'\n    r_dict = await self.call_bypassv2_api(payload_method, payload_data)\n    result = process_bypassv2_result(\n        self, logger, 'get_details', r_dict, ResultESW10Details\n    )\n    if not isinstance(result, dict) or not isinstance(result.get('enabled'), bool):\n        logger.debug('Error getting %s details', self.device_name)\n        self.state.connection_status = ConnectionStatus.OFFLINE\n        return\n    self.state.device_status = DeviceStatus.from_bool(result.enabled)\n    self.state.connection_status = ConnectionStatus.ONLINE\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.get_monthly_energy","title":"get_monthly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_monthly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build Monthly Energy History Dictionary.</p> <p>The data is stored in the <code>device.state.monthly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_monthly_energy(self) -&gt; None:\n    \"\"\"Build Monthly Energy History Dictionary.\n\n    The data is stored in the `device.state.monthly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastMonthEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    r_dict = await self.call_bypassv2_api('getTimer')\n    result_model = process_bypassv2_result(\n        self, logger, 'get_timer', r_dict, TimerModels.ResultV2GetTimer\n    )\n    if result_model is None:\n        return None\n    timers = result_model.timers\n    if not timers:\n        self.state.timer = None\n        return None\n    if len(timers) &gt; 1:\n        logger.debug(\n            (\n                'Multiple timers found - %s, this method '\n                'will only return the most recent timer created.'\n            ),\n            timers,\n        )\n    timer = timers[0]\n    self.state.timer = Timer(\n        timer_duration=int(timer.remain),\n        id=int(timer.id),\n        action=timer.action,\n    )\n    return self.state.timer\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.get_weekly_energy","title":"get_weekly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_weekly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build weekly energy history dictionary.</p> <p>The data is stored in the <code>device.state.weekly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_weekly_energy(self) -&gt; None:\n    \"\"\"Build weekly energy history dictionary.\n\n    The data is stored in the `device.state.weekly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastWeekEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.get_yearly_energy","title":"get_yearly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_yearly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build Yearly Energy Dictionary.</p> <p>The data is stored in the <code>device.state.yearly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_yearly_energy(self) -&gt; None:\n    \"\"\"Build Yearly Energy Dictionary.\n\n    The data is stored in the `device.state.yearly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastYearEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.set_nightlight_auto","title":"set_nightlight_auto  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_auto() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Set nightlight to auto mode.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def set_nightlight_auto(self) -&gt; bool:\n    \"\"\"Set nightlight to auto mode.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.AUTO)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.set_nightlight_state","title":"set_nightlight_state  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_state(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Set nightlight mode.</p> <p>Available nightlight states are found in the <code>device.nightlight_modes</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Nightlight mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if nightlight mode set successfully, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def set_nightlight_state(self, mode: str) -&gt; bool:\n    \"\"\"Set nightlight mode.\n\n    Available nightlight states are found in the `device.nightlight_modes` attribute.\n\n    Args:\n        mode (str): Nightlight mode to set.\n\n    Returns:\n        bool: True if nightlight mode set successfully, False otherwise.\n    \"\"\"\n    del mode  # unused\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n    else:\n        logger.debug('Nightlight mode not configured for %s', self.device_name)\n    return False\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    if action is None:\n        action = (\n            DeviceStatus.ON\n            if self.state.device_status == DeviceStatus.OFF\n            else DeviceStatus.OFF\n        )\n    if action not in [DeviceStatus.ON, DeviceStatus.OFF]:\n        logger.error('Invalid action for timer - %s', action)\n        return False\n    payload_data = {'action': action, 'total': duration}\n    r_dict = await self.call_bypassv2_api(\n        payload_method='addTimer',\n        data=payload_data,\n    )\n    result_model = process_bypassv2_result(\n        self, logger, 'set_timer', r_dict, TimerModels.ResultV2SetTimer\n    )\n    if result_model is None:\n        return False\n    if result_model.id is None:\n        logger.debug('Unable to set timer.')\n        return False\n    self.state.timer = Timer(duration, action, int(result_model.id))\n    return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.device_status != DeviceStatus.ON\n    payload_data = {\n        'id': 0,\n        'enabled': toggle,\n    }\n    payload_method = 'setSwitch'\n    r_dict = await self.call_bypassv2_api(payload_method, payload_data)\n    result = Helpers.process_dev_response(logger, 'toggle_switch', self, r_dict)\n    if not isinstance(result, dict):\n        logger.debug('Error toggling %s switch', self.device_name)\n        return False\n    self.state.device_status = DeviceStatus.from_bool(toggle)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.turn_off_nightlight","title":"turn_off_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_off_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Turn off nightlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def turn_off_nightlight(self) -&gt; bool:\n    \"\"\"Turn off nightlight if supported.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.OFF)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.turn_on_nightlight","title":"turn_on_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_on_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Turn on nightlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def turn_on_nightlight(self) -&gt; bool:\n    \"\"\"Turn on nightlight if supported.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.ON)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncESW10USA.update_energy","title":"update_energy  <code>async</code>  \u21b2","text":"<pre><code>update_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build weekly, monthly and yearly dictionaries.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def update_energy(self) -&gt; None:\n    \"\"\"Build weekly, monthly and yearly dictionaries.\"\"\"\n    if self.supports_energy:\n        await self.get_weekly_energy()\n        await self.get_monthly_energy()\n        await self.get_yearly_energy()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1","title":"pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1 \u21b2","text":"<p>               Bases: <code>BypassV2Mixin</code>, <code>VeSyncOutlet</code></p> <p>VeSync BSDGO1 smart plug.</p> <p>Note that this device does not support energy monitoring.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The device details.</p> required <code>manager</code> <code>VeSync</code> <p>The VeSync manager.</p> required <code>feature_map</code> <code>OutletMap</code> <p>The feature map for the device.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>OutletState</code> <p>The state of the outlet.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>device_status</code> <code>str</code> <p>Device status.</p> <code>connection_status</code> <code>str</code> <p>Connection status.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>class VeSyncOutletBSDGO1(BypassV2Mixin, VeSyncOutlet):\n    \"\"\"VeSync BSDGO1 smart plug.\n\n    Note that this device does not support energy monitoring.\n\n    Args:\n        details (ResponseDeviceDetailsModel): The device details.\n        manager (VeSync): The VeSync manager.\n        feature_map (OutletMap): The feature map for the device.\n\n    Attributes:\n        state (OutletState): The state of the outlet.\n        last_response (ResponseInfo): Last response from API call.\n        device_status (str): Device status.\n        connection_status (str): Connection status.\n        manager (VeSync): Manager object for API calls.\n        device_name (str): Name of device.\n        device_image (str): URL for device image.\n        cid (str): Device ID.\n        connection_type (str): Connection type of device.\n        device_type (str): Type of device.\n        type (str): Type of device.\n        uuid (str): UUID of device, not always present.\n        config_module (str): Configuration module of device.\n        mac_id (str): MAC ID of device.\n        current_firm_version (str): Current firmware version of device.\n        device_region (str): Region of device. (US, EU, etc.)\n        pid (str): Product ID of device, pulled by some devices on update.\n        sub_device_no (int): Sub-device number of device.\n        product_type (str): Product type of device.\n        features (dict): Features of device.\n    \"\"\"\n\n    __slots__ = ()\n\n    def __init__(\n        self, details: ResponseDeviceDetailsModel, manager: VeSync, feature_map: OutletMap\n    ) -&gt; None:\n        \"\"\"Initialize BSDGO1 smart plug class.\"\"\"\n        super().__init__(details, manager, feature_map)\n\n    async def get_details(self) -&gt; None:\n        r_dict = await self.call_bypassv2_api('getProperty')\n\n        resp_model = process_bypassv2_result(\n            self, logger, 'get_details', r_dict, ResponseBSDGO1OutletResult\n        )\n        if resp_model is None:\n            return\n\n        device_state = resp_model.powerSwitch_1\n        str_status = DeviceStatus.ON if device_state == 1 else DeviceStatus.OFF\n        self.state.device_status = str_status\n        self.state.connection_status = resp_model.connectionStatus\n        self.state.active_time = resp_model.active_time\n\n    async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n        if toggle is None:\n            toggle = self.state.device_status != DeviceStatus.ON\n        toggle_int = 1 if toggle else 0\n        r_dict = await self.call_bypassv2_api(\n            'setProperty', data={'powerSwitch_1': toggle_int}\n        )\n        r = Helpers.process_dev_response(logger, 'toggle_switch', self, r_dict)\n        if r is None:\n            return False\n\n        self.state.device_status = DeviceStatus.ON if toggle else DeviceStatus.OFF\n        self.state.connection_status = ConnectionStatus.ONLINE\n        return True\n\n    async def _set_power(self, power: bool) -&gt; bool:\n        \"\"\"Set power state of BSDGO1 outlet.\"\"\"\n        return await self.toggle_switch(power)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.nightlight_modes","title":"nightlight_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_modes = nightlight_modes\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: OutletState = OutletState(self, details, feature_map)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.supports_energy","title":"supports_energy  <code>property</code>  \u21b2","text":"<pre><code>supports_energy: bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Return True if device supports energy.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if device supports energy, False otherwise.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.supports_nightlight","title":"supports_nightlight  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight: bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Return True if device supports nightlight.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if device supports nightlight, False otherwise.</p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1-functions","title":"Functions\u21b2","text":""},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.call_bypassv2_api","title":"call_bypassv2_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv2_api(\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV2Mixin</code></p> <p>Send Bypass V2 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V2 API.</p> <p>Parameters:</p> Name Type Description Default <code>payload_method</code> <code>str</code> <p>The method to use in the payload dict.</p> required <code>data</code> <code>dict | None</code> <p>The data to send in the request.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypassV2'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the API url, defaults to <code>bypassV2</code>, e.g. <code>/cloud/v2/deviceManaged/bypassV2</code>.</p> <code>'bypassV2'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv2_api(\n    self,\n    payload_method: str,\n    data: dict | None = None,\n    method: str = 'bypassV2',\n    endpoint: str = 'bypassV2',\n) -&gt; dict | None:\n    \"\"\"Send Bypass V2 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V2 API.\n\n    Args:\n        payload_method (str): The method to use in the payload dict.\n        data (dict | None): The data to send in the request.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the API url, defaults to\n            `bypassV2`, e.g. `/cloud/v2/deviceManaged/bypassV2`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(payload_method, data, method)\n    endpoint = BYPASS_V2_BASE + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        endpoint, 'post', request, Helpers.req_header_bypass()\n    )\n    return resp_dict\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    \"\"\"Clear timer for device from API.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    logger.debug('Not implemented - clear_timer')\n    return False\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def get_details(self) -&gt; None:\n    r_dict = await self.call_bypassv2_api('getProperty')\n\n    resp_model = process_bypassv2_result(\n        self, logger, 'get_details', r_dict, ResponseBSDGO1OutletResult\n    )\n    if resp_model is None:\n        return\n\n    device_state = resp_model.powerSwitch_1\n    str_status = DeviceStatus.ON if device_state == 1 else DeviceStatus.OFF\n    self.state.device_status = str_status\n    self.state.connection_status = resp_model.connectionStatus\n    self.state.active_time = resp_model.active_time\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.get_monthly_energy","title":"get_monthly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_monthly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build Monthly Energy History Dictionary.</p> <p>The data is stored in the <code>device.state.monthly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_monthly_energy(self) -&gt; None:\n    \"\"\"Build Monthly Energy History Dictionary.\n\n    The data is stored in the `device.state.monthly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastMonthEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    \"\"\"Get timer for device from API and set the `state.Timer` attribute.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Note:\n        This method may not be implemented for all devices. Please\n        open an issue if there is an error.\n    \"\"\"\n    logger.debug('Not implemented - get_timer')\n    return None\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.get_weekly_energy","title":"get_weekly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_weekly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build weekly energy history dictionary.</p> <p>The data is stored in the <code>device.state.weekly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_weekly_energy(self) -&gt; None:\n    \"\"\"Build weekly energy history dictionary.\n\n    The data is stored in the `device.state.weekly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastWeekEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.get_yearly_energy","title":"get_yearly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_yearly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build Yearly Energy Dictionary.</p> <p>The data is stored in the <code>device.state.yearly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_yearly_energy(self) -&gt; None:\n    \"\"\"Build Yearly Energy Dictionary.\n\n    The data is stored in the `device.state.yearly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastYearEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.set_nightlight_auto","title":"set_nightlight_auto  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_auto() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Set nightlight to auto mode.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def set_nightlight_auto(self) -&gt; bool:\n    \"\"\"Set nightlight to auto mode.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.AUTO)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.set_nightlight_state","title":"set_nightlight_state  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_state(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Set nightlight mode.</p> <p>Available nightlight states are found in the <code>device.nightlight_modes</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Nightlight mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if nightlight mode set successfully, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def set_nightlight_state(self, mode: str) -&gt; bool:\n    \"\"\"Set nightlight mode.\n\n    Available nightlight states are found in the `device.nightlight_modes` attribute.\n\n    Args:\n        mode (str): Nightlight mode to set.\n\n    Returns:\n        bool: True if nightlight mode set successfully, False otherwise.\n    \"\"\"\n    del mode  # unused\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n    else:\n        logger.debug('Nightlight mode not configured for %s', self.device_name)\n    return False\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    \"\"\"Set timer for device.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Args:\n        duration (int): Duration in seconds.\n        action (str | None): Action to take when timer expires.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del duration\n    del action\n    logger.debug('Not implemented - set_timer')\n    return False\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncoutlet.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.device_status != DeviceStatus.ON\n    toggle_int = 1 if toggle else 0\n    r_dict = await self.call_bypassv2_api(\n        'setProperty', data={'powerSwitch_1': toggle_int}\n    )\n    r = Helpers.process_dev_response(logger, 'toggle_switch', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.device_status = DeviceStatus.ON if toggle else DeviceStatus.OFF\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.turn_off_nightlight","title":"turn_off_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_off_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Turn off nightlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def turn_off_nightlight(self) -&gt; bool:\n    \"\"\"Turn off nightlight if supported.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.OFF)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.turn_on_nightlight","title":"turn_on_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_on_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Turn on nightlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def turn_on_nightlight(self) -&gt; bool:\n    \"\"\"Turn on nightlight if supported.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.ON)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.devices.vesyncoutlet.VeSyncOutletBSDGO1.update_energy","title":"update_energy  <code>async</code>  \u21b2","text":"<pre><code>update_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build weekly, monthly and yearly dictionaries.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def update_energy(self) -&gt; None:\n    \"\"\"Build weekly, monthly and yearly dictionaries.\"\"\"\n    if self.supports_energy:\n        await self.get_weekly_energy()\n        await self.get_monthly_energy()\n        await self.get_yearly_energy()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet","title":"pyvesync.base_devices.outlet_base.VeSyncOutlet \u21b2","text":"<p>               Bases: <code>VeSyncBaseToggleDevice</code></p> <p>Base class for Etekcity Outlets.</p> <p>State is stored in the <code>state</code> attribute of the device. This is only for holding state information and does not contain any methods for controlling the device or retrieving information from the API.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The device details.</p> required <code>manager</code> <code>VeSync</code> <p>The VeSync manager.</p> required <code>feature_map</code> <code>OutletMap</code> <p>The feature map for the device.</p> required <p>Attributes:</p> Name Type Description <code>state</code> <code>OutletState</code> <p>The state of the outlet.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>class VeSyncOutlet(VeSyncBaseToggleDevice):\n    \"\"\"Base class for Etekcity Outlets.\n\n    State is stored in the `state` attribute of the device.\n    This is only for holding state information and does not\n    contain any methods for controlling the device or retrieving\n    information from the API.\n\n    Args:\n        details (ResponseDeviceDetailsModel): The device details.\n        manager (VeSync): The VeSync manager.\n        feature_map (OutletMap): The feature map for the device.\n\n    Attributes:\n        state (OutletState): The state of the outlet.\n        last_response (ResponseInfo): Last response from API call.\n        manager (VeSync): Manager object for API calls.\n        device_name (str): Name of device.\n        device_image (str): URL for device image.\n        cid (str): Device ID.\n        connection_type (str): Connection type of device.\n        device_type (str): Type of device.\n        type (str): Type of device.\n        uuid (str): UUID of device, not always present.\n        config_module (str): Configuration module of device.\n        mac_id (str): MAC ID of device.\n        current_firm_version (str): Current firmware version of device.\n        device_region (str): Region of device. (US, EU, etc.)\n        pid (str): Product ID of device, pulled by some devices on update.\n        sub_device_no (int): Sub-device number of device.\n        product_type (str): Product type of device.\n        features (dict): Features of device.\n    \"\"\"\n\n    def __init__(\n        self, details: ResponseDeviceDetailsModel, manager: VeSync, feature_map: OutletMap\n    ) -&gt; None:\n        \"\"\"Initialize VeSync Outlet base class.\"\"\"\n        super().__init__(details, manager, feature_map)\n        self.state: OutletState = OutletState(self, details, feature_map)\n        self.nightlight_modes = feature_map.nightlight_modes\n\n    def _build_energy_request(self, method: str) -&gt; RequestEnergyHistory:\n        \"\"\"Build energy request post.\"\"\"\n        request_keys = [\n            'acceptLanguage',\n            'accountID',\n            'appVersion',\n            'phoneBrand',\n            'phoneOS',\n            'timeZone',\n            'token',\n            'traceId',\n            'userCountryCode',\n            'debugMode',\n            'homeTimeZone',\n            'uuid',\n        ]\n        body = Helpers.get_class_attributes(DefaultValues, request_keys)\n        body.update(Helpers.get_class_attributes(self.manager, request_keys))\n        body.update(Helpers.get_class_attributes(self, request_keys))\n        body['method'] = method\n        return RequestEnergyHistory.from_dict(body)\n\n    async def _get_energy_history(self, history_interval: str) -&gt; None:\n        \"\"\"Pull energy history from API.\n\n        Args:\n            history_interval (str): The interval for the energy history,\n                options are 'getLastWeekEnergy', 'getLastMonthEnergy', 'getLastYearEnergy'\n\n        Note:\n            Builds the state.&lt;history_interval&gt;_history attribute.\n        \"\"\"\n        if not self.supports_energy:\n            logger.debug('Device does not support energy monitoring.')\n            return\n        history_intervals = [\n            'getLastWeekEnergy',\n            'getLastMonthEnergy',\n            'getLastYearEnergy',\n        ]\n        if history_interval not in history_intervals:\n            logger.debug('Invalid history interval: %s', history_interval)\n            return\n        body = self._build_energy_request(history_interval)\n        headers = Helpers.req_header_bypass()\n        r_bytes, _ = await self.manager.async_call_api(\n            f'/cloud/v1/device/{history_interval}',\n            'post',\n            headers=headers,\n            json_object=body.to_dict(),\n        )\n\n        r = Helpers.process_dev_response(logger, history_interval, self, r_bytes)\n        if r is None:\n            return\n        response = ResponseEnergyHistory.from_dict(r)\n        match history_interval:\n            case 'getLastWeekEnergy':\n                self.state.weekly_history = response.result\n            case 'getLastMonthEnergy':\n                self.state.monthly_history = response.result\n            case 'getLastYearEnergy':\n                self.state.yearly_history = response.result\n\n    @property\n    def supports_nightlight(self) -&gt; bool:\n        \"\"\"Return True if device supports nightlight.\n\n        Returns:\n            bool: True if device supports nightlight, False otherwise.\n        \"\"\"\n        return OutletFeatures.NIGHTLIGHT in self.features\n\n    @property\n    def supports_energy(self) -&gt; bool:\n        \"\"\"Return True if device supports energy.\n\n        Returns:\n            bool: True if device supports energy, False otherwise.\n        \"\"\"\n        return OutletFeatures.ENERGY_MONITOR in self.features\n\n    async def get_weekly_energy(self) -&gt; None:\n        \"\"\"Build weekly energy history dictionary.\n\n        The data is stored in the `device.state.weekly_history` attribute\n        as a `ResponseEnergyResult` object.\n        \"\"\"\n        await self._get_energy_history('getLastWeekEnergy')\n\n    async def get_monthly_energy(self) -&gt; None:\n        \"\"\"Build Monthly Energy History Dictionary.\n\n        The data is stored in the `device.state.monthly_history` attribute\n        as a `ResponseEnergyResult` object.\n        \"\"\"\n        await self._get_energy_history('getLastMonthEnergy')\n\n    async def get_yearly_energy(self) -&gt; None:\n        \"\"\"Build Yearly Energy Dictionary.\n\n        The data is stored in the `device.state.yearly_history` attribute\n        as a `ResponseEnergyResult` object.\n        \"\"\"\n        await self._get_energy_history('getLastYearEnergy')\n\n    async def update_energy(self) -&gt; None:\n        \"\"\"Build weekly, monthly and yearly dictionaries.\"\"\"\n        if self.supports_energy:\n            await self.get_weekly_energy()\n            await self.get_monthly_energy()\n            await self.get_yearly_energy()\n\n    async def set_nightlight_state(self, mode: str) -&gt; bool:\n        \"\"\"Set nightlight mode.\n\n        Available nightlight states are found in the `device.nightlight_modes` attribute.\n\n        Args:\n            mode (str): Nightlight mode to set.\n\n        Returns:\n            bool: True if nightlight mode set successfully, False otherwise.\n        \"\"\"\n        del mode  # unused\n        if not self.supports_nightlight:\n            logger.debug('Device does not support nightlight.')\n        else:\n            logger.debug('Nightlight mode not configured for %s', self.device_name)\n        return False\n\n    async def turn_on_nightlight(self) -&gt; bool:\n        \"\"\"Turn on nightlight if supported.\"\"\"\n        if not self.supports_nightlight:\n            logger.debug('Device does not support nightlight.')\n            return False\n        return await self.set_nightlight_state(NightlightModes.ON)\n\n    async def turn_off_nightlight(self) -&gt; bool:\n        \"\"\"Turn off nightlight if supported.\"\"\"\n        if not self.supports_nightlight:\n            logger.debug('Device does not support nightlight.')\n            return False\n        return await self.set_nightlight_state(NightlightModes.OFF)\n\n    async def set_nightlight_auto(self) -&gt; bool:\n        \"\"\"Set nightlight to auto mode.\"\"\"\n        if not self.supports_nightlight:\n            logger.debug('Device does not support nightlight.')\n            return False\n        return await self.set_nightlight_state(NightlightModes.AUTO)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager = manager\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.nightlight_modes","title":"nightlight_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>nightlight_modes = nightlight_modes\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: OutletState = OutletState(self, details, feature_map)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.supports_energy","title":"supports_energy  <code>property</code>  \u21b2","text":"<pre><code>supports_energy: bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Return True if device supports energy.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if device supports energy, False otherwise.</p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.supports_nightlight","title":"supports_nightlight  <code>property</code>  \u21b2","text":"<pre><code>supports_nightlight: bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Return True if device supports nightlight.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if device supports nightlight, False otherwise.</p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet-functions","title":"Functions\u21b2","text":""},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    \"\"\"Clear timer for device from API.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    logger.debug('Not implemented - clear_timer')\n    return False\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.get_details","title":"get_details  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>@abstractmethod\nasync def get_details(self) -&gt; None:\n    \"\"\"Get device details.\n\n    This method is defined in each device class to contain\n    the logic to pull the device state from the API and update\n    the device's `state` attribute. The `update()` method should\n    be called to update the device state.\n    \"\"\"\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.get_monthly_energy","title":"get_monthly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_monthly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build Monthly Energy History Dictionary.</p> <p>The data is stored in the <code>device.state.monthly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_monthly_energy(self) -&gt; None:\n    \"\"\"Build Monthly Energy History Dictionary.\n\n    The data is stored in the `device.state.monthly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastMonthEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    \"\"\"Get timer for device from API and set the `state.Timer` attribute.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Note:\n        This method may not be implemented for all devices. Please\n        open an issue if there is an error.\n    \"\"\"\n    logger.debug('Not implemented - get_timer')\n    return None\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.get_weekly_energy","title":"get_weekly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_weekly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build weekly energy history dictionary.</p> <p>The data is stored in the <code>device.state.weekly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_weekly_energy(self) -&gt; None:\n    \"\"\"Build weekly energy history dictionary.\n\n    The data is stored in the `device.state.weekly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastWeekEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.get_yearly_energy","title":"get_yearly_energy  <code>async</code>  \u21b2","text":"<pre><code>get_yearly_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build Yearly Energy Dictionary.</p> <p>The data is stored in the <code>device.state.yearly_history</code> attribute as a <code>ResponseEnergyResult</code> object.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def get_yearly_energy(self) -&gt; None:\n    \"\"\"Build Yearly Energy Dictionary.\n\n    The data is stored in the `device.state.yearly_history` attribute\n    as a `ResponseEnergyResult` object.\n    \"\"\"\n    await self._get_energy_history('getLastYearEnergy')\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.set_nightlight_auto","title":"set_nightlight_auto  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_auto() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Set nightlight to auto mode.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def set_nightlight_auto(self) -&gt; bool:\n    \"\"\"Set nightlight to auto mode.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.AUTO)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.set_nightlight_state","title":"set_nightlight_state  <code>async</code>  \u21b2","text":"<pre><code>set_nightlight_state(mode: str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Set nightlight mode.</p> <p>Available nightlight states are found in the <code>device.nightlight_modes</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Nightlight mode to set.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if nightlight mode set successfully, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def set_nightlight_state(self, mode: str) -&gt; bool:\n    \"\"\"Set nightlight mode.\n\n    Available nightlight states are found in the `device.nightlight_modes` attribute.\n\n    Args:\n        mode (str): Nightlight mode to set.\n\n    Returns:\n        bool: True if nightlight mode set successfully, False otherwise.\n    \"\"\"\n    del mode  # unused\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n    else:\n        logger.debug('Nightlight mode not configured for %s', self.device_name)\n    return False\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    \"\"\"Set timer for device.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Args:\n        duration (int): Duration in seconds.\n        action (str | None): Action to take when timer expires.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del duration\n    del action\n    logger.debug('Not implemented - set_timer')\n    return False\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.toggle_switch","title":"toggle_switch  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>@abstractmethod\nasync def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Toggle device power on or off.\n\n    Args:\n        toggle (bool | None): True to turn on, False to turn off, None to toggle.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.turn_off_nightlight","title":"turn_off_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_off_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Turn off nightlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def turn_off_nightlight(self) -&gt; bool:\n    \"\"\"Turn off nightlight if supported.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.OFF)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.turn_on_nightlight","title":"turn_on_nightlight  <code>async</code>  \u21b2","text":"<pre><code>turn_on_nightlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Turn on nightlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def turn_on_nightlight(self) -&gt; bool:\n    \"\"\"Turn on nightlight if supported.\"\"\"\n    if not self.supports_nightlight:\n        logger.debug('Device does not support nightlight.')\n        return False\n    return await self.set_nightlight_state(NightlightModes.ON)\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/outlets/#pyvesync.base_devices.outlet_base.VeSyncOutlet.update_energy","title":"update_energy  <code>async</code>  \u21b2","text":"<pre><code>update_energy() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncOutlet</code></p> <p>Build weekly, monthly and yearly dictionaries.</p> Source code in <code>src\\pyvesync\\base_devices\\outlet_base.py</code> <pre><code>async def update_energy(self) -&gt; None:\n    \"\"\"Build weekly, monthly and yearly dictionaries.\"\"\"\n    if self.supports_energy:\n        await self.get_weekly_energy()\n        await self.get_monthly_energy()\n        await self.get_yearly_energy()\n</code></pre>"},{"location":"devices/switches/","title":"Documentation for Etekcity Smart Switches \u21b2","text":""},{"location":"devices/switches/#contents","title":"Contents\u21b2","text":"<p>See each device class for available attributes and methods:</p> <ul> <li>SwitchState Class</li> <li>Etekcity Dimmer Switch EWD16</li> <li>Etekcity Wall Switch ESWL01 &amp; ESWL03</li> <li>VeSyncSwitch Abstract Base Class</li> </ul>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState","title":"pyvesync.base_devices.switch_base.SwitchState \u21b2","text":"<pre><code>SwitchState(\n    device: VeSyncSwitch,\n    details: ResponseDeviceDetailsModel,\n    feature_map: SwitchMap,\n)\n</code></pre> <p>               Bases: <code>DeviceState</code></p> <p>VeSync Switch State Base.</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>VeSyncSwitch</code> <p>The switch device.</p> required <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The switch device details.</p> required <code>feature_map</code> <code>SwitchMap</code> <p>The switch feature map.</p> required <p>Attributes:</p> Name Type Description <code>_exclude_serialization</code> <code>list[str]</code> <p>List of attributes to exclude from serialization.</p> <code>active_time</code> <code>int</code> <p>Active time of device, defaults to None.</p> <code>connection_status</code> <code>str</code> <p>Connection status of device.</p> <code>device</code> <code>VeSyncBaseDevice</code> <p>Device object.</p> <code>device_status</code> <code>str</code> <p>Device status.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <code>last_update_ts</code> <code>int</code> <p>Last update timestamp of device, defaults to None.</p> <code>backlight_color</code> <code>Color</code> <p>The backlight color of the switch.</p> <code>brightness</code> <code>int</code> <p>The brightness level of the switch.</p> <code>backlight_status</code> <code>str</code> <p>The status of the backlight.</p> <code>indicator_status</code> <code>str</code> <p>The status of the indicator light.</p> <p>Inherited From <code>DeviceState</code></p> <p>Initialize device state.</p> <p>Initialize VeSync Switch State.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>def __init__(\n    self,\n    device: VeSyncSwitch,\n    details: ResponseDeviceDetailsModel,\n    feature_map: SwitchMap,\n) -&gt; None:\n    \"\"\"Initialize VeSync Switch State.\"\"\"\n    super().__init__(device, details, feature_map)\n    self.device: VeSyncSwitch = device\n    self._backlight_color: Color | None = None\n    self.brightness: int | None = None\n    self.active_time: int | None = 0\n    self.backlight_status: str | None = None\n    self.indicator_status: str | None = None\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.active_time","title":"active_time  <code>instance-attribute</code>  \u21b2","text":"<pre><code>active_time: int | None = 0\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.backlight_color","title":"backlight_color  <code>property</code> <code>writable</code>  \u21b2","text":"<pre><code>backlight_color: Color | None\n</code></pre> <p>Get backlight color.</p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.backlight_hsv","title":"backlight_hsv  <code>property</code>  \u21b2","text":"<pre><code>backlight_hsv: HSV | None\n</code></pre> <p>Get backlight HSV color.</p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.backlight_rgb","title":"backlight_rgb  <code>property</code>  \u21b2","text":"<pre><code>backlight_rgb: RGB | None\n</code></pre> <p>Get backlight RGB color.</p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.backlight_status","title":"backlight_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>backlight_status: str | None = None\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.brightness","title":"brightness  <code>instance-attribute</code>  \u21b2","text":"<pre><code>brightness: int | None = None\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.connection_status","title":"connection_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_status: str = connectionStatus or UNKNOWN\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.device","title":"device  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device: VeSyncSwitch = device\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.device_status","title":"device_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_status: str = deviceStatus or UNKNOWN\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features = features\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.indicator_status","title":"indicator_status  <code>instance-attribute</code>  \u21b2","text":"<pre><code>indicator_status: str | None = None\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.last_update_ts","title":"last_update_ts  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_update_ts: int | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.timer","title":"timer  <code>instance-attribute</code>  \u21b2","text":"<pre><code>timer: Timer | None = None\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState-functions","title":"Functions\u21b2","text":""},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.as_tuple","title":"as_tuple \u21b2","text":"<pre><code>as_tuple() -&gt; tuple[tuple[str, Any], ...]\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to tuple of (name, value) tuples.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def as_tuple(self) -&gt; tuple[tuple[str, Any], ...]:\n    \"\"\"Convert state to tuple of (name, value) tuples.\"\"\"\n    return tuple((k, v) for k, v in self._serialize().items())\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.display","title":"display \u21b2","text":"<pre><code>display() -&gt; None\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Print formatted state to stdout.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self) -&gt; None:\n    \"\"\"Print formatted state to stdout.\"\"\"\n    for name, val in self._serialize().items():\n        print(f'{name:.&lt;30} {val}')  # noqa: T201\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to dictionary.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Convert state to dictionary.\"\"\"\n    return self._serialize()\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(indent: bool = False) -&gt; str\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Dump state to JSON string.</p> <p>Parameters:</p> Name Type Description Default <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device state.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, indent: bool = False) -&gt; str:\n    \"\"\"Dump state to JSON string.\n\n    Args:\n        indent (bool): If True, indent JSON output, defaults to False.\n\n    Returns:\n        str: JSON formatted string of device state.\n    \"\"\"\n    return self.to_jsonb(indent=indent).decode()\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(indent: bool = False) -&gt; bytes\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Convert state to JSON bytes.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, indent: bool = False) -&gt; bytes:\n    \"\"\"Convert state to JSON bytes.\"\"\"\n    if indent:\n        return orjson.dumps(\n            self._serialize(), option=orjson.OPT_NON_STR_KEYS | orjson.OPT_INDENT_2\n        )\n    return orjson.dumps(self._serialize(), option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.SwitchState.update_ts","title":"update_ts \u21b2","text":"<pre><code>update_ts() -&gt; None\n</code></pre> <p>Inherited From <code>DeviceState</code></p> <p>Update last update timestamp as UTC timestamp.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def update_ts(self) -&gt; None:\n    \"\"\"Update last update timestamp as UTC timestamp.\"\"\"\n    self.last_update_ts = int(dt.now(tz=UTC).timestamp())\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch","title":"pyvesync.devices.vesyncswitch.VeSyncWallSwitch \u21b2","text":"<pre><code>VeSyncWallSwitch(\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: SwitchMap,\n)\n</code></pre> <p>               Bases: <code>BypassV1Mixin</code>, <code>VeSyncSwitch</code></p> <p>Etekcity standard wall switch.</p> <p>Inherits from the BypassV1Mixin and VeSyncSwitch classes.</p> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Initialize VeSync device base class.</p> <p>Initialize Switch Base Class.</p> <p>Initialize Etekcity Wall Switch class.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The device details.</p> required <code>manager</code> <code>VeSync</code> <p>The VeSync manager.</p> required <code>feature_map</code> <code>SwitchMap</code> <p>The feature map for the device.</p> required Source code in <code>src\\pyvesync\\devices\\vesyncswitch.py</code> <pre><code>def __init__(\n    self, details: ResponseDeviceDetailsModel, manager: VeSync, feature_map: SwitchMap\n) -&gt; None:\n    \"\"\"Initialize Etekcity Wall Switch class.\n\n    Args:\n        details (ResponseDeviceDetailsModel): The device details.\n        manager (VeSync): The VeSync manager.\n        feature_map (SwitchMap): The feature map for the device.\n    \"\"\"\n    super().__init__(details, manager, feature_map)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.is_dimmable","title":"is_dimmable  <code>property</code>  \u21b2","text":"<pre><code>is_dimmable: bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Return True if switch is dimmable.</p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'uuid',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: SwitchState = SwitchState(self, details, feature_map)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.supports_backlight","title":"supports_backlight  <code>property</code>  \u21b2","text":"<pre><code>supports_backlight: bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Return True if switch supports backlight.</p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.supports_backlight_color","title":"supports_backlight_color  <code>property</code>  \u21b2","text":"<pre><code>supports_backlight_color: bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Return True if switch supports backlight.</p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.supports_dimmable","title":"supports_dimmable  <code>property</code>  \u21b2","text":"<pre><code>supports_dimmable: bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Return True if switch is dimmable.</p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.supports_indicator_light","title":"supports_indicator_light  <code>property</code>  \u21b2","text":"<pre><code>supports_indicator_light: bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Return True if switch supports indicator.</p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch-functions","title":"Functions\u21b2","text":""},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.call_bypassv1_api","title":"call_bypassv1_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv1_api(\n    request_model: type[RequestBypassV1],\n    update_dict: dict | None = None,\n    method: str = 'bypass',\n    endpoint: str = 'bypass',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p> <p>Send ByPass V1 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V1 API. The endpoint can be overridden with the <code>endpoint</code> argument.</p> <p>Parameters:</p> Name Type Description Default <code>request_model</code> <code>type[RequestBypassV1]</code> <p>The request model to use.</p> required <code>update_dict</code> <code>dict</code> <p>Additional keys to add on.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypass'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the url path, defaults to <code>bypass</code>, e.g. <code>/cloud/v1/deviceManaged/bypass</code>.</p> <code>'bypass'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv1_api(\n    self,\n    request_model: type[RequestBypassV1],\n    update_dict: dict | None = None,\n    method: str = 'bypass',\n    endpoint: str = 'bypass',\n) -&gt; dict | None:\n    \"\"\"Send ByPass V1 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V1 API.\n    The endpoint can be overridden with the `endpoint` argument.\n\n    Args:\n        request_model (type[RequestBypassV1]): The request model to use.\n        update_dict (dict): Additional keys to add on.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the url path, defaults to\n            `bypass`, e.g. `/cloud/v1/deviceManaged/bypass`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(request_model, update_dict, method)\n    url_path = BYPASS_V1_PATH + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        url_path, 'post', request, Helpers.req_header_bypass()\n    )\n\n    return resp_dict\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncswitch.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    if self.state.timer is None:\n        _LOGGER.warning('No timer set, run get_timer() first.')\n        return False\n    update_dict = {\n        'timerId': str(self.state.timer.id),\n    }\n    r_dict = await self.call_bypassv1_api(\n        TimerModels.RequestV1ClearTimer,\n        update_dict,\n        method='deleteTimer',\n        endpoint='timer/deleteTimer',\n    )\n    if r_dict is None:\n        return False\n    result = Helpers.process_dev_response(_LOGGER, 'clear_timer', self, r_dict)\n    if result is None:\n        return False\n    self.state.timer = None\n    return True\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\devices\\vesyncswitch.py</code> <pre><code>async def get_details(self) -&gt; None:\n    r_dict = await self.call_bypassv1_api(\n        RequestBypassV1, method='deviceDetail', endpoint='deviceDetail'\n    )\n\n    r = Helpers.process_dev_response(_LOGGER, 'get_details', self, r_dict)\n    if r is None:\n        return\n    resp_model = Helpers.model_maker(\n        _LOGGER, switch_models.ResponseSwitchDetails, 'get_details', r, self\n    )\n    if resp_model is None:\n        return\n    result = resp_model.result\n    if not isinstance(result, switch_models.InternalSwitchResult):\n        _LOGGER.warning('Invalid response model for switch details')\n        return\n    self.state.device_status = result.deviceStatus\n    self.state.active_time = result.activeTime\n    self.state.connection_status = result.connectionStatus\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\devices\\vesyncswitch.py</code> <pre><code>async def get_timer(self) -&gt; None:\n    r_dict = await self.call_bypassv1_api(\n        TimerModels.RequestV1GetTimer, method='getTimers', endpoint='timer/getTimers'\n    )\n    if r_dict is None:\n        return\n    result_model = process_bypassv1_result(\n        self, _LOGGER, 'get_timer', r_dict, TimerModels.ResultV1GetTimer\n    )\n    if result_model is None:\n        return\n\n    timers = result_model.timers\n    if not isinstance(timers, list) or len(timers) == 0:\n        _LOGGER.debug('No timers found')\n        return\n    if len(timers) &gt; 1:\n        _LOGGER.debug('More than one timer found, using first timer')\n    timer = timers[0]\n    if not isinstance(timer, TimerModels.TimerItemV1):\n        _LOGGER.warning('Invalid timer model')\n        return\n    self.state.timer = Timer(\n        int(timer.counterTimer),\n        action=timer.action,\n        id=int(timer.timerID),\n    )\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.set_backlight_color","title":"set_backlight_color  <code>async</code>  \u21b2","text":"<pre><code>set_backlight_color(\n    red: int, green: int, blue: int\n) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Set the color of the backlight using RGB.</p> <p>Parameters:</p> Name Type Description Default <code>red</code> <code>int</code> <p>Red value (0-255).</p> required <code>green</code> <code>int</code> <p>Green value (0-255).</p> required <code>blue</code> <code>int</code> <p>Blue value (0-255).</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def set_backlight_color(self, red: int, green: int, blue: int) -&gt; bool:\n    \"\"\"Set the color of the backlight using RGB.\n\n    Args:\n        red (int): Red value (0-255).\n        green (int): Green value (0-255).\n        blue (int): Blue value (0-255).\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    return await self.set_backlight_status(True, red=red, green=green, blue=blue)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.set_backlight_status","title":"set_backlight_status  <code>async</code>  \u21b2","text":"<pre><code>set_backlight_status(\n    status: bool,\n    red: int | None = None,\n    green: int | None = None,\n    blue: int | None = None,\n) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Set the backlight status and optionally its color if supported by the device.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>bool</code> <p>Backlight status (True for ON, False for OFF).</p> required <code>red</code> <code>int | None</code> <p>RGB green value (0-255), defaults to None.</p> <code>None</code> <code>green</code> <code>int | None</code> <p>RGB green value (0-255), defaults to None.</p> <code>None</code> <code>blue</code> <code>int | None</code> <p>RGB blue value (0-255), defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def set_backlight_status(\n    self,\n    status: bool,\n    red: int | None = None,\n    green: int | None = None,\n    blue: int | None = None,\n) -&gt; bool:\n    \"\"\"Set the backlight status and optionally its color if supported by the device.\n\n    Args:\n        status (bool): Backlight status (True for ON, False for OFF).\n        red (int | None): RGB green value (0-255), defaults to None.\n        green (int | None): RGB green value (0-255), defaults to None.\n        blue (int | None): RGB blue value (0-255), defaults to None.\n\n    Returns:\n        bool: True if successful, False otherwise.\n\n    \"\"\"\n    del status, red, green, blue\n    if self.supports_backlight:\n        logger.debug('set_backlight_status not configured for %s', self.device_name)\n    else:\n        logger.debug('set_backlight_status not supported for %s', self.device_name)\n    return False\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.set_brightness","title":"set_brightness  <code>async</code>  \u21b2","text":"<pre><code>set_brightness(brightness: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Set the brightness of the switch if supported.</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <code>int</code> <p>Brightness value (0-100).</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def set_brightness(self, brightness: int) -&gt; bool:\n    \"\"\"Set the brightness of the switch if supported.\n\n    Args:\n        brightness (int): Brightness value (0-100).\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del brightness\n    if self.supports_dimmable:\n        logger.debug('set_brightness not configured for %s', self.device_name)\n    else:\n        logger.debug('set_brightness not supported for %s', self.device_name)\n    return False\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncswitch.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    if action is None:\n        action = (\n            DeviceStatus.ON\n            if self.state.device_status == DeviceStatus.OFF\n            else DeviceStatus.OFF\n        )\n    if action not in [DeviceStatus.ON, DeviceStatus.OFF]:\n        _LOGGER.warning('Invalid action for timer - on/off')\n        return False\n    update_dict = {\n        'action': action,\n        'counterTime': str(duration),\n    }\n    r_dict = await self.call_bypassv1_api(\n        TimerModels.RequestV1SetTime,\n        update_dict,\n        method='addTimer',\n        endpoint='timer/addTimer',\n    )\n    if r_dict is None:\n        return False\n    result_model = process_bypassv1_result(\n        self, _LOGGER, 'set_timer', r_dict, TimerModels.ResultV1SetTimer\n    )\n    if result_model is None:\n        return False\n    self.state.timer = Timer(\n        int(duration),\n        action=action,\n        id=int(result_model.timerID),\n    )\n    return True\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.toggle_indicator_light","title":"toggle_indicator_light  <code>async</code>  \u21b2","text":"<pre><code>toggle_indicator_light(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Toggle indicator light on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>True to turn on, False to turn off. If None, toggles the state</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def toggle_indicator_light(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Toggle indicator light on or off.\n\n    Args:\n        toggle (bool): True to turn on, False to turn off. If None, toggles the state\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del toggle\n    if self.supports_indicator_light:\n        logger.debug('toggle_indicator_light not configured for %s', self.device_name)\n    else:\n        logger.debug('toggle_indicator_light not supported for %s', self.device_name)\n    return False\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> <p>Toggle switch device.</p> Source code in <code>src\\pyvesync\\devices\\vesyncswitch.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Toggle switch device.\"\"\"\n    if toggle is None:\n        toggle = self.state.device_status != DeviceStatus.ON\n    toggle_str = DeviceStatus.from_bool(toggle)\n\n    r_dict = await self.call_bypassv1_api(\n        switch_models.RequestSwitchStatus,\n        {'status': toggle_str, 'switchNo': 0},\n        'deviceStatus',\n        'deviceStatus',\n    )\n\n    r = Helpers.process_dev_response(_LOGGER, 'get_details', self, r_dict)\n    if r is None:\n        return False\n\n    self.state.device_status = DeviceStatus.from_bool(toggle)\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.turn_indicator_light_off","title":"turn_indicator_light_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>turn_indicator_light_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> Deprecated <p>Use <code>turn_off_indicator_light</code> instead.</p> <p>Deprecated - use turn_off_indicator_light.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>@deprecated('Use `turn_off_indicator_light` instead.')\nasync def turn_indicator_light_off(self) -&gt; bool:\n    \"\"\"Deprecated - use turn_off_indicator_light.\"\"\"\n    return await self.toggle_indicator_light(False)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.turn_indicator_light_on","title":"turn_indicator_light_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>turn_indicator_light_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> Deprecated <p>Use <code>turn_on_indicator_light</code> instead.</p> <p>Deprecated - use turn_on_indicator_light.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>@deprecated('Use `turn_on_indicator_light` instead.')\nasync def turn_indicator_light_on(self) -&gt; bool:\n    \"\"\"Deprecated - use turn_on_indicator_light.\"\"\"\n    return await self.toggle_indicator_light(True)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.turn_off_indicator_light","title":"turn_off_indicator_light  <code>async</code>  \u21b2","text":"<pre><code>turn_off_indicator_light() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Turn off indicator light if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def turn_off_indicator_light(self) -&gt; bool:\n    \"\"\"Turn off indicator light if supported.\"\"\"\n    return await self.toggle_indicator_light(False)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.turn_off_rgb_backlight","title":"turn_off_rgb_backlight  <code>async</code>  \u21b2","text":"<pre><code>turn_off_rgb_backlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Turn off backlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def turn_off_rgb_backlight(self) -&gt; bool:\n    \"\"\"Turn off backlight if supported.\"\"\"\n    return await self.set_backlight_status(False)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.turn_on_indicator_light","title":"turn_on_indicator_light  <code>async</code>  \u21b2","text":"<pre><code>turn_on_indicator_light() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Turn on indicator light if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def turn_on_indicator_light(self) -&gt; bool:\n    \"\"\"Turn on indicator light if supported.\"\"\"\n    return await self.toggle_indicator_light(True)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.turn_on_rgb_backlight","title":"turn_on_rgb_backlight  <code>async</code>  \u21b2","text":"<pre><code>turn_on_rgb_backlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Turn on backlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def turn_on_rgb_backlight(self) -&gt; bool:\n    \"\"\"Turn on backlight if supported.\"\"\"\n    return await self.set_backlight_status(True)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.turn_rgb_backlight_off","title":"turn_rgb_backlight_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>turn_rgb_backlight_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> Deprecated <p>Use <code>turn_off_rgb_backlight()</code> instead.</p> <p>Turn off RGB backlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>@deprecated('Use `turn_off_rgb_backlight()` instead.')\nasync def turn_rgb_backlight_off(self) -&gt; bool:\n    \"\"\"Turn off RGB backlight if supported.\"\"\"\n    return await self.set_backlight_status(False)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.turn_rgb_backlight_on","title":"turn_rgb_backlight_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>turn_rgb_backlight_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> Deprecated <p>Use <code>turn_on_rgb_backlight()</code> instead.</p> <p>Turn on RGB backlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>@deprecated('Use `turn_on_rgb_backlight()` instead.')\nasync def turn_rgb_backlight_on(self) -&gt; bool:\n    \"\"\"Turn on RGB backlight if supported.\"\"\"\n    return await self.set_backlight_status(True)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncWallSwitch.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch","title":"pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch \u21b2","text":"<pre><code>VeSyncDimmerSwitch(\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: SwitchMap,\n)\n</code></pre> <p>               Bases: <code>BypassV1Mixin</code>, <code>VeSyncSwitch</code></p> <p>Vesync Dimmer Switch Class with RGB Faceplate.</p> <p>Inherits from the BypassV1Mixin and VeSyncSwitch classes.</p> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Initialize VeSync device base class.</p> <p>Initialize Switch Base Class.</p> <p>Initialize dimmer switch class.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The device details.</p> required <code>manager</code> <code>VeSync</code> <p>The VeSync manager.</p> required <code>feature_map</code> <code>SwitchMap</code> <p>The feature map for the device.</p> required Source code in <code>src\\pyvesync\\devices\\vesyncswitch.py</code> <pre><code>def __init__(\n    self, details: ResponseDeviceDetailsModel, manager: VeSync, feature_map: SwitchMap\n) -&gt; None:\n    \"\"\"Initialize dimmer switch class.\n\n    Args:\n        details (ResponseDeviceDetailsModel): The device details.\n        manager (VeSync): The VeSync manager.\n        feature_map (SwitchMap): The feature map for the device.\n    \"\"\"\n    super().__init__(details, manager, feature_map)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.is_dimmable","title":"is_dimmable  <code>property</code>  \u21b2","text":"<pre><code>is_dimmable: bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Return True if switch is dimmable.</p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager: VeSync\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.request_keys","title":"request_keys  <code>class-attribute</code>  \u21b2","text":"<pre><code>request_keys: list[str] = [\n    'acceptLanguage',\n    'appVersion',\n    'phoneBrand',\n    'phoneOS',\n    'accountID',\n    'cid',\n    'configModule',\n    'debugMode',\n    'traceId',\n    'timeZone',\n    'token',\n    'userCountryCode',\n    'uuid',\n    'configModel',\n    'deviceId',\n]\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: SwitchState = SwitchState(self, details, feature_map)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.supports_backlight","title":"supports_backlight  <code>property</code>  \u21b2","text":"<pre><code>supports_backlight: bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Return True if switch supports backlight.</p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.supports_backlight_color","title":"supports_backlight_color  <code>property</code>  \u21b2","text":"<pre><code>supports_backlight_color: bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Return True if switch supports backlight.</p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.supports_dimmable","title":"supports_dimmable  <code>property</code>  \u21b2","text":"<pre><code>supports_dimmable: bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Return True if switch is dimmable.</p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.supports_indicator_light","title":"supports_indicator_light  <code>property</code>  \u21b2","text":"<pre><code>supports_indicator_light: bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Return True if switch supports indicator.</p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch-functions","title":"Functions\u21b2","text":""},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.call_bypassv1_api","title":"call_bypassv1_api  <code>async</code>  \u21b2","text":"<pre><code>call_bypassv1_api(\n    request_model: type[RequestBypassV1],\n    update_dict: dict | None = None,\n    method: str = 'bypass',\n    endpoint: str = 'bypass',\n) -&gt; dict | None\n</code></pre> <p>Inherited From <code>BypassV1Mixin</code></p> <p>Send ByPass V1 API request.</p> <p>This uses the <code>_build_request</code> method to send API requests to the Bypass V1 API. The endpoint can be overridden with the <code>endpoint</code> argument.</p> <p>Parameters:</p> Name Type Description Default <code>request_model</code> <code>type[RequestBypassV1]</code> <p>The request model to use.</p> required <code>update_dict</code> <code>dict</code> <p>Additional keys to add on.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use in the outer body.</p> <code>'bypass'</code> <code>endpoint</code> <code>str | None</code> <p>The last part of the url path, defaults to <code>bypass</code>, e.g. <code>/cloud/v1/deviceManaged/bypass</code>.</p> <code>'bypass'</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>dict | None</code> <p>The response from the API request.</p> Source code in <code>src\\pyvesync\\utils\\device_mixins.py</code> <pre><code>async def call_bypassv1_api(\n    self,\n    request_model: type[RequestBypassV1],\n    update_dict: dict | None = None,\n    method: str = 'bypass',\n    endpoint: str = 'bypass',\n) -&gt; dict | None:\n    \"\"\"Send ByPass V1 API request.\n\n    This uses the `_build_request` method to send API requests to the Bypass V1 API.\n    The endpoint can be overridden with the `endpoint` argument.\n\n    Args:\n        request_model (type[RequestBypassV1]): The request model to use.\n        update_dict (dict): Additional keys to add on.\n        method (str): The method to use in the outer body.\n        endpoint (str | None): The last part of the url path, defaults to\n            `bypass`, e.g. `/cloud/v1/deviceManaged/bypass`.\n\n    Returns:\n        bytes: The response from the API request.\n    \"\"\"\n    request = self._build_request(request_model, update_dict, method)\n    url_path = BYPASS_V1_PATH + endpoint\n    resp_dict, _ = await self.manager.async_call_api(\n        url_path, 'post', request, Helpers.req_header_bypass()\n    )\n\n    return resp_dict\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncswitch.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    if self.state.timer is None:\n        _LOGGER.debug('No timer set, run get_timer() first.')\n        return False\n    update_dict = {'timerId': str(self.state.timer.id), 'status': '1'}\n    r_dict = await self.call_bypassv1_api(\n        TimerModels.RequestV1ClearTimer,\n        update_dict,\n        method='deleteTimer',\n        endpoint='timer/deleteTimer',\n    )\n    result = Helpers.process_dev_response(_LOGGER, 'clear_timer', self, r_dict)\n    if result is None:\n        return False\n    self.state.timer = None\n    return True\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.get_details","title":"get_details  <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\devices\\vesyncswitch.py</code> <pre><code>async def get_details(self) -&gt; None:\n    r_bytes = await self.call_bypassv1_api(\n        switch_models.RequestDimmerDetails,\n        method='deviceDetail',\n        endpoint='deviceDetail',\n    )\n\n    r = Helpers.process_dev_response(_LOGGER, 'get_details', self, r_bytes)\n    if r is None:\n        return\n\n    resp_model = Helpers.model_maker(\n        _LOGGER, switch_models.ResponseSwitchDetails, 'set_timer', r, self\n    )\n    if resp_model is None:\n        return\n    result = resp_model.result\n    if not isinstance(result, switch_models.InternalDimmerDetailsResult):\n        _LOGGER.warning('Invalid response model for dimmer details')\n        return\n    self.state.active_time = result.activeTime\n    self.state.connection_status = result.connectionStatus\n    self.state.brightness = result.brightness\n    self.state.backlight_status = result.rgbStatus\n    new_color = result.rgbValue\n    if isinstance(new_color, switch_models.DimmerRGB):\n        self.state.backlight_color = Color.from_rgb(\n            new_color.red, new_color.green, new_color.blue\n        )\n    self.state.indicator_status = result.indicatorlightStatus\n    self.state.device_status = result.deviceStatus\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\devices\\vesyncswitch.py</code> <pre><code>async def get_timer(self) -&gt; None:\n    r_dict = await self.call_bypassv1_api(\n        TimerModels.RequestV1GetTimer, method='getTimers', endpoint='timer/getTimers'\n    )\n    result_model = process_bypassv1_result(\n        self, _LOGGER, 'get_timer', r_dict, TimerModels.ResultV1GetTimer\n    )\n    if result_model is None:\n        return\n    timers = result_model.timers\n    if not isinstance(timers, list) or len(timers) == 0:\n        _LOGGER.info('No timers found')\n        return\n    if len(timers) &gt; 1:\n        _LOGGER.debug('More than one timer found, using first timer')\n    timer = timers[0]\n    if not isinstance(timer, TimerModels.TimeItemV1):\n        _LOGGER.warning('Invalid timer model')\n        return\n    self.state.timer = Timer(\n        int(timer.counterTime),\n        action=timer.action,\n        id=int(timer.timerID),\n    )\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.set_backlight_color","title":"set_backlight_color  <code>async</code>  \u21b2","text":"<pre><code>set_backlight_color(\n    red: int, green: int, blue: int\n) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Set the color of the backlight using RGB.</p> <p>Parameters:</p> Name Type Description Default <code>red</code> <code>int</code> <p>Red value (0-255).</p> required <code>green</code> <code>int</code> <p>Green value (0-255).</p> required <code>blue</code> <code>int</code> <p>Blue value (0-255).</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def set_backlight_color(self, red: int, green: int, blue: int) -&gt; bool:\n    \"\"\"Set the color of the backlight using RGB.\n\n    Args:\n        red (int): Red value (0-255).\n        green (int): Green value (0-255).\n        blue (int): Blue value (0-255).\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    return await self.set_backlight_status(True, red=red, green=green, blue=blue)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.set_backlight_status","title":"set_backlight_status  <code>async</code>  \u21b2","text":"<pre><code>set_backlight_status(\n    status: bool,\n    red: int | None = None,\n    green: int | None = None,\n    blue: int | None = None,\n) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Set the backlight status and optionally its color if supported by the device.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>bool</code> <p>Backlight status (True for ON, False for OFF).</p> required <code>red</code> <code>int | None</code> <p>RGB green value (0-255), defaults to None.</p> <code>None</code> <code>green</code> <code>int | None</code> <p>RGB green value (0-255), defaults to None.</p> <code>None</code> <code>blue</code> <code>int | None</code> <p>RGB blue value (0-255), defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncswitch.py</code> <pre><code>async def set_backlight_status(\n    self,\n    status: bool,\n    red: int | None = None,\n    green: int | None = None,\n    blue: int | None = None,\n) -&gt; bool:\n    if red is not None and blue is not None and green is not None:\n        new_color = Color.from_rgb(red, green, blue)\n    else:\n        new_color = None\n    status_str = DeviceStatus.from_bool(status)\n\n    update_dict: dict[str, str | dict] = {'status': status_str.value}\n    if new_color is not None:\n        update_dict['rgbValue'] = asdict(new_color.rgb)\n    r_bytes = await self.call_bypassv1_api(\n        switch_models.RequestDimmerStatus,\n        update_dict,\n        'dimmerRgbValueCtl',\n        'dimmerRgbValueCtl',\n    )\n\n    r = Helpers.process_dev_response(_LOGGER, 'set_rgb_backlight', self, r_bytes)\n    if r is None:\n        return False\n\n    self.state.backlight_status = status_str\n    if new_color is not None:\n        self.state.backlight_color = new_color\n    self.state.backlight_status = status_str\n    self.state.device_status = DeviceStatus.ON\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.set_brightness","title":"set_brightness  <code>async</code>  \u21b2","text":"<pre><code>set_brightness(brightness: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Set the brightness of the switch if supported.</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <code>int</code> <p>Brightness value (0-100).</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> <p>Set brightness of dimmer - 1 - 100.</p> Source code in <code>src\\pyvesync\\devices\\vesyncswitch.py</code> <pre><code>async def set_brightness(self, brightness: int) -&gt; bool:\n    \"\"\"Set brightness of dimmer - 1 - 100.\"\"\"\n    if not Validators.validate_zero_to_hundred(brightness):\n        _LOGGER.warning('Invalid brightness - must be between 0 and 100')\n        return False\n\n    r_bytes = await self.call_bypassv1_api(\n        switch_models.RequestDimmerBrightness,\n        {'brightness': brightness},\n        'dimmerBrightnessCtl',\n        'dimmerBrightnessCtl',\n    )\n\n    r = Helpers.process_dev_response(_LOGGER, 'get_details', self, r_bytes)\n    if r is None:\n        return False\n\n    self.state.brightness = brightness\n    self.state.device_status = DeviceStatus.ON\n    self.state.connection_status = ConnectionStatus.ONLINE\n    return True\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncswitch.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    if action is None:\n        action = (\n            DeviceStatus.ON\n            if self.state.device_status == DeviceStatus.OFF\n            else DeviceStatus.OFF\n        )\n    if action not in [DeviceStatus.ON, DeviceStatus.OFF]:\n        _LOGGER.warning('Invalid action for timer - on/off')\n        return False\n    update_dict = {'action': action, 'counterTime': str(duration), 'status': '1'}\n    r_dict = await self.call_bypassv1_api(\n        TimerModels.RequestV1SetTime,\n        update_dict,\n        method='addTimer',\n        endpoint='timer/addTimer',\n    )\n    result_model = process_bypassv1_result(\n        self, _LOGGER, 'set_timer', r_dict, TimerModels.ResultV1SetTimer\n    )\n    if result_model is None:\n        return False\n    self.state.timer = Timer(\n        int(duration),\n        action=action,\n        id=int(result_model.timerID),\n    )\n    return True\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.switch_toggle","title":"switch_toggle  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>switch_toggle(status: str) -&gt; bool\n</code></pre> Deprecated <p>switch_toggle() deprecated, use toggle_switch(toggle: bool | None)</p> <p>Toggle switch status.</p> Source code in <code>src\\pyvesync\\devices\\vesyncswitch.py</code> <pre><code>@deprecated('switch_toggle() deprecated, use toggle_switch(toggle: bool | None)')\nasync def switch_toggle(self, status: str) -&gt; bool:\n    \"\"\"Toggle switch status.\"\"\"\n    return await self.toggle_switch(status == DeviceStatus.ON)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.toggle_indicator_light","title":"toggle_indicator_light  <code>async</code>  \u21b2","text":"<pre><code>toggle_indicator_light(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Toggle indicator light on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>True to turn on, False to turn off. If None, toggles the state</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> <p>Toggle indicator light.</p> Source code in <code>src\\pyvesync\\devices\\vesyncswitch.py</code> <pre><code>async def toggle_indicator_light(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Toggle indicator light.\"\"\"\n    if toggle is None:\n        toggle = self.state.indicator_status == 'off'\n    toggle_status = DeviceStatus.from_bool(toggle)\n\n    r_bytes = await self.call_bypassv1_api(\n        switch_models.RequestDimmerStatus,\n        {'status': toggle_status},\n        'dimmerIndicatorLightCtl',\n        'dimmerIndicatorLightCtl',\n    )\n\n    r = Helpers.process_dev_response(_LOGGER, 'toggle_indicator_light', self, r_bytes)\n    if r is None:\n        return False\n\n    self.state.indicator_status = toggle_status\n    return True\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.toggle_switch","title":"toggle_switch  <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\devices\\vesyncswitch.py</code> <pre><code>async def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    if toggle is None:\n        toggle = self.state.device_status == 'off'\n    toggle_status = DeviceStatus.from_bool(toggle)\n\n    r_bytes = await self.call_bypassv1_api(\n        switch_models.RequestDimmerStatus,\n        {'status': toggle_status},\n        'dimmerPowerSwitchCtl',\n        'dimmerPowerSwitchCtl',\n    )\n\n    r = Helpers.process_dev_response(_LOGGER, 'toggle_switch', self, r_bytes)\n    if r is None:\n        return False\n\n    self.state.device_status = toggle_status\n    return True\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.turn_indicator_light_off","title":"turn_indicator_light_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>turn_indicator_light_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> Deprecated <p>Use <code>turn_off_indicator_light</code> instead.</p> <p>Deprecated - use turn_off_indicator_light.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>@deprecated('Use `turn_off_indicator_light` instead.')\nasync def turn_indicator_light_off(self) -&gt; bool:\n    \"\"\"Deprecated - use turn_off_indicator_light.\"\"\"\n    return await self.toggle_indicator_light(False)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.turn_indicator_light_on","title":"turn_indicator_light_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>turn_indicator_light_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> Deprecated <p>Use <code>turn_on_indicator_light</code> instead.</p> <p>Deprecated - use turn_on_indicator_light.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>@deprecated('Use `turn_on_indicator_light` instead.')\nasync def turn_indicator_light_on(self) -&gt; bool:\n    \"\"\"Deprecated - use turn_on_indicator_light.\"\"\"\n    return await self.toggle_indicator_light(True)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.turn_off_indicator_light","title":"turn_off_indicator_light  <code>async</code>  \u21b2","text":"<pre><code>turn_off_indicator_light() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Turn off indicator light if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def turn_off_indicator_light(self) -&gt; bool:\n    \"\"\"Turn off indicator light if supported.\"\"\"\n    return await self.toggle_indicator_light(False)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.turn_off_rgb_backlight","title":"turn_off_rgb_backlight  <code>async</code>  \u21b2","text":"<pre><code>turn_off_rgb_backlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Turn off backlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def turn_off_rgb_backlight(self) -&gt; bool:\n    \"\"\"Turn off backlight if supported.\"\"\"\n    return await self.set_backlight_status(False)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.turn_on_indicator_light","title":"turn_on_indicator_light  <code>async</code>  \u21b2","text":"<pre><code>turn_on_indicator_light() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Turn on indicator light if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def turn_on_indicator_light(self) -&gt; bool:\n    \"\"\"Turn on indicator light if supported.\"\"\"\n    return await self.toggle_indicator_light(True)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.turn_on_rgb_backlight","title":"turn_on_rgb_backlight  <code>async</code>  \u21b2","text":"<pre><code>turn_on_rgb_backlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Turn on backlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def turn_on_rgb_backlight(self) -&gt; bool:\n    \"\"\"Turn on backlight if supported.\"\"\"\n    return await self.set_backlight_status(True)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.turn_rgb_backlight_off","title":"turn_rgb_backlight_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>turn_rgb_backlight_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> Deprecated <p>Use <code>turn_off_rgb_backlight()</code> instead.</p> <p>Turn off RGB backlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>@deprecated('Use `turn_off_rgb_backlight()` instead.')\nasync def turn_rgb_backlight_off(self) -&gt; bool:\n    \"\"\"Turn off RGB backlight if supported.\"\"\"\n    return await self.set_backlight_status(False)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.turn_rgb_backlight_on","title":"turn_rgb_backlight_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>turn_rgb_backlight_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> Deprecated <p>Use <code>turn_on_rgb_backlight()</code> instead.</p> <p>Turn on RGB backlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>@deprecated('Use `turn_on_rgb_backlight()` instead.')\nasync def turn_rgb_backlight_on(self) -&gt; bool:\n    \"\"\"Turn on RGB backlight if supported.\"\"\"\n    return await self.set_backlight_status(True)\n</code></pre>"},{"location":"devices/switches/#pyvesync.devices.vesyncswitch.VeSyncDimmerSwitch.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch","title":"pyvesync.base_devices.switch_base.VeSyncSwitch \u21b2","text":"<pre><code>VeSyncSwitch(\n    details: ResponseDeviceDetailsModel,\n    manager: VeSync,\n    feature_map: SwitchMap,\n)\n</code></pre> <p>               Bases: <code>VeSyncBaseToggleDevice</code></p> <p>Etekcity Switch Base Class.</p> <p>Abstract Base Class for Etekcity Switch Devices, inheriting from pyvesync.base_devices.vesyncbasedevice.VeSyncBaseDevice. Should not be instantiated directly, subclassed by VeSyncWallSwitch and VeSyncDimmerSwitch.</p> <p>Attributes:</p> Name Type Description <code>state</code> <code>SwitchState</code> <p>Switch state object.</p> <code>last_response</code> <code>ResponseInfo</code> <p>Last response from API call.</p> <code>manager</code> <code>VeSync</code> <p>Manager object for API calls.</p> <code>device_name</code> <code>str</code> <p>Name of device.</p> <code>device_image</code> <code>str</code> <p>URL for device image.</p> <code>cid</code> <code>str</code> <p>Device ID.</p> <code>connection_type</code> <code>str</code> <p>Connection type of device.</p> <code>device_type</code> <code>str</code> <p>Type of device.</p> <code>type</code> <code>str</code> <p>Type of device.</p> <code>uuid</code> <code>str</code> <p>UUID of device, not always present.</p> <code>config_module</code> <code>str</code> <p>Configuration module of device.</p> <code>mac_id</code> <code>str</code> <p>MAC ID of device.</p> <code>current_firm_version</code> <code>str</code> <p>Current firmware version of device.</p> <code>device_region</code> <code>str</code> <p>Region of device. (US, EU, etc.)</p> <code>pid</code> <code>str</code> <p>Product ID of device, pulled by some devices on update.</p> <code>sub_device_no</code> <code>int</code> <p>Sub-device number of device.</p> <code>product_type</code> <code>str</code> <p>Product type of device.</p> <code>features</code> <code>dict</code> <p>Features of device.</p> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Initialize VeSync device base class.</p> <p>Initialize Switch Base Class.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>def __init__(\n    self, details: ResponseDeviceDetailsModel, manager: VeSync, feature_map: SwitchMap\n) -&gt; None:\n    \"\"\"Initialize Switch Base Class.\"\"\"\n    super().__init__(details, manager, feature_map)\n    self.state: SwitchState = SwitchState(self, details, feature_map)\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch-attributes","title":"Attributes\u21b2","text":""},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.cid","title":"cid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>cid: str = cid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.config_module","title":"config_module  <code>instance-attribute</code>  \u21b2","text":"<pre><code>config_module: str = configModule\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.connection_type","title":"connection_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>connection_type: str | None = connectionType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.current_firm_version","title":"current_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>current_firm_version = currentFirmVersion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.device_image","title":"device_image  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_image: str | None = deviceImg\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.device_name","title":"device_name  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_name: str = deviceName\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.device_region","title":"device_region  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_region: str | None = deviceRegion\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.device_type","title":"device_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device_type: str = deviceType\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.enabled","title":"enabled  <code>instance-attribute</code>  \u21b2","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.features","title":"features  <code>instance-attribute</code>  \u21b2","text":"<pre><code>features: list[str] = features\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.firmware_update","title":"firmware_update  <code>property</code>  \u21b2","text":"<pre><code>firmware_update: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return True if firmware update available.</p> <p>This is going to be updated.</p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.is_dimmable","title":"is_dimmable  <code>property</code>  \u21b2","text":"<pre><code>is_dimmable: bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Return True if switch is dimmable.</p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.is_on","title":"is_on  <code>property</code>  \u21b2","text":"<pre><code>is_on: bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return true if device is on.</p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.last_response","title":"last_response  <code>instance-attribute</code>  \u21b2","text":"<pre><code>last_response: ResponseInfo | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.latest_firm_version","title":"latest_firm_version  <code>instance-attribute</code>  \u21b2","text":"<pre><code>latest_firm_version: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.mac_id","title":"mac_id  <code>instance-attribute</code>  \u21b2","text":"<pre><code>mac_id: str | None = macID\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.manager","title":"manager  <code>instance-attribute</code>  \u21b2","text":"<pre><code>manager = manager\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.pid","title":"pid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>pid: str | None = None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.product_type","title":"product_type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>product_type: str = product_type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: SwitchState = SwitchState(self, details, feature_map)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.sub_device_no","title":"sub_device_no  <code>instance-attribute</code>  \u21b2","text":"<pre><code>sub_device_no: int | None = subDeviceNo\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.supports_backlight","title":"supports_backlight  <code>property</code>  \u21b2","text":"<pre><code>supports_backlight: bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Return True if switch supports backlight.</p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.supports_backlight_color","title":"supports_backlight_color  <code>property</code>  \u21b2","text":"<pre><code>supports_backlight_color: bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Return True if switch supports backlight.</p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.supports_dimmable","title":"supports_dimmable  <code>property</code>  \u21b2","text":"<pre><code>supports_dimmable: bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Return True if switch is dimmable.</p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.supports_indicator_light","title":"supports_indicator_light  <code>property</code>  \u21b2","text":"<pre><code>supports_indicator_light: bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Return True if switch supports indicator.</p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.type","title":"type  <code>instance-attribute</code>  \u21b2","text":"<pre><code>type: str | None = type\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.uuid","title":"uuid  <code>instance-attribute</code>  \u21b2","text":"<pre><code>uuid: str | None = uuid\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch-functions","title":"Functions\u21b2","text":""},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.clear_timer","title":"clear_timer  <code>async</code>  \u21b2","text":"<pre><code>clear_timer() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Clear timer for device from API.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def clear_timer(self) -&gt; bool:\n    \"\"\"Clear timer for device from API.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    logger.debug('Not implemented - clear_timer')\n    return False\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.display","title":"display \u21b2","text":"<pre><code>display(state: bool = True) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print formatted static device info to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in display, defaults to True.</p> <code>True</code> <p>Example: <pre><code>Device Name:..................Living Room Lamp\nModel:........................ESL100\nSubdevice No:.................0\nType:.........................wifi\nCID:..........................1234567890abcdef\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def display(self, state: bool = True) -&gt; None:\n    \"\"\"Print formatted static device info to stdout.\n\n    Args:\n        state (bool): If True, include state in display, defaults to True.\n\n    Example:\n    ```\n    Device Name:..................Living Room Lamp\n    Model:........................ESL100\n    Subdevice No:.................0\n    Type:.........................wifi\n    CID:..........................1234567890abcdef\n    ```\n    \"\"\"\n    # noinspection SpellCheckingInspection\n    display_list = [\n        ('Device Name:', self.device_name),\n        ('Product Type: ', self.product_type),\n        ('Model: ', self.device_type),\n        ('Subdevice No: ', str(self.sub_device_no)),\n        ('Type: ', self.type),\n        ('CID: ', self.cid),\n        ('Config Module: ', self.config_module),\n        ('Connection Type: ', self.connection_type),\n        ('Features', self.features),\n        ('Last Response: ', self.last_response),\n    ]\n    if self.uuid is not None:\n        display_list.append(('UUID: ', self.uuid))\n\n    for line in display_list:\n        print(f'{line[0]:.&lt;30} {line[1]}')  # noqa: T201\n    if state:\n        self.state.display()\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.get_details","title":"get_details  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>get_details() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device details.</p> <p>This method is defined in each device class to contain the logic to pull the device state from the API and update the device's <code>state</code> attribute. The <code>update()</code> method should be called to update the device state.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>@abstractmethod\nasync def get_details(self) -&gt; None:\n    \"\"\"Get device details.\n\n    This method is defined in each device class to contain\n    the logic to pull the device state from the API and update\n    the device's `state` attribute. The `update()` method should\n    be called to update the device state.\n    \"\"\"\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.get_state","title":"get_state \u21b2","text":"<pre><code>get_state(state_attr: str) -&gt; Any\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def get_state(self, state_attr: str) -&gt; Any:  # noqa: ANN401\n    \"\"\"Get device state attribute.\"\"\"\n    return getattr(self.state, state_attr)\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.get_timer","title":"get_timer  <code>async</code>  \u21b2","text":"<pre><code>get_timer() -&gt; Timer | None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Get timer for device from API and set the <code>state.Timer</code> attribute.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> Note <p>This method may not be implemented for all devices. Please open an issue if there is an error.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def get_timer(self) -&gt; Timer | None:\n    \"\"\"Get timer for device from API and set the `state.Timer` attribute.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Note:\n        This method may not be implemented for all devices. Please\n        open an issue if there is an error.\n    \"\"\"\n    logger.debug('Not implemented - get_timer')\n    return None\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.set_backlight_color","title":"set_backlight_color  <code>async</code>  \u21b2","text":"<pre><code>set_backlight_color(\n    red: int, green: int, blue: int\n) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Set the color of the backlight using RGB.</p> <p>Parameters:</p> Name Type Description Default <code>red</code> <code>int</code> <p>Red value (0-255).</p> required <code>green</code> <code>int</code> <p>Green value (0-255).</p> required <code>blue</code> <code>int</code> <p>Blue value (0-255).</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def set_backlight_color(self, red: int, green: int, blue: int) -&gt; bool:\n    \"\"\"Set the color of the backlight using RGB.\n\n    Args:\n        red (int): Red value (0-255).\n        green (int): Green value (0-255).\n        blue (int): Blue value (0-255).\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    return await self.set_backlight_status(True, red=red, green=green, blue=blue)\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.set_backlight_status","title":"set_backlight_status  <code>async</code>  \u21b2","text":"<pre><code>set_backlight_status(\n    status: bool,\n    red: int | None = None,\n    green: int | None = None,\n    blue: int | None = None,\n) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Set the backlight status and optionally its color if supported by the device.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>bool</code> <p>Backlight status (True for ON, False for OFF).</p> required <code>red</code> <code>int | None</code> <p>RGB green value (0-255), defaults to None.</p> <code>None</code> <code>green</code> <code>int | None</code> <p>RGB green value (0-255), defaults to None.</p> <code>None</code> <code>blue</code> <code>int | None</code> <p>RGB blue value (0-255), defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def set_backlight_status(\n    self,\n    status: bool,\n    red: int | None = None,\n    green: int | None = None,\n    blue: int | None = None,\n) -&gt; bool:\n    \"\"\"Set the backlight status and optionally its color if supported by the device.\n\n    Args:\n        status (bool): Backlight status (True for ON, False for OFF).\n        red (int | None): RGB green value (0-255), defaults to None.\n        green (int | None): RGB green value (0-255), defaults to None.\n        blue (int | None): RGB blue value (0-255), defaults to None.\n\n    Returns:\n        bool: True if successful, False otherwise.\n\n    \"\"\"\n    del status, red, green, blue\n    if self.supports_backlight:\n        logger.debug('set_backlight_status not configured for %s', self.device_name)\n    else:\n        logger.debug('set_backlight_status not supported for %s', self.device_name)\n    return False\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.set_brightness","title":"set_brightness  <code>async</code>  \u21b2","text":"<pre><code>set_brightness(brightness: int) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Set the brightness of the switch if supported.</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <code>int</code> <p>Brightness value (0-100).</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def set_brightness(self, brightness: int) -&gt; bool:\n    \"\"\"Set the brightness of the switch if supported.\n\n    Args:\n        brightness (int): Brightness value (0-100).\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del brightness\n    if self.supports_dimmable:\n        logger.debug('set_brightness not configured for %s', self.device_name)\n    else:\n        logger.debug('set_brightness not supported for %s', self.device_name)\n    return False\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.set_state","title":"set_state \u21b2","text":"<pre><code>set_state(state_attr: str, stat_value: Any) -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set device state attribute.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def set_state(self, state_attr: str, stat_value: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Set device state attribute.\"\"\"\n    setattr(self, state_attr, stat_value)\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.set_timer","title":"set_timer  <code>async</code>  \u21b2","text":"<pre><code>set_timer(duration: int, action: str | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Set timer for device.</p> <p>This may not be implemented for all devices. Please open an issue if there is an error.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int</code> <p>Duration in seconds.</p> required <code>action</code> <code>str | None</code> <p>Action to take when timer expires.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def set_timer(self, duration: int, action: str | None = None) -&gt; bool:\n    \"\"\"Set timer for device.\n\n    This may not be implemented for all devices. Please open an issue\n    if there is an error.\n\n    Args:\n        duration (int): Duration in seconds.\n        action (str | None): Action to take when timer expires.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del duration\n    del action\n    logger.debug('Not implemented - set_timer')\n    return False\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.to_dict","title":"to_dict \u21b2","text":"<pre><code>to_dict(state: bool = True) -&gt; dict[str, Any]\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Return device information as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in dictionary, defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing device information.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_dict(self, state: bool = True) -&gt; dict[str, Any]:\n    \"\"\"Return device information as a dictionary.\n\n    Args:\n        state (bool): If True, include state in dictionary, defaults to True.\n\n    Returns:\n        dict[str, Any]: Dictionary containing device information.\n    \"\"\"\n    device_dict = {\n        'device_name': self.device_name,\n        'product_type': self.product_type,\n        'model': self.device_type,\n        'subdevice_no': str(self.sub_device_no),\n        'type': self.type,\n        'cid': self.cid,\n        'features:': self.features,\n        'config_module': self.config_module,\n        'connection_type': self.connection_type,\n        'last_response': self.last_response,\n    }\n    state_dict = self.state.to_dict() if state else {}\n    return device_dict | state_dict\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.to_json","title":"to_json \u21b2","text":"<pre><code>to_json(state: bool = True, indent: bool = True) -&gt; str\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Print JSON API string for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON formatted string of device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_json(self, state: bool = True, indent: bool = True) -&gt; str:\n    \"\"\"Print JSON API string for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        str: JSON formatted string of device details.\n    \"\"\"\n    return self.to_jsonb(state, indent).decode()\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.to_jsonb","title":"to_jsonb \u21b2","text":"<pre><code>to_jsonb(state: bool = True, indent: bool = True) -&gt; bytes\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>JSON API bytes for device details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>If True, include state in JSON output, defaults to True.</p> <code>True</code> <code>indent</code> <code>bool</code> <p>If True, indent JSON output, defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>JSON formatted bytes of device details.</p> Example <p>This is an example without state. <pre><code>{\n    \"Device Name\": \"Living Room Lamp\",\n    \"Model\": \"ESL100\",\n    \"Subdevice No\": \"0\",\n    \"Type\": \"wifi\",\n    \"CID\": \"1234567890abcdef\"\n}\n</code></pre></p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>def to_jsonb(self, state: bool = True, indent: bool = True) -&gt; bytes:\n    \"\"\"JSON API bytes for device details.\n\n    Args:\n        state (bool): If True, include state in JSON output, defaults to True.\n        indent (bool): If True, indent JSON output, defaults to True.\n\n    Returns:\n        bytes: JSON formatted bytes of device details.\n\n    Example:\n        This is an example without state.\n        ```\n        {\n            \"Device Name\": \"Living Room Lamp\",\n            \"Model\": \"ESL100\",\n            \"Subdevice No\": \"0\",\n            \"Type\": \"wifi\",\n            \"CID\": \"1234567890abcdef\"\n        }\n        ```\n    \"\"\"\n    return_dict = self.to_dict(state=state)\n    if indent:\n        return orjson.dumps(\n            return_dict,\n            option=orjson.OPT_INDENT_2 | orjson.OPT_NON_STR_KEYS,\n        )\n\n    return orjson.dumps(return_dict, option=orjson.OPT_NON_STR_KEYS)\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.toggle_indicator_light","title":"toggle_indicator_light  <code>async</code>  \u21b2","text":"<pre><code>toggle_indicator_light(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Toggle indicator light on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool</code> <p>True to turn on, False to turn off. If None, toggles the state</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def toggle_indicator_light(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Toggle indicator light on or off.\n\n    Args:\n        toggle (bool): True to turn on, False to turn off. If None, toggles the state\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del toggle\n    if self.supports_indicator_light:\n        logger.debug('toggle_indicator_light not configured for %s', self.device_name)\n    else:\n        logger.debug('toggle_indicator_light not supported for %s', self.device_name)\n    return False\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.toggle_switch","title":"toggle_switch  <code>abstractmethod</code> <code>async</code>  \u21b2","text":"<pre><code>toggle_switch(toggle: bool | None = None) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Toggle device power on or off.</p> <p>Parameters:</p> Name Type Description Default <code>toggle</code> <code>bool | None</code> <p>True to turn on, False to turn off, None to toggle.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>@abstractmethod\nasync def toggle_switch(self, toggle: bool | None = None) -&gt; bool:\n    \"\"\"Toggle device power on or off.\n\n    Args:\n        toggle (bool | None): True to turn on, False to turn off, None to toggle.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.turn_indicator_light_off","title":"turn_indicator_light_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>turn_indicator_light_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> Deprecated <p>Use <code>turn_off_indicator_light</code> instead.</p> <p>Deprecated - use turn_off_indicator_light.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>@deprecated('Use `turn_off_indicator_light` instead.')\nasync def turn_indicator_light_off(self) -&gt; bool:\n    \"\"\"Deprecated - use turn_off_indicator_light.\"\"\"\n    return await self.toggle_indicator_light(False)\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.turn_indicator_light_on","title":"turn_indicator_light_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>turn_indicator_light_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> Deprecated <p>Use <code>turn_on_indicator_light</code> instead.</p> <p>Deprecated - use turn_on_indicator_light.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>@deprecated('Use `turn_on_indicator_light` instead.')\nasync def turn_indicator_light_on(self) -&gt; bool:\n    \"\"\"Deprecated - use turn_on_indicator_light.\"\"\"\n    return await self.toggle_indicator_light(True)\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device off.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Turn device off.\"\"\"\n    return await self.toggle_switch(False)\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.turn_off_indicator_light","title":"turn_off_indicator_light  <code>async</code>  \u21b2","text":"<pre><code>turn_off_indicator_light() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Turn off indicator light if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def turn_off_indicator_light(self) -&gt; bool:\n    \"\"\"Turn off indicator light if supported.\"\"\"\n    return await self.toggle_indicator_light(False)\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.turn_off_rgb_backlight","title":"turn_off_rgb_backlight  <code>async</code>  \u21b2","text":"<pre><code>turn_off_rgb_backlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Turn off backlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def turn_off_rgb_backlight(self) -&gt; bool:\n    \"\"\"Turn off backlight if supported.\"\"\"\n    return await self.set_backlight_status(False)\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.turn_on","title":"turn_on  <code>async</code>  \u21b2","text":"<pre><code>turn_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncBaseToggleDevice</code></p> <p>Turn device on.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def turn_on(self) -&gt; bool:\n    \"\"\"Turn device on.\"\"\"\n    return await self.toggle_switch(True)\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.turn_on_indicator_light","title":"turn_on_indicator_light  <code>async</code>  \u21b2","text":"<pre><code>turn_on_indicator_light() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Turn on indicator light if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def turn_on_indicator_light(self) -&gt; bool:\n    \"\"\"Turn on indicator light if supported.\"\"\"\n    return await self.toggle_indicator_light(True)\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.turn_on_rgb_backlight","title":"turn_on_rgb_backlight  <code>async</code>  \u21b2","text":"<pre><code>turn_on_rgb_backlight() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> <p>Turn on backlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>async def turn_on_rgb_backlight(self) -&gt; bool:\n    \"\"\"Turn on backlight if supported.\"\"\"\n    return await self.set_backlight_status(True)\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.turn_rgb_backlight_off","title":"turn_rgb_backlight_off  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>turn_rgb_backlight_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> Deprecated <p>Use <code>turn_off_rgb_backlight()</code> instead.</p> <p>Turn off RGB backlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>@deprecated('Use `turn_off_rgb_backlight()` instead.')\nasync def turn_rgb_backlight_off(self) -&gt; bool:\n    \"\"\"Turn off RGB backlight if supported.\"\"\"\n    return await self.set_backlight_status(False)\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.turn_rgb_backlight_on","title":"turn_rgb_backlight_on  <code>async</code> <code>deprecated</code>  \u21b2","text":"<pre><code>turn_rgb_backlight_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncSwitch</code></p> Deprecated <p>Use <code>turn_on_rgb_backlight()</code> instead.</p> <p>Turn on RGB backlight if supported.</p> Source code in <code>src\\pyvesync\\base_devices\\switch_base.py</code> <pre><code>@deprecated('Use `turn_on_rgb_backlight()` instead.')\nasync def turn_rgb_backlight_on(self) -&gt; bool:\n    \"\"\"Turn on RGB backlight if supported.\"\"\"\n    return await self.set_backlight_status(True)\n</code></pre>"},{"location":"devices/switches/#pyvesync.base_devices.switch_base.VeSyncSwitch.update","title":"update  <code>async</code>  \u21b2","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p> <p>Update device details.</p> Source code in <code>src\\pyvesync\\base_devices\\vesyncbasedevice.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"Update device details.\"\"\"\n    await self.get_details()\n</code></pre>"},{"location":"devices/thermostats/","title":"VeSync Thermostats\u21b2","text":""},{"location":"devices/thermostats/#pyvesync.devices.vesyncthermostat","title":"pyvesync.devices.vesyncthermostat \u21b2","text":"<p>Thermostat device classes.</p>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.ThermostatState","title":"pyvesync.base_devices.thermostat_base.ThermostatState \u21b2","text":"<p>               Bases: <code>DeviceState</code></p> <p>VeSync Thermostat State.</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>VeSyncThermostat</code> <p>The thermostat device.</p> required <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The thermostat device details.</p> required <code>feature_map</code> <code>ThermostatMap</code> <p>The thermostat feature map.</p> required Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>class ThermostatState(DeviceState):\n    \"\"\"VeSync Thermostat State.\n\n    Args:\n        device (VeSyncThermostat): The thermostat device.\n        details (ResponseDeviceDetailsModel): The thermostat device details.\n        feature_map (ThermostatMap): The thermostat feature map.\n    \"\"\"\n\n    __slots__ = (\n        'alert_status',\n        'battery_level',\n        'configuration',\n        'cool_to_temp',\n        'deadband',\n        'device_config',\n        'eco_type',\n        'fan_mode',\n        'fan_status',\n        'filter_life',\n        'heat_to_temp',\n        'hold_end_time',\n        'hold_option',\n        'humidity',\n        'lock_status',\n        'mode',\n        'routine_running_id',\n        'routines',\n        'schedule_or_hold',\n        'temperature',\n        'temperature_unit',\n        'work_mode',\n        'work_status',\n    )\n\n    def __init__(\n        self,\n        device: VeSyncThermostat,\n        details: ResponseDeviceDetailsModel,\n        feature_map: ThermostatMap,\n    ) -&gt; None:\n        \"\"\"Initialize VeSync Thermostat State.\"\"\"\n        super().__init__(device, details, feature_map)\n        self.device: VeSyncThermostat = device\n        self.configuration: ThermostatMinorDetails | None = None\n        self.work_mode: ThermostatWorkModes | None = None\n        self.work_status: ThermostatWorkStatusCodes | None = None\n        self.fan_mode: ThermostatFanModes | None = None\n        self.fan_status: ThermostatFanStatus | None = None\n        self.temperature_unit: str | None = None\n        self.temperature: float | None = None\n        self.humidity: int | None = None\n        self.heat_to_temp: int | None = None\n        self.cool_to_temp: int | None = None\n        self.lock_status: bool = False\n        self.schedule_or_hold: ThermostatScheduleOrHoldOptions | None = None\n        self.hold_end_time: int | None = None\n        self.hold_option: ThermostatHoldOptions | None = None\n        self.deadband: int | None = None\n        self.eco_type: ThermostatEcoTypes | None = None\n        self.alert_status: int | None = None\n        self.routines: list[ThermostatSimpleRoutine] = []\n        self.routine_running_id: int | None = None\n        self.battery_level: int | None = None\n        self.filter_life: int | None = None\n\n    @property\n    def is_running(self) -&gt; bool:\n        \"\"\"Check if the thermostat is running.\"\"\"\n        return self.work_status != ThermostatWorkStatusCodes.OFF\n\n    @property\n    def is_heating(self) -&gt; bool:\n        \"\"\"Check if the thermostat is heating.\"\"\"\n        return self.work_status == ThermostatWorkStatusCodes.HEATING\n\n    @property\n    def is_cooling(self) -&gt; bool:\n        \"\"\"Check if the thermostat is cooling.\"\"\"\n        return self.work_status == ThermostatWorkStatusCodes.COOLING\n\n    @property\n    def is_fan_on(self) -&gt; bool:\n        \"\"\"Check if the fan is on.\"\"\"\n        return self.fan_status == ThermostatFanStatus.ON\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.ThermostatState.device","title":"device  <code>instance-attribute</code>  \u21b2","text":"<pre><code>device: VeSyncThermostat = device\n</code></pre> <p>Inherited From <code>DeviceState</code></p>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.ThermostatState.is_running","title":"is_running  <code>property</code>  \u21b2","text":"<pre><code>is_running: bool\n</code></pre> <p>Check if the thermostat is running.</p>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.ThermostatState.is_heating","title":"is_heating  <code>property</code>  \u21b2","text":"<pre><code>is_heating: bool\n</code></pre> <p>Check if the thermostat is heating.</p>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.ThermostatState.is_cooling","title":"is_cooling  <code>property</code>  \u21b2","text":"<pre><code>is_cooling: bool\n</code></pre> <p>Check if the thermostat is cooling.</p>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.ThermostatState.is_fan_on","title":"is_fan_on  <code>property</code>  \u21b2","text":"<pre><code>is_fan_on: bool\n</code></pre> <p>Check if the fan is on.</p>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat","title":"pyvesync.base_devices.thermostat_base.VeSyncThermostat \u21b2","text":"<p>               Bases: <code>VeSyncBaseDevice</code></p> <p>Base class for VeSync Thermostat devices.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>ResponseDeviceDetailsModel</code> <p>The thermostat device details.</p> required <code>manager</code> <code>VeSync</code> <p>The VeSync manager instance.</p> required <code>feature_map</code> <code>ThermostatMap</code> <p>The thermostat feature map.</p> required Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>class VeSyncThermostat(VeSyncBaseDevice):\n    \"\"\"Base class for VeSync Thermostat devices.\n\n    Args:\n        details (ResponseDeviceDetailsModel): The thermostat device details.\n        manager (VeSync): The VeSync manager instance.\n        feature_map (ThermostatMap): The thermostat feature map.\n    \"\"\"\n\n    __slots__ = ('eco_types', 'fan_modes', 'hold_options', 'supported_work_modes')\n\n    def __init__(\n        self,\n        details: ResponseDeviceDetailsModel,\n        manager: VeSync,\n        feature_map: ThermostatMap,\n    ) -&gt; None:\n        \"\"\"Initialize VeSync Thermostat.\"\"\"\n        super().__init__(details, manager, feature_map)\n        self.state: ThermostatState = ThermostatState(self, details, feature_map)\n        self.fan_modes = feature_map.fan_modes\n        self.supported_work_modes = feature_map.modes\n        self.eco_types = feature_map.eco_types\n        self.hold_options = feature_map.hold_options\n\n    async def set_mode(self, mode: ThermostatWorkModes) -&gt; bool:\n        \"\"\"Set the thermostat mode.\"\"\"\n        del mode  # Unused\n        _LOGGER.debug('set mode not implemented for %s', self.device_type)\n        return False\n\n    async def turn_off(self) -&gt; bool:\n        \"\"\"Set mode to off.\"\"\"\n        return await self.set_mode(ThermostatWorkModes.OFF)\n\n    async def set_mode_cool(self) -&gt; bool:\n        \"\"\"Set mode to cool.\"\"\"\n        return await self.set_mode(ThermostatWorkModes.COOL)\n\n    async def set_mode_heat(self) -&gt; bool:\n        \"\"\"Set mode to heat.\"\"\"\n        return await self.set_mode(ThermostatWorkModes.HEAT)\n\n    async def set_mode_auto(self) -&gt; bool:\n        \"\"\"Set mode to auto.\"\"\"\n        return await self.set_mode(ThermostatWorkModes.AUTO)\n\n    async def set_mode_smart_auto(self) -&gt; bool:\n        \"\"\"Set mode to smart auto.\"\"\"\n        return await self.set_mode(ThermostatWorkModes.SMART_AUTO)\n\n    async def set_mode_emergency_heat(self) -&gt; bool:\n        \"\"\"Set mode to emergency heat.\"\"\"\n        return await self.set_mode(ThermostatWorkModes.EM_HEAT)\n\n    async def set_fan_mode(self, mode: ThermostatFanModes) -&gt; bool:\n        \"\"\"Set thermostat fan mode.\"\"\"\n        del mode\n        _LOGGER.debug('set fan mode not implemented for %s', self.device_type)\n        return False\n\n    async def set_fan_ciruclate(self) -&gt; bool:\n        \"\"\"Set fan circulate.\"\"\"\n        return await self.set_fan_mode(ThermostatConst.FanMode.CIRCULATE)\n\n    async def set_fan_auto(self) -&gt; bool:\n        \"\"\"Set fan auto.\"\"\"\n        return await self.set_fan_mode(ThermostatConst.FanMode.AUTO)\n\n    async def set_fan_on(self) -&gt; bool:\n        \"\"\"Set fan on.\"\"\"\n        return await self.set_fan_mode(ThermostatConst.FanMode.ON)\n\n    async def get_configuration(self) -&gt; None:\n        \"\"\"Retrieve configuration from API.\"\"\"\n        _LOGGER.debug('get configuration not implemented for %s', self.device_type)\n\n    async def set_temp_point(self, temperature: float) -&gt; bool:\n        \"\"\"Set the temperature point.\"\"\"\n        del temperature\n        _LOGGER.debug('set temp point not implemented for %s', self.device_type)\n        return False\n\n    async def cancel_hold(self) -&gt; bool:\n        \"\"\"Cancel the scheduled hold.\"\"\"\n        _LOGGER.debug('cancel hold not implemented for %s', self.device_type)\n        return False\n\n    async def set_cool_to_temp(self, temperature: float) -&gt; bool:\n        \"\"\"Set the cool to temperature.\n\n        Args:\n            temperature (float): The cool to temperature.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        del temperature\n        _LOGGER.debug('set cool to temp not implemented for %s', self.device_type)\n        return False\n\n    async def set_heat_to_temp(self, temperature: float) -&gt; bool:\n        \"\"\"Set the heat to temperature.\n\n        Args:\n            temperature (float): The heat to temperature.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        del temperature\n        _LOGGER.debug('set heat to temp not implemented for %s', self.device_type)\n        return False\n\n    async def toggle_lock(self, toggle: bool, pin: int | str | None = None) -&gt; bool:\n        \"\"\"Toggle the thermostat lock status.\"\"\"\n        del toggle, pin\n        _LOGGER.debug('toggle lock not implemented for %s', self.device_type)\n        return False\n\n    async def turn_on_lock(self, pin: int | str) -&gt; bool:\n        \"\"\"Turn on the thermostat lock.\n\n        Args:\n            pin (int | str): The 4-digit PIN code.\n        \"\"\"\n        return await self.toggle_lock(True, pin)\n\n    async def turn_off_lock(self) -&gt; bool:\n        \"\"\"Turn off the thermostat lock.\"\"\"\n        return await self.toggle_lock(False)\n\n    async def set_eco_type(self, eco_type: ThermostatEcoTypes) -&gt; bool:\n        \"\"\"Set thermostat eco type.\n\n        Args:\n            eco_type (ThermostatEcoTypes): The eco type to set, options are found in\n                self.eco_types.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        del eco_type\n        if not self.eco_types:\n            _LOGGER.debug('No eco types available for %s', self.device_type)\n        else:\n            _LOGGER.debug('set_eco_type not configured for %s', self.device_name)\n        return False\n\n    async def set_eco_first(self) -&gt; bool:\n        \"\"\"Set eco first.\"\"\"\n        return await self.set_eco_type(ThermostatEcoTypes.ECO_FIRST)\n\n    async def set_eco_second(self) -&gt; bool:\n        \"\"\"Set eco second.\"\"\"\n        return await self.set_eco_type(ThermostatEcoTypes.ECO_SECOND)\n\n    async def set_eco_comfort_first(self) -&gt; bool:\n        \"\"\"Set eco comfort.\"\"\"\n        return await self.set_eco_type(ThermostatEcoTypes.COMFORT_FIRST)\n\n    async def set_eco_comfort_second(self) -&gt; bool:\n        \"\"\"Set eco comfort.\"\"\"\n        return await self.set_eco_type(ThermostatEcoTypes.COMFORT_SECOND)\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.state","title":"state  <code>instance-attribute</code>  \u21b2","text":"<pre><code>state: ThermostatState = ThermostatState(\n    self, details, feature_map\n)\n</code></pre> <p>Inherited From <code>VeSyncBaseDevice</code></p>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.fan_modes","title":"fan_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>fan_modes = fan_modes\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.supported_work_modes","title":"supported_work_modes  <code>instance-attribute</code>  \u21b2","text":"<pre><code>supported_work_modes = modes\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.eco_types","title":"eco_types  <code>instance-attribute</code>  \u21b2","text":"<pre><code>eco_types = eco_types\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.hold_options","title":"hold_options  <code>instance-attribute</code>  \u21b2","text":"<pre><code>hold_options = hold_options\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.set_mode","title":"set_mode  <code>async</code>  \u21b2","text":"<pre><code>set_mode(mode: ThermostatWorkModes) -&gt; bool\n</code></pre> <p>Set the thermostat mode.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def set_mode(self, mode: ThermostatWorkModes) -&gt; bool:\n    \"\"\"Set the thermostat mode.\"\"\"\n    del mode  # Unused\n    _LOGGER.debug('set mode not implemented for %s', self.device_type)\n    return False\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.turn_off","title":"turn_off  <code>async</code>  \u21b2","text":"<pre><code>turn_off() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p> <p>Set mode to off.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def turn_off(self) -&gt; bool:\n    \"\"\"Set mode to off.\"\"\"\n    return await self.set_mode(ThermostatWorkModes.OFF)\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.set_mode_cool","title":"set_mode_cool  <code>async</code>  \u21b2","text":"<pre><code>set_mode_cool() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p> <p>Set mode to cool.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def set_mode_cool(self) -&gt; bool:\n    \"\"\"Set mode to cool.\"\"\"\n    return await self.set_mode(ThermostatWorkModes.COOL)\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.set_mode_heat","title":"set_mode_heat  <code>async</code>  \u21b2","text":"<pre><code>set_mode_heat() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p> <p>Set mode to heat.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def set_mode_heat(self) -&gt; bool:\n    \"\"\"Set mode to heat.\"\"\"\n    return await self.set_mode(ThermostatWorkModes.HEAT)\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.set_mode_auto","title":"set_mode_auto  <code>async</code>  \u21b2","text":"<pre><code>set_mode_auto() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p> <p>Set mode to auto.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def set_mode_auto(self) -&gt; bool:\n    \"\"\"Set mode to auto.\"\"\"\n    return await self.set_mode(ThermostatWorkModes.AUTO)\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.set_mode_smart_auto","title":"set_mode_smart_auto  <code>async</code>  \u21b2","text":"<pre><code>set_mode_smart_auto() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p> <p>Set mode to smart auto.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def set_mode_smart_auto(self) -&gt; bool:\n    \"\"\"Set mode to smart auto.\"\"\"\n    return await self.set_mode(ThermostatWorkModes.SMART_AUTO)\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.set_mode_emergency_heat","title":"set_mode_emergency_heat  <code>async</code>  \u21b2","text":"<pre><code>set_mode_emergency_heat() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p> <p>Set mode to emergency heat.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def set_mode_emergency_heat(self) -&gt; bool:\n    \"\"\"Set mode to emergency heat.\"\"\"\n    return await self.set_mode(ThermostatWorkModes.EM_HEAT)\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.set_fan_mode","title":"set_fan_mode  <code>async</code>  \u21b2","text":"<pre><code>set_fan_mode(mode: ThermostatFanModes) -&gt; bool\n</code></pre> <p>Set thermostat fan mode.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def set_fan_mode(self, mode: ThermostatFanModes) -&gt; bool:\n    \"\"\"Set thermostat fan mode.\"\"\"\n    del mode\n    _LOGGER.debug('set fan mode not implemented for %s', self.device_type)\n    return False\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.set_fan_ciruclate","title":"set_fan_ciruclate  <code>async</code>  \u21b2","text":"<pre><code>set_fan_ciruclate() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p> <p>Set fan circulate.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def set_fan_ciruclate(self) -&gt; bool:\n    \"\"\"Set fan circulate.\"\"\"\n    return await self.set_fan_mode(ThermostatConst.FanMode.CIRCULATE)\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.set_fan_auto","title":"set_fan_auto  <code>async</code>  \u21b2","text":"<pre><code>set_fan_auto() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p> <p>Set fan auto.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def set_fan_auto(self) -&gt; bool:\n    \"\"\"Set fan auto.\"\"\"\n    return await self.set_fan_mode(ThermostatConst.FanMode.AUTO)\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.set_fan_on","title":"set_fan_on  <code>async</code>  \u21b2","text":"<pre><code>set_fan_on() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p> <p>Set fan on.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def set_fan_on(self) -&gt; bool:\n    \"\"\"Set fan on.\"\"\"\n    return await self.set_fan_mode(ThermostatConst.FanMode.ON)\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.get_configuration","title":"get_configuration  <code>async</code>  \u21b2","text":"<pre><code>get_configuration() -&gt; None\n</code></pre> <p>Retrieve configuration from API.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def get_configuration(self) -&gt; None:\n    \"\"\"Retrieve configuration from API.\"\"\"\n    _LOGGER.debug('get configuration not implemented for %s', self.device_type)\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.set_temp_point","title":"set_temp_point  <code>async</code>  \u21b2","text":"<pre><code>set_temp_point(temperature: float) -&gt; bool\n</code></pre> <p>Set the temperature point.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def set_temp_point(self, temperature: float) -&gt; bool:\n    \"\"\"Set the temperature point.\"\"\"\n    del temperature\n    _LOGGER.debug('set temp point not implemented for %s', self.device_type)\n    return False\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.cancel_hold","title":"cancel_hold  <code>async</code>  \u21b2","text":"<pre><code>cancel_hold() -&gt; bool\n</code></pre> <p>Cancel the scheduled hold.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def cancel_hold(self) -&gt; bool:\n    \"\"\"Cancel the scheduled hold.\"\"\"\n    _LOGGER.debug('cancel hold not implemented for %s', self.device_type)\n    return False\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.set_cool_to_temp","title":"set_cool_to_temp  <code>async</code>  \u21b2","text":"<pre><code>set_cool_to_temp(temperature: float) -&gt; bool\n</code></pre> <p>Set the cool to temperature.</p> <p>Parameters:</p> Name Type Description Default <code>temperature</code> <code>float</code> <p>The cool to temperature.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def set_cool_to_temp(self, temperature: float) -&gt; bool:\n    \"\"\"Set the cool to temperature.\n\n    Args:\n        temperature (float): The cool to temperature.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del temperature\n    _LOGGER.debug('set cool to temp not implemented for %s', self.device_type)\n    return False\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.set_heat_to_temp","title":"set_heat_to_temp  <code>async</code>  \u21b2","text":"<pre><code>set_heat_to_temp(temperature: float) -&gt; bool\n</code></pre> <p>Set the heat to temperature.</p> <p>Parameters:</p> Name Type Description Default <code>temperature</code> <code>float</code> <p>The heat to temperature.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def set_heat_to_temp(self, temperature: float) -&gt; bool:\n    \"\"\"Set the heat to temperature.\n\n    Args:\n        temperature (float): The heat to temperature.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del temperature\n    _LOGGER.debug('set heat to temp not implemented for %s', self.device_type)\n    return False\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.toggle_lock","title":"toggle_lock  <code>async</code>  \u21b2","text":"<pre><code>toggle_lock(\n    toggle: bool, pin: int | str | None = None\n) -&gt; bool\n</code></pre> <p>Toggle the thermostat lock status.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def toggle_lock(self, toggle: bool, pin: int | str | None = None) -&gt; bool:\n    \"\"\"Toggle the thermostat lock status.\"\"\"\n    del toggle, pin\n    _LOGGER.debug('toggle lock not implemented for %s', self.device_type)\n    return False\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.turn_on_lock","title":"turn_on_lock  <code>async</code>  \u21b2","text":"<pre><code>turn_on_lock(pin: int | str) -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p> <p>Turn on the thermostat lock.</p> <p>Parameters:</p> Name Type Description Default <code>pin</code> <code>int | str</code> <p>The 4-digit PIN code.</p> required Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def turn_on_lock(self, pin: int | str) -&gt; bool:\n    \"\"\"Turn on the thermostat lock.\n\n    Args:\n        pin (int | str): The 4-digit PIN code.\n    \"\"\"\n    return await self.toggle_lock(True, pin)\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.turn_off_lock","title":"turn_off_lock  <code>async</code>  \u21b2","text":"<pre><code>turn_off_lock() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p> <p>Turn off the thermostat lock.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def turn_off_lock(self) -&gt; bool:\n    \"\"\"Turn off the thermostat lock.\"\"\"\n    return await self.toggle_lock(False)\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.set_eco_type","title":"set_eco_type  <code>async</code>  \u21b2","text":"<pre><code>set_eco_type(eco_type: ThermostatEcoTypes) -&gt; bool\n</code></pre> <p>Set thermostat eco type.</p> <p>Parameters:</p> Name Type Description Default <code>eco_type</code> <code>ThermostatEcoTypes</code> <p>The eco type to set, options are found in self.eco_types.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def set_eco_type(self, eco_type: ThermostatEcoTypes) -&gt; bool:\n    \"\"\"Set thermostat eco type.\n\n    Args:\n        eco_type (ThermostatEcoTypes): The eco type to set, options are found in\n            self.eco_types.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    del eco_type\n    if not self.eco_types:\n        _LOGGER.debug('No eco types available for %s', self.device_type)\n    else:\n        _LOGGER.debug('set_eco_type not configured for %s', self.device_name)\n    return False\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.set_eco_first","title":"set_eco_first  <code>async</code>  \u21b2","text":"<pre><code>set_eco_first() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p> <p>Set eco first.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def set_eco_first(self) -&gt; bool:\n    \"\"\"Set eco first.\"\"\"\n    return await self.set_eco_type(ThermostatEcoTypes.ECO_FIRST)\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.set_eco_second","title":"set_eco_second  <code>async</code>  \u21b2","text":"<pre><code>set_eco_second() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p> <p>Set eco second.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def set_eco_second(self) -&gt; bool:\n    \"\"\"Set eco second.\"\"\"\n    return await self.set_eco_type(ThermostatEcoTypes.ECO_SECOND)\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.set_eco_comfort_first","title":"set_eco_comfort_first  <code>async</code>  \u21b2","text":"<pre><code>set_eco_comfort_first() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p> <p>Set eco comfort.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def set_eco_comfort_first(self) -&gt; bool:\n    \"\"\"Set eco comfort.\"\"\"\n    return await self.set_eco_type(ThermostatEcoTypes.COMFORT_FIRST)\n</code></pre>"},{"location":"devices/thermostats/#pyvesync.base_devices.thermostat_base.VeSyncThermostat.set_eco_comfort_second","title":"set_eco_comfort_second  <code>async</code>  \u21b2","text":"<pre><code>set_eco_comfort_second() -&gt; bool\n</code></pre> <p>Inherited From <code>VeSyncThermostat</code></p> <p>Set eco comfort.</p> Source code in <code>src\\pyvesync\\base_devices\\thermostat_base.py</code> <pre><code>async def set_eco_comfort_second(self) -&gt; bool:\n    \"\"\"Set eco comfort.\"\"\"\n    return await self.set_eco_type(ThermostatEcoTypes.COMFORT_SECOND)\n</code></pre>"}]}