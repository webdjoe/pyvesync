name: Release
# Controls when the workflow will run
on:
    push:
        branches:
            - master


jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v5
            - name: Gets semantic release info
              id: semantic_release_info
              uses: jossef/action-semantic-release-info@v3.0.0
              env:
                  GITHUB_TOKEN: ${{ github.token }}
            - name: Update Version and Commit
              if: ${{steps.semantic_release_info.outputs.version != ''}}
              run: |
                  echo "Version: ${{steps.semantic_release_info.outputs.version}}"
                  sed -E -i "s/^(version[[:space:]]*=[[:space:]]*)\"[^\"]+\"/\1\"${{steps.semantic_release_info.outputs.version}}\"/" pyproject.toml
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git add -A
                  git commit -m "chore: bumping version to ${{steps.semantic_release_info.outputs.version}}"
                  git tag ${{ steps.semantic_release_info.outputs.git_tag }}
            - name: Push changes
              if: ${{steps.semantic_release_info.outputs.version != ''}}
              uses: ad-m/github-push-action@v1.0.0
              with:
                  github_token: ${{ github.token }}
                  tags: true
            - name: Create GitHub Release
              if: ${{steps.semantic_release_info.outputs.version != ''}}
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ github.token }}
              with:
                  tag_name: ${{ steps.semantic_release_info.outputs.git_tag }}
                  release_name: ${{ steps.semantic_release_info.outputs.git_tag }}
                  body: ${{ steps.semantic_release_info.outputs.notes }}
                  draft: false
                  prerelease: false
            - name: Install dependencies
              if: ${{steps.semantic_release_info.outputs.version != ''}}
              run: |
                  python -m pip install --upgrade pip
                  pip install build
            - name: Build package
              if: ${{steps.semantic_release_info.outputs.version != ''}}
              run: python -m build
            - name: Publish package to PyPi Test
              if: ${{steps.semantic_release_info.outputs.version != ''}}
              uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e
              with:
                  user: __token__
                  password: ${{ secrets.TEST_PYPI_API_TOKEN }}
                  repository_url: https://test.pypi.org/legacy/
                  verbose: true
            - name: Publish package to PyPi Live
              if: ${{steps.semantic_release_info.outputs.version != ''}}
              uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e
              with:
                  user: __token__
                  password: ${{ secrets.PYPI_API_TOKEN }}
                  verbose: true